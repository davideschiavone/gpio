// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package gpio_reg_pkg;

  // Param list
  parameter int GPIORegCount = 2;

  // Address widths within the block
  parameter int BlockAw = 11;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [31:0] q;
  } gpio_reg2hw_gpio_dir_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } gpio_reg2hw_gpio_en_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } gpio_reg2hw_gpio_out_mreg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } gpio_reg2hw_gpio_set_mreg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } gpio_reg2hw_gpio_clear_mreg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } gpio_reg2hw_gpio_toggle_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } gpio_reg2hw_intrpt_rise_en_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } gpio_reg2hw_intrpt_fall_en_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } gpio_reg2hw_intrpt_status_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } gpio_hw2reg_gpio_in_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } gpio_hw2reg_gpio_out_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } gpio_hw2reg_intrpt_status_mreg_t;

  // Register -> HW type
  typedef struct packed {
    gpio_reg2hw_gpio_dir_mreg_t [1:0] gpio_dir; // [581:518]
    gpio_reg2hw_gpio_en_mreg_t [1:0] gpio_en; // [517:454]
    gpio_reg2hw_gpio_out_mreg_t [1:0] gpio_out; // [453:390]
    gpio_reg2hw_gpio_set_mreg_t [1:0] gpio_set; // [389:324]
    gpio_reg2hw_gpio_clear_mreg_t [1:0] gpio_clear; // [323:258]
    gpio_reg2hw_gpio_toggle_mreg_t [1:0] gpio_toggle; // [257:192]
    gpio_reg2hw_intrpt_rise_en_mreg_t [1:0] intrpt_rise_en; // [191:128]
    gpio_reg2hw_intrpt_fall_en_mreg_t [1:0] intrpt_fall_en; // [127:64]
    gpio_reg2hw_intrpt_status_mreg_t [1:0] intrpt_status; // [63:0]
  } gpio_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    gpio_hw2reg_gpio_in_mreg_t [1:0] gpio_in; // [195:132]
    gpio_hw2reg_gpio_out_mreg_t [1:0] gpio_out; // [131:66]
    gpio_hw2reg_intrpt_status_mreg_t [1:0] intrpt_status; // [65:0]
  } gpio_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] GPIO_GPIO_DIR_0_OFFSET = 11'h 0;
  parameter logic [BlockAw-1:0] GPIO_GPIO_DIR_1_OFFSET = 11'h 4;
  parameter logic [BlockAw-1:0] GPIO_GPIO_EN_0_OFFSET = 11'h 88;
  parameter logic [BlockAw-1:0] GPIO_GPIO_EN_1_OFFSET = 11'h 8c;
  parameter logic [BlockAw-1:0] GPIO_GPIO_IN_0_OFFSET = 11'h 110;
  parameter logic [BlockAw-1:0] GPIO_GPIO_IN_1_OFFSET = 11'h 114;
  parameter logic [BlockAw-1:0] GPIO_GPIO_OUT_0_OFFSET = 11'h 198;
  parameter logic [BlockAw-1:0] GPIO_GPIO_OUT_1_OFFSET = 11'h 19c;
  parameter logic [BlockAw-1:0] GPIO_GPIO_SET_0_OFFSET = 11'h 220;
  parameter logic [BlockAw-1:0] GPIO_GPIO_SET_1_OFFSET = 11'h 224;
  parameter logic [BlockAw-1:0] GPIO_GPIO_CLEAR_0_OFFSET = 11'h 2a8;
  parameter logic [BlockAw-1:0] GPIO_GPIO_CLEAR_1_OFFSET = 11'h 2ac;
  parameter logic [BlockAw-1:0] GPIO_GPIO_TOGGLE_0_OFFSET = 11'h 330;
  parameter logic [BlockAw-1:0] GPIO_GPIO_TOGGLE_1_OFFSET = 11'h 334;
  parameter logic [BlockAw-1:0] GPIO_INTRPT_RISE_EN_0_OFFSET = 11'h 3b8;
  parameter logic [BlockAw-1:0] GPIO_INTRPT_RISE_EN_1_OFFSET = 11'h 3bc;
  parameter logic [BlockAw-1:0] GPIO_INTRPT_FALL_EN_0_OFFSET = 11'h 440;
  parameter logic [BlockAw-1:0] GPIO_INTRPT_FALL_EN_1_OFFSET = 11'h 444;
  parameter logic [BlockAw-1:0] GPIO_INTRPT_STATUS_0_OFFSET = 11'h 4c8;
  parameter logic [BlockAw-1:0] GPIO_INTRPT_STATUS_1_OFFSET = 11'h 4cc;

  // Reset values for hwext registers and their fields
  parameter logic [31:0] GPIO_GPIO_IN_0_RESVAL = 32'h 0;
  parameter logic [31:0] GPIO_GPIO_IN_1_RESVAL = 32'h 0;
  parameter logic [31:0] GPIO_GPIO_SET_0_RESVAL = 32'h 0;
  parameter logic [31:0] GPIO_GPIO_SET_1_RESVAL = 32'h 0;
  parameter logic [31:0] GPIO_GPIO_CLEAR_0_RESVAL = 32'h 0;
  parameter logic [31:0] GPIO_GPIO_CLEAR_1_RESVAL = 32'h 0;
  parameter logic [31:0] GPIO_GPIO_TOGGLE_0_RESVAL = 32'h 0;
  parameter logic [31:0] GPIO_GPIO_TOGGLE_1_RESVAL = 32'h 0;

  // Register index
  typedef enum int {
    GPIO_GPIO_DIR_0,
    GPIO_GPIO_DIR_1,
    GPIO_GPIO_EN_0,
    GPIO_GPIO_EN_1,
    GPIO_GPIO_IN_0,
    GPIO_GPIO_IN_1,
    GPIO_GPIO_OUT_0,
    GPIO_GPIO_OUT_1,
    GPIO_GPIO_SET_0,
    GPIO_GPIO_SET_1,
    GPIO_GPIO_CLEAR_0,
    GPIO_GPIO_CLEAR_1,
    GPIO_GPIO_TOGGLE_0,
    GPIO_GPIO_TOGGLE_1,
    GPIO_INTRPT_RISE_EN_0,
    GPIO_INTRPT_RISE_EN_1,
    GPIO_INTRPT_FALL_EN_0,
    GPIO_INTRPT_FALL_EN_1,
    GPIO_INTRPT_STATUS_0,
    GPIO_INTRPT_STATUS_1
  } gpio_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] GPIO_PERMIT [20] = '{
    4'b 1111, // index[ 0] GPIO_GPIO_DIR_0
    4'b 1111, // index[ 1] GPIO_GPIO_DIR_1
    4'b 1111, // index[ 2] GPIO_GPIO_EN_0
    4'b 1111, // index[ 3] GPIO_GPIO_EN_1
    4'b 1111, // index[ 4] GPIO_GPIO_IN_0
    4'b 1111, // index[ 5] GPIO_GPIO_IN_1
    4'b 1111, // index[ 6] GPIO_GPIO_OUT_0
    4'b 1111, // index[ 7] GPIO_GPIO_OUT_1
    4'b 1111, // index[ 8] GPIO_GPIO_SET_0
    4'b 1111, // index[ 9] GPIO_GPIO_SET_1
    4'b 1111, // index[10] GPIO_GPIO_CLEAR_0
    4'b 1111, // index[11] GPIO_GPIO_CLEAR_1
    4'b 1111, // index[12] GPIO_GPIO_TOGGLE_0
    4'b 1111, // index[13] GPIO_GPIO_TOGGLE_1
    4'b 1111, // index[14] GPIO_INTRPT_RISE_EN_0
    4'b 1111, // index[15] GPIO_INTRPT_RISE_EN_1
    4'b 1111, // index[16] GPIO_INTRPT_FALL_EN_0
    4'b 1111, // index[17] GPIO_INTRPT_FALL_EN_1
    4'b 1111, // index[18] GPIO_INTRPT_STATUS_0
    4'b 1111  // index[19] GPIO_INTRPT_STATUS_1
  };

endpackage

