// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module gpio_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 11
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output gpio_reg_pkg::gpio_reg2hw_t reg2hw, // Write
  input  gpio_reg_pkg::gpio_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import gpio_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [9:0] info_gpio_cnt_qs;
  logic info_gpio_cnt_re;
  logic [9:0] info_version_qs;
  logic info_version_re;
  logic cfg_intrpt_mode_qs;
  logic cfg_intrpt_mode_wd;
  logic cfg_intrpt_mode_we;
  logic cfg_reserved_qs;
  logic cfg_reserved_wd;
  logic cfg_reserved_we;
  logic [1:0] gpio_mode_0_mode_0_qs;
  logic [1:0] gpio_mode_0_mode_0_wd;
  logic gpio_mode_0_mode_0_we;
  logic [1:0] gpio_mode_0_mode_1_qs;
  logic [1:0] gpio_mode_0_mode_1_wd;
  logic gpio_mode_0_mode_1_we;
  logic [1:0] gpio_mode_0_mode_2_qs;
  logic [1:0] gpio_mode_0_mode_2_wd;
  logic gpio_mode_0_mode_2_we;
  logic [1:0] gpio_mode_0_mode_3_qs;
  logic [1:0] gpio_mode_0_mode_3_wd;
  logic gpio_mode_0_mode_3_we;
  logic [1:0] gpio_mode_0_mode_4_qs;
  logic [1:0] gpio_mode_0_mode_4_wd;
  logic gpio_mode_0_mode_4_we;
  logic [1:0] gpio_mode_0_mode_5_qs;
  logic [1:0] gpio_mode_0_mode_5_wd;
  logic gpio_mode_0_mode_5_we;
  logic [1:0] gpio_mode_0_mode_6_qs;
  logic [1:0] gpio_mode_0_mode_6_wd;
  logic gpio_mode_0_mode_6_we;
  logic [1:0] gpio_mode_0_mode_7_qs;
  logic [1:0] gpio_mode_0_mode_7_wd;
  logic gpio_mode_0_mode_7_we;
  logic [1:0] gpio_mode_0_mode_8_qs;
  logic [1:0] gpio_mode_0_mode_8_wd;
  logic gpio_mode_0_mode_8_we;
  logic [1:0] gpio_mode_0_mode_9_qs;
  logic [1:0] gpio_mode_0_mode_9_wd;
  logic gpio_mode_0_mode_9_we;
  logic [1:0] gpio_mode_0_mode_10_qs;
  logic [1:0] gpio_mode_0_mode_10_wd;
  logic gpio_mode_0_mode_10_we;
  logic [1:0] gpio_mode_0_mode_11_qs;
  logic [1:0] gpio_mode_0_mode_11_wd;
  logic gpio_mode_0_mode_11_we;
  logic [1:0] gpio_mode_0_mode_12_qs;
  logic [1:0] gpio_mode_0_mode_12_wd;
  logic gpio_mode_0_mode_12_we;
  logic [1:0] gpio_mode_0_mode_13_qs;
  logic [1:0] gpio_mode_0_mode_13_wd;
  logic gpio_mode_0_mode_13_we;
  logic [1:0] gpio_mode_0_mode_14_qs;
  logic [1:0] gpio_mode_0_mode_14_wd;
  logic gpio_mode_0_mode_14_we;
  logic [1:0] gpio_mode_0_mode_15_qs;
  logic [1:0] gpio_mode_0_mode_15_wd;
  logic gpio_mode_0_mode_15_we;
  logic [1:0] gpio_mode_1_mode_16_qs;
  logic [1:0] gpio_mode_1_mode_16_wd;
  logic gpio_mode_1_mode_16_we;
  logic [1:0] gpio_mode_1_mode_17_qs;
  logic [1:0] gpio_mode_1_mode_17_wd;
  logic gpio_mode_1_mode_17_we;
  logic [1:0] gpio_mode_1_mode_18_qs;
  logic [1:0] gpio_mode_1_mode_18_wd;
  logic gpio_mode_1_mode_18_we;
  logic [1:0] gpio_mode_1_mode_19_qs;
  logic [1:0] gpio_mode_1_mode_19_wd;
  logic gpio_mode_1_mode_19_we;
  logic [1:0] gpio_mode_1_mode_20_qs;
  logic [1:0] gpio_mode_1_mode_20_wd;
  logic gpio_mode_1_mode_20_we;
  logic [1:0] gpio_mode_1_mode_21_qs;
  logic [1:0] gpio_mode_1_mode_21_wd;
  logic gpio_mode_1_mode_21_we;
  logic [1:0] gpio_mode_1_mode_22_qs;
  logic [1:0] gpio_mode_1_mode_22_wd;
  logic gpio_mode_1_mode_22_we;
  logic [1:0] gpio_mode_1_mode_23_qs;
  logic [1:0] gpio_mode_1_mode_23_wd;
  logic gpio_mode_1_mode_23_we;
  logic [1:0] gpio_mode_1_mode_24_qs;
  logic [1:0] gpio_mode_1_mode_24_wd;
  logic gpio_mode_1_mode_24_we;
  logic [1:0] gpio_mode_1_mode_25_qs;
  logic [1:0] gpio_mode_1_mode_25_wd;
  logic gpio_mode_1_mode_25_we;
  logic [1:0] gpio_mode_1_mode_26_qs;
  logic [1:0] gpio_mode_1_mode_26_wd;
  logic gpio_mode_1_mode_26_we;
  logic [1:0] gpio_mode_1_mode_27_qs;
  logic [1:0] gpio_mode_1_mode_27_wd;
  logic gpio_mode_1_mode_27_we;
  logic [1:0] gpio_mode_1_mode_28_qs;
  logic [1:0] gpio_mode_1_mode_28_wd;
  logic gpio_mode_1_mode_28_we;
  logic [1:0] gpio_mode_1_mode_29_qs;
  logic [1:0] gpio_mode_1_mode_29_wd;
  logic gpio_mode_1_mode_29_we;
  logic [1:0] gpio_mode_1_mode_30_qs;
  logic [1:0] gpio_mode_1_mode_30_wd;
  logic gpio_mode_1_mode_30_we;
  logic [1:0] gpio_mode_1_mode_31_qs;
  logic [1:0] gpio_mode_1_mode_31_wd;
  logic gpio_mode_1_mode_31_we;
  logic [1:0] gpio_mode_2_mode_32_qs;
  logic [1:0] gpio_mode_2_mode_32_wd;
  logic gpio_mode_2_mode_32_we;
  logic [1:0] gpio_mode_2_mode_33_qs;
  logic [1:0] gpio_mode_2_mode_33_wd;
  logic gpio_mode_2_mode_33_we;
  logic [1:0] gpio_mode_2_mode_34_qs;
  logic [1:0] gpio_mode_2_mode_34_wd;
  logic gpio_mode_2_mode_34_we;
  logic [1:0] gpio_mode_2_mode_35_qs;
  logic [1:0] gpio_mode_2_mode_35_wd;
  logic gpio_mode_2_mode_35_we;
  logic [1:0] gpio_mode_2_mode_36_qs;
  logic [1:0] gpio_mode_2_mode_36_wd;
  logic gpio_mode_2_mode_36_we;
  logic [1:0] gpio_mode_2_mode_37_qs;
  logic [1:0] gpio_mode_2_mode_37_wd;
  logic gpio_mode_2_mode_37_we;
  logic [1:0] gpio_mode_2_mode_38_qs;
  logic [1:0] gpio_mode_2_mode_38_wd;
  logic gpio_mode_2_mode_38_we;
  logic [1:0] gpio_mode_2_mode_39_qs;
  logic [1:0] gpio_mode_2_mode_39_wd;
  logic gpio_mode_2_mode_39_we;
  logic [1:0] gpio_mode_2_mode_40_qs;
  logic [1:0] gpio_mode_2_mode_40_wd;
  logic gpio_mode_2_mode_40_we;
  logic [1:0] gpio_mode_2_mode_41_qs;
  logic [1:0] gpio_mode_2_mode_41_wd;
  logic gpio_mode_2_mode_41_we;
  logic [1:0] gpio_mode_2_mode_42_qs;
  logic [1:0] gpio_mode_2_mode_42_wd;
  logic gpio_mode_2_mode_42_we;
  logic [1:0] gpio_mode_2_mode_43_qs;
  logic [1:0] gpio_mode_2_mode_43_wd;
  logic gpio_mode_2_mode_43_we;
  logic [1:0] gpio_mode_2_mode_44_qs;
  logic [1:0] gpio_mode_2_mode_44_wd;
  logic gpio_mode_2_mode_44_we;
  logic [1:0] gpio_mode_2_mode_45_qs;
  logic [1:0] gpio_mode_2_mode_45_wd;
  logic gpio_mode_2_mode_45_we;
  logic [1:0] gpio_mode_2_mode_46_qs;
  logic [1:0] gpio_mode_2_mode_46_wd;
  logic gpio_mode_2_mode_46_we;
  logic [1:0] gpio_mode_2_mode_47_qs;
  logic [1:0] gpio_mode_2_mode_47_wd;
  logic gpio_mode_2_mode_47_we;
  logic [1:0] gpio_mode_3_mode_48_qs;
  logic [1:0] gpio_mode_3_mode_48_wd;
  logic gpio_mode_3_mode_48_we;
  logic [1:0] gpio_mode_3_mode_49_qs;
  logic [1:0] gpio_mode_3_mode_49_wd;
  logic gpio_mode_3_mode_49_we;
  logic [1:0] gpio_mode_3_mode_50_qs;
  logic [1:0] gpio_mode_3_mode_50_wd;
  logic gpio_mode_3_mode_50_we;
  logic [1:0] gpio_mode_3_mode_51_qs;
  logic [1:0] gpio_mode_3_mode_51_wd;
  logic gpio_mode_3_mode_51_we;
  logic [1:0] gpio_mode_3_mode_52_qs;
  logic [1:0] gpio_mode_3_mode_52_wd;
  logic gpio_mode_3_mode_52_we;
  logic [1:0] gpio_mode_3_mode_53_qs;
  logic [1:0] gpio_mode_3_mode_53_wd;
  logic gpio_mode_3_mode_53_we;
  logic [1:0] gpio_mode_3_mode_54_qs;
  logic [1:0] gpio_mode_3_mode_54_wd;
  logic gpio_mode_3_mode_54_we;
  logic [1:0] gpio_mode_3_mode_55_qs;
  logic [1:0] gpio_mode_3_mode_55_wd;
  logic gpio_mode_3_mode_55_we;
  logic gpio_en_0_gpio_en_0_qs;
  logic gpio_en_0_gpio_en_0_wd;
  logic gpio_en_0_gpio_en_0_we;
  logic gpio_en_0_gpio_en_1_qs;
  logic gpio_en_0_gpio_en_1_wd;
  logic gpio_en_0_gpio_en_1_we;
  logic gpio_en_0_gpio_en_2_qs;
  logic gpio_en_0_gpio_en_2_wd;
  logic gpio_en_0_gpio_en_2_we;
  logic gpio_en_0_gpio_en_3_qs;
  logic gpio_en_0_gpio_en_3_wd;
  logic gpio_en_0_gpio_en_3_we;
  logic gpio_en_0_gpio_en_4_qs;
  logic gpio_en_0_gpio_en_4_wd;
  logic gpio_en_0_gpio_en_4_we;
  logic gpio_en_0_gpio_en_5_qs;
  logic gpio_en_0_gpio_en_5_wd;
  logic gpio_en_0_gpio_en_5_we;
  logic gpio_en_0_gpio_en_6_qs;
  logic gpio_en_0_gpio_en_6_wd;
  logic gpio_en_0_gpio_en_6_we;
  logic gpio_en_0_gpio_en_7_qs;
  logic gpio_en_0_gpio_en_7_wd;
  logic gpio_en_0_gpio_en_7_we;
  logic gpio_en_0_gpio_en_8_qs;
  logic gpio_en_0_gpio_en_8_wd;
  logic gpio_en_0_gpio_en_8_we;
  logic gpio_en_0_gpio_en_9_qs;
  logic gpio_en_0_gpio_en_9_wd;
  logic gpio_en_0_gpio_en_9_we;
  logic gpio_en_0_gpio_en_10_qs;
  logic gpio_en_0_gpio_en_10_wd;
  logic gpio_en_0_gpio_en_10_we;
  logic gpio_en_0_gpio_en_11_qs;
  logic gpio_en_0_gpio_en_11_wd;
  logic gpio_en_0_gpio_en_11_we;
  logic gpio_en_0_gpio_en_12_qs;
  logic gpio_en_0_gpio_en_12_wd;
  logic gpio_en_0_gpio_en_12_we;
  logic gpio_en_0_gpio_en_13_qs;
  logic gpio_en_0_gpio_en_13_wd;
  logic gpio_en_0_gpio_en_13_we;
  logic gpio_en_0_gpio_en_14_qs;
  logic gpio_en_0_gpio_en_14_wd;
  logic gpio_en_0_gpio_en_14_we;
  logic gpio_en_0_gpio_en_15_qs;
  logic gpio_en_0_gpio_en_15_wd;
  logic gpio_en_0_gpio_en_15_we;
  logic gpio_en_0_gpio_en_16_qs;
  logic gpio_en_0_gpio_en_16_wd;
  logic gpio_en_0_gpio_en_16_we;
  logic gpio_en_0_gpio_en_17_qs;
  logic gpio_en_0_gpio_en_17_wd;
  logic gpio_en_0_gpio_en_17_we;
  logic gpio_en_0_gpio_en_18_qs;
  logic gpio_en_0_gpio_en_18_wd;
  logic gpio_en_0_gpio_en_18_we;
  logic gpio_en_0_gpio_en_19_qs;
  logic gpio_en_0_gpio_en_19_wd;
  logic gpio_en_0_gpio_en_19_we;
  logic gpio_en_0_gpio_en_20_qs;
  logic gpio_en_0_gpio_en_20_wd;
  logic gpio_en_0_gpio_en_20_we;
  logic gpio_en_0_gpio_en_21_qs;
  logic gpio_en_0_gpio_en_21_wd;
  logic gpio_en_0_gpio_en_21_we;
  logic gpio_en_0_gpio_en_22_qs;
  logic gpio_en_0_gpio_en_22_wd;
  logic gpio_en_0_gpio_en_22_we;
  logic gpio_en_0_gpio_en_23_qs;
  logic gpio_en_0_gpio_en_23_wd;
  logic gpio_en_0_gpio_en_23_we;
  logic gpio_en_0_gpio_en_24_qs;
  logic gpio_en_0_gpio_en_24_wd;
  logic gpio_en_0_gpio_en_24_we;
  logic gpio_en_0_gpio_en_25_qs;
  logic gpio_en_0_gpio_en_25_wd;
  logic gpio_en_0_gpio_en_25_we;
  logic gpio_en_0_gpio_en_26_qs;
  logic gpio_en_0_gpio_en_26_wd;
  logic gpio_en_0_gpio_en_26_we;
  logic gpio_en_0_gpio_en_27_qs;
  logic gpio_en_0_gpio_en_27_wd;
  logic gpio_en_0_gpio_en_27_we;
  logic gpio_en_0_gpio_en_28_qs;
  logic gpio_en_0_gpio_en_28_wd;
  logic gpio_en_0_gpio_en_28_we;
  logic gpio_en_0_gpio_en_29_qs;
  logic gpio_en_0_gpio_en_29_wd;
  logic gpio_en_0_gpio_en_29_we;
  logic gpio_en_0_gpio_en_30_qs;
  logic gpio_en_0_gpio_en_30_wd;
  logic gpio_en_0_gpio_en_30_we;
  logic gpio_en_0_gpio_en_31_qs;
  logic gpio_en_0_gpio_en_31_wd;
  logic gpio_en_0_gpio_en_31_we;
  logic gpio_en_1_gpio_en_32_qs;
  logic gpio_en_1_gpio_en_32_wd;
  logic gpio_en_1_gpio_en_32_we;
  logic gpio_en_1_gpio_en_33_qs;
  logic gpio_en_1_gpio_en_33_wd;
  logic gpio_en_1_gpio_en_33_we;
  logic gpio_en_1_gpio_en_34_qs;
  logic gpio_en_1_gpio_en_34_wd;
  logic gpio_en_1_gpio_en_34_we;
  logic gpio_en_1_gpio_en_35_qs;
  logic gpio_en_1_gpio_en_35_wd;
  logic gpio_en_1_gpio_en_35_we;
  logic gpio_en_1_gpio_en_36_qs;
  logic gpio_en_1_gpio_en_36_wd;
  logic gpio_en_1_gpio_en_36_we;
  logic gpio_en_1_gpio_en_37_qs;
  logic gpio_en_1_gpio_en_37_wd;
  logic gpio_en_1_gpio_en_37_we;
  logic gpio_en_1_gpio_en_38_qs;
  logic gpio_en_1_gpio_en_38_wd;
  logic gpio_en_1_gpio_en_38_we;
  logic gpio_en_1_gpio_en_39_qs;
  logic gpio_en_1_gpio_en_39_wd;
  logic gpio_en_1_gpio_en_39_we;
  logic gpio_en_1_gpio_en_40_qs;
  logic gpio_en_1_gpio_en_40_wd;
  logic gpio_en_1_gpio_en_40_we;
  logic gpio_en_1_gpio_en_41_qs;
  logic gpio_en_1_gpio_en_41_wd;
  logic gpio_en_1_gpio_en_41_we;
  logic gpio_en_1_gpio_en_42_qs;
  logic gpio_en_1_gpio_en_42_wd;
  logic gpio_en_1_gpio_en_42_we;
  logic gpio_en_1_gpio_en_43_qs;
  logic gpio_en_1_gpio_en_43_wd;
  logic gpio_en_1_gpio_en_43_we;
  logic gpio_en_1_gpio_en_44_qs;
  logic gpio_en_1_gpio_en_44_wd;
  logic gpio_en_1_gpio_en_44_we;
  logic gpio_en_1_gpio_en_45_qs;
  logic gpio_en_1_gpio_en_45_wd;
  logic gpio_en_1_gpio_en_45_we;
  logic gpio_en_1_gpio_en_46_qs;
  logic gpio_en_1_gpio_en_46_wd;
  logic gpio_en_1_gpio_en_46_we;
  logic gpio_en_1_gpio_en_47_qs;
  logic gpio_en_1_gpio_en_47_wd;
  logic gpio_en_1_gpio_en_47_we;
  logic gpio_en_1_gpio_en_48_qs;
  logic gpio_en_1_gpio_en_48_wd;
  logic gpio_en_1_gpio_en_48_we;
  logic gpio_en_1_gpio_en_49_qs;
  logic gpio_en_1_gpio_en_49_wd;
  logic gpio_en_1_gpio_en_49_we;
  logic gpio_en_1_gpio_en_50_qs;
  logic gpio_en_1_gpio_en_50_wd;
  logic gpio_en_1_gpio_en_50_we;
  logic gpio_en_1_gpio_en_51_qs;
  logic gpio_en_1_gpio_en_51_wd;
  logic gpio_en_1_gpio_en_51_we;
  logic gpio_en_1_gpio_en_52_qs;
  logic gpio_en_1_gpio_en_52_wd;
  logic gpio_en_1_gpio_en_52_we;
  logic gpio_en_1_gpio_en_53_qs;
  logic gpio_en_1_gpio_en_53_wd;
  logic gpio_en_1_gpio_en_53_we;
  logic gpio_en_1_gpio_en_54_qs;
  logic gpio_en_1_gpio_en_54_wd;
  logic gpio_en_1_gpio_en_54_we;
  logic gpio_en_1_gpio_en_55_qs;
  logic gpio_en_1_gpio_en_55_wd;
  logic gpio_en_1_gpio_en_55_we;
  logic gpio_in_0_gpio_in_0_qs;
  logic gpio_in_0_gpio_in_0_re;
  logic gpio_in_0_gpio_in_1_qs;
  logic gpio_in_0_gpio_in_1_re;
  logic gpio_in_0_gpio_in_2_qs;
  logic gpio_in_0_gpio_in_2_re;
  logic gpio_in_0_gpio_in_3_qs;
  logic gpio_in_0_gpio_in_3_re;
  logic gpio_in_0_gpio_in_4_qs;
  logic gpio_in_0_gpio_in_4_re;
  logic gpio_in_0_gpio_in_5_qs;
  logic gpio_in_0_gpio_in_5_re;
  logic gpio_in_0_gpio_in_6_qs;
  logic gpio_in_0_gpio_in_6_re;
  logic gpio_in_0_gpio_in_7_qs;
  logic gpio_in_0_gpio_in_7_re;
  logic gpio_in_0_gpio_in_8_qs;
  logic gpio_in_0_gpio_in_8_re;
  logic gpio_in_0_gpio_in_9_qs;
  logic gpio_in_0_gpio_in_9_re;
  logic gpio_in_0_gpio_in_10_qs;
  logic gpio_in_0_gpio_in_10_re;
  logic gpio_in_0_gpio_in_11_qs;
  logic gpio_in_0_gpio_in_11_re;
  logic gpio_in_0_gpio_in_12_qs;
  logic gpio_in_0_gpio_in_12_re;
  logic gpio_in_0_gpio_in_13_qs;
  logic gpio_in_0_gpio_in_13_re;
  logic gpio_in_0_gpio_in_14_qs;
  logic gpio_in_0_gpio_in_14_re;
  logic gpio_in_0_gpio_in_15_qs;
  logic gpio_in_0_gpio_in_15_re;
  logic gpio_in_0_gpio_in_16_qs;
  logic gpio_in_0_gpio_in_16_re;
  logic gpio_in_0_gpio_in_17_qs;
  logic gpio_in_0_gpio_in_17_re;
  logic gpio_in_0_gpio_in_18_qs;
  logic gpio_in_0_gpio_in_18_re;
  logic gpio_in_0_gpio_in_19_qs;
  logic gpio_in_0_gpio_in_19_re;
  logic gpio_in_0_gpio_in_20_qs;
  logic gpio_in_0_gpio_in_20_re;
  logic gpio_in_0_gpio_in_21_qs;
  logic gpio_in_0_gpio_in_21_re;
  logic gpio_in_0_gpio_in_22_qs;
  logic gpio_in_0_gpio_in_22_re;
  logic gpio_in_0_gpio_in_23_qs;
  logic gpio_in_0_gpio_in_23_re;
  logic gpio_in_0_gpio_in_24_qs;
  logic gpio_in_0_gpio_in_24_re;
  logic gpio_in_0_gpio_in_25_qs;
  logic gpio_in_0_gpio_in_25_re;
  logic gpio_in_0_gpio_in_26_qs;
  logic gpio_in_0_gpio_in_26_re;
  logic gpio_in_0_gpio_in_27_qs;
  logic gpio_in_0_gpio_in_27_re;
  logic gpio_in_0_gpio_in_28_qs;
  logic gpio_in_0_gpio_in_28_re;
  logic gpio_in_0_gpio_in_29_qs;
  logic gpio_in_0_gpio_in_29_re;
  logic gpio_in_0_gpio_in_30_qs;
  logic gpio_in_0_gpio_in_30_re;
  logic gpio_in_0_gpio_in_31_qs;
  logic gpio_in_0_gpio_in_31_re;
  logic gpio_in_1_gpio_in_32_qs;
  logic gpio_in_1_gpio_in_32_re;
  logic gpio_in_1_gpio_in_33_qs;
  logic gpio_in_1_gpio_in_33_re;
  logic gpio_in_1_gpio_in_34_qs;
  logic gpio_in_1_gpio_in_34_re;
  logic gpio_in_1_gpio_in_35_qs;
  logic gpio_in_1_gpio_in_35_re;
  logic gpio_in_1_gpio_in_36_qs;
  logic gpio_in_1_gpio_in_36_re;
  logic gpio_in_1_gpio_in_37_qs;
  logic gpio_in_1_gpio_in_37_re;
  logic gpio_in_1_gpio_in_38_qs;
  logic gpio_in_1_gpio_in_38_re;
  logic gpio_in_1_gpio_in_39_qs;
  logic gpio_in_1_gpio_in_39_re;
  logic gpio_in_1_gpio_in_40_qs;
  logic gpio_in_1_gpio_in_40_re;
  logic gpio_in_1_gpio_in_41_qs;
  logic gpio_in_1_gpio_in_41_re;
  logic gpio_in_1_gpio_in_42_qs;
  logic gpio_in_1_gpio_in_42_re;
  logic gpio_in_1_gpio_in_43_qs;
  logic gpio_in_1_gpio_in_43_re;
  logic gpio_in_1_gpio_in_44_qs;
  logic gpio_in_1_gpio_in_44_re;
  logic gpio_in_1_gpio_in_45_qs;
  logic gpio_in_1_gpio_in_45_re;
  logic gpio_in_1_gpio_in_46_qs;
  logic gpio_in_1_gpio_in_46_re;
  logic gpio_in_1_gpio_in_47_qs;
  logic gpio_in_1_gpio_in_47_re;
  logic gpio_in_1_gpio_in_48_qs;
  logic gpio_in_1_gpio_in_48_re;
  logic gpio_in_1_gpio_in_49_qs;
  logic gpio_in_1_gpio_in_49_re;
  logic gpio_in_1_gpio_in_50_qs;
  logic gpio_in_1_gpio_in_50_re;
  logic gpio_in_1_gpio_in_51_qs;
  logic gpio_in_1_gpio_in_51_re;
  logic gpio_in_1_gpio_in_52_qs;
  logic gpio_in_1_gpio_in_52_re;
  logic gpio_in_1_gpio_in_53_qs;
  logic gpio_in_1_gpio_in_53_re;
  logic gpio_in_1_gpio_in_54_qs;
  logic gpio_in_1_gpio_in_54_re;
  logic gpio_in_1_gpio_in_55_qs;
  logic gpio_in_1_gpio_in_55_re;
  logic gpio_out_0_gpio_out_0_qs;
  logic gpio_out_0_gpio_out_0_wd;
  logic gpio_out_0_gpio_out_0_we;
  logic gpio_out_0_gpio_out_1_qs;
  logic gpio_out_0_gpio_out_1_wd;
  logic gpio_out_0_gpio_out_1_we;
  logic gpio_out_0_gpio_out_2_qs;
  logic gpio_out_0_gpio_out_2_wd;
  logic gpio_out_0_gpio_out_2_we;
  logic gpio_out_0_gpio_out_3_qs;
  logic gpio_out_0_gpio_out_3_wd;
  logic gpio_out_0_gpio_out_3_we;
  logic gpio_out_0_gpio_out_4_qs;
  logic gpio_out_0_gpio_out_4_wd;
  logic gpio_out_0_gpio_out_4_we;
  logic gpio_out_0_gpio_out_5_qs;
  logic gpio_out_0_gpio_out_5_wd;
  logic gpio_out_0_gpio_out_5_we;
  logic gpio_out_0_gpio_out_6_qs;
  logic gpio_out_0_gpio_out_6_wd;
  logic gpio_out_0_gpio_out_6_we;
  logic gpio_out_0_gpio_out_7_qs;
  logic gpio_out_0_gpio_out_7_wd;
  logic gpio_out_0_gpio_out_7_we;
  logic gpio_out_0_gpio_out_8_qs;
  logic gpio_out_0_gpio_out_8_wd;
  logic gpio_out_0_gpio_out_8_we;
  logic gpio_out_0_gpio_out_9_qs;
  logic gpio_out_0_gpio_out_9_wd;
  logic gpio_out_0_gpio_out_9_we;
  logic gpio_out_0_gpio_out_10_qs;
  logic gpio_out_0_gpio_out_10_wd;
  logic gpio_out_0_gpio_out_10_we;
  logic gpio_out_0_gpio_out_11_qs;
  logic gpio_out_0_gpio_out_11_wd;
  logic gpio_out_0_gpio_out_11_we;
  logic gpio_out_0_gpio_out_12_qs;
  logic gpio_out_0_gpio_out_12_wd;
  logic gpio_out_0_gpio_out_12_we;
  logic gpio_out_0_gpio_out_13_qs;
  logic gpio_out_0_gpio_out_13_wd;
  logic gpio_out_0_gpio_out_13_we;
  logic gpio_out_0_gpio_out_14_qs;
  logic gpio_out_0_gpio_out_14_wd;
  logic gpio_out_0_gpio_out_14_we;
  logic gpio_out_0_gpio_out_15_qs;
  logic gpio_out_0_gpio_out_15_wd;
  logic gpio_out_0_gpio_out_15_we;
  logic gpio_out_0_gpio_out_16_qs;
  logic gpio_out_0_gpio_out_16_wd;
  logic gpio_out_0_gpio_out_16_we;
  logic gpio_out_0_gpio_out_17_qs;
  logic gpio_out_0_gpio_out_17_wd;
  logic gpio_out_0_gpio_out_17_we;
  logic gpio_out_0_gpio_out_18_qs;
  logic gpio_out_0_gpio_out_18_wd;
  logic gpio_out_0_gpio_out_18_we;
  logic gpio_out_0_gpio_out_19_qs;
  logic gpio_out_0_gpio_out_19_wd;
  logic gpio_out_0_gpio_out_19_we;
  logic gpio_out_0_gpio_out_20_qs;
  logic gpio_out_0_gpio_out_20_wd;
  logic gpio_out_0_gpio_out_20_we;
  logic gpio_out_0_gpio_out_21_qs;
  logic gpio_out_0_gpio_out_21_wd;
  logic gpio_out_0_gpio_out_21_we;
  logic gpio_out_0_gpio_out_22_qs;
  logic gpio_out_0_gpio_out_22_wd;
  logic gpio_out_0_gpio_out_22_we;
  logic gpio_out_0_gpio_out_23_qs;
  logic gpio_out_0_gpio_out_23_wd;
  logic gpio_out_0_gpio_out_23_we;
  logic gpio_out_0_gpio_out_24_qs;
  logic gpio_out_0_gpio_out_24_wd;
  logic gpio_out_0_gpio_out_24_we;
  logic gpio_out_0_gpio_out_25_qs;
  logic gpio_out_0_gpio_out_25_wd;
  logic gpio_out_0_gpio_out_25_we;
  logic gpio_out_0_gpio_out_26_qs;
  logic gpio_out_0_gpio_out_26_wd;
  logic gpio_out_0_gpio_out_26_we;
  logic gpio_out_0_gpio_out_27_qs;
  logic gpio_out_0_gpio_out_27_wd;
  logic gpio_out_0_gpio_out_27_we;
  logic gpio_out_0_gpio_out_28_qs;
  logic gpio_out_0_gpio_out_28_wd;
  logic gpio_out_0_gpio_out_28_we;
  logic gpio_out_0_gpio_out_29_qs;
  logic gpio_out_0_gpio_out_29_wd;
  logic gpio_out_0_gpio_out_29_we;
  logic gpio_out_0_gpio_out_30_qs;
  logic gpio_out_0_gpio_out_30_wd;
  logic gpio_out_0_gpio_out_30_we;
  logic gpio_out_0_gpio_out_31_qs;
  logic gpio_out_0_gpio_out_31_wd;
  logic gpio_out_0_gpio_out_31_we;
  logic gpio_out_1_gpio_out_32_qs;
  logic gpio_out_1_gpio_out_32_wd;
  logic gpio_out_1_gpio_out_32_we;
  logic gpio_out_1_gpio_out_33_qs;
  logic gpio_out_1_gpio_out_33_wd;
  logic gpio_out_1_gpio_out_33_we;
  logic gpio_out_1_gpio_out_34_qs;
  logic gpio_out_1_gpio_out_34_wd;
  logic gpio_out_1_gpio_out_34_we;
  logic gpio_out_1_gpio_out_35_qs;
  logic gpio_out_1_gpio_out_35_wd;
  logic gpio_out_1_gpio_out_35_we;
  logic gpio_out_1_gpio_out_36_qs;
  logic gpio_out_1_gpio_out_36_wd;
  logic gpio_out_1_gpio_out_36_we;
  logic gpio_out_1_gpio_out_37_qs;
  logic gpio_out_1_gpio_out_37_wd;
  logic gpio_out_1_gpio_out_37_we;
  logic gpio_out_1_gpio_out_38_qs;
  logic gpio_out_1_gpio_out_38_wd;
  logic gpio_out_1_gpio_out_38_we;
  logic gpio_out_1_gpio_out_39_qs;
  logic gpio_out_1_gpio_out_39_wd;
  logic gpio_out_1_gpio_out_39_we;
  logic gpio_out_1_gpio_out_40_qs;
  logic gpio_out_1_gpio_out_40_wd;
  logic gpio_out_1_gpio_out_40_we;
  logic gpio_out_1_gpio_out_41_qs;
  logic gpio_out_1_gpio_out_41_wd;
  logic gpio_out_1_gpio_out_41_we;
  logic gpio_out_1_gpio_out_42_qs;
  logic gpio_out_1_gpio_out_42_wd;
  logic gpio_out_1_gpio_out_42_we;
  logic gpio_out_1_gpio_out_43_qs;
  logic gpio_out_1_gpio_out_43_wd;
  logic gpio_out_1_gpio_out_43_we;
  logic gpio_out_1_gpio_out_44_qs;
  logic gpio_out_1_gpio_out_44_wd;
  logic gpio_out_1_gpio_out_44_we;
  logic gpio_out_1_gpio_out_45_qs;
  logic gpio_out_1_gpio_out_45_wd;
  logic gpio_out_1_gpio_out_45_we;
  logic gpio_out_1_gpio_out_46_qs;
  logic gpio_out_1_gpio_out_46_wd;
  logic gpio_out_1_gpio_out_46_we;
  logic gpio_out_1_gpio_out_47_qs;
  logic gpio_out_1_gpio_out_47_wd;
  logic gpio_out_1_gpio_out_47_we;
  logic gpio_out_1_gpio_out_48_qs;
  logic gpio_out_1_gpio_out_48_wd;
  logic gpio_out_1_gpio_out_48_we;
  logic gpio_out_1_gpio_out_49_qs;
  logic gpio_out_1_gpio_out_49_wd;
  logic gpio_out_1_gpio_out_49_we;
  logic gpio_out_1_gpio_out_50_qs;
  logic gpio_out_1_gpio_out_50_wd;
  logic gpio_out_1_gpio_out_50_we;
  logic gpio_out_1_gpio_out_51_qs;
  logic gpio_out_1_gpio_out_51_wd;
  logic gpio_out_1_gpio_out_51_we;
  logic gpio_out_1_gpio_out_52_qs;
  logic gpio_out_1_gpio_out_52_wd;
  logic gpio_out_1_gpio_out_52_we;
  logic gpio_out_1_gpio_out_53_qs;
  logic gpio_out_1_gpio_out_53_wd;
  logic gpio_out_1_gpio_out_53_we;
  logic gpio_out_1_gpio_out_54_qs;
  logic gpio_out_1_gpio_out_54_wd;
  logic gpio_out_1_gpio_out_54_we;
  logic gpio_out_1_gpio_out_55_qs;
  logic gpio_out_1_gpio_out_55_wd;
  logic gpio_out_1_gpio_out_55_we;
  logic gpio_set_0_gpio_set_0_wd;
  logic gpio_set_0_gpio_set_0_we;
  logic gpio_set_0_gpio_set_1_wd;
  logic gpio_set_0_gpio_set_1_we;
  logic gpio_set_0_gpio_set_2_wd;
  logic gpio_set_0_gpio_set_2_we;
  logic gpio_set_0_gpio_set_3_wd;
  logic gpio_set_0_gpio_set_3_we;
  logic gpio_set_0_gpio_set_4_wd;
  logic gpio_set_0_gpio_set_4_we;
  logic gpio_set_0_gpio_set_5_wd;
  logic gpio_set_0_gpio_set_5_we;
  logic gpio_set_0_gpio_set_6_wd;
  logic gpio_set_0_gpio_set_6_we;
  logic gpio_set_0_gpio_set_7_wd;
  logic gpio_set_0_gpio_set_7_we;
  logic gpio_set_0_gpio_set_8_wd;
  logic gpio_set_0_gpio_set_8_we;
  logic gpio_set_0_gpio_set_9_wd;
  logic gpio_set_0_gpio_set_9_we;
  logic gpio_set_0_gpio_set_10_wd;
  logic gpio_set_0_gpio_set_10_we;
  logic gpio_set_0_gpio_set_11_wd;
  logic gpio_set_0_gpio_set_11_we;
  logic gpio_set_0_gpio_set_12_wd;
  logic gpio_set_0_gpio_set_12_we;
  logic gpio_set_0_gpio_set_13_wd;
  logic gpio_set_0_gpio_set_13_we;
  logic gpio_set_0_gpio_set_14_wd;
  logic gpio_set_0_gpio_set_14_we;
  logic gpio_set_0_gpio_set_15_wd;
  logic gpio_set_0_gpio_set_15_we;
  logic gpio_set_0_gpio_set_16_wd;
  logic gpio_set_0_gpio_set_16_we;
  logic gpio_set_0_gpio_set_17_wd;
  logic gpio_set_0_gpio_set_17_we;
  logic gpio_set_0_gpio_set_18_wd;
  logic gpio_set_0_gpio_set_18_we;
  logic gpio_set_0_gpio_set_19_wd;
  logic gpio_set_0_gpio_set_19_we;
  logic gpio_set_0_gpio_set_20_wd;
  logic gpio_set_0_gpio_set_20_we;
  logic gpio_set_0_gpio_set_21_wd;
  logic gpio_set_0_gpio_set_21_we;
  logic gpio_set_0_gpio_set_22_wd;
  logic gpio_set_0_gpio_set_22_we;
  logic gpio_set_0_gpio_set_23_wd;
  logic gpio_set_0_gpio_set_23_we;
  logic gpio_set_0_gpio_set_24_wd;
  logic gpio_set_0_gpio_set_24_we;
  logic gpio_set_0_gpio_set_25_wd;
  logic gpio_set_0_gpio_set_25_we;
  logic gpio_set_0_gpio_set_26_wd;
  logic gpio_set_0_gpio_set_26_we;
  logic gpio_set_0_gpio_set_27_wd;
  logic gpio_set_0_gpio_set_27_we;
  logic gpio_set_0_gpio_set_28_wd;
  logic gpio_set_0_gpio_set_28_we;
  logic gpio_set_0_gpio_set_29_wd;
  logic gpio_set_0_gpio_set_29_we;
  logic gpio_set_0_gpio_set_30_wd;
  logic gpio_set_0_gpio_set_30_we;
  logic gpio_set_0_gpio_set_31_wd;
  logic gpio_set_0_gpio_set_31_we;
  logic gpio_set_1_gpio_set_32_wd;
  logic gpio_set_1_gpio_set_32_we;
  logic gpio_set_1_gpio_set_33_wd;
  logic gpio_set_1_gpio_set_33_we;
  logic gpio_set_1_gpio_set_34_wd;
  logic gpio_set_1_gpio_set_34_we;
  logic gpio_set_1_gpio_set_35_wd;
  logic gpio_set_1_gpio_set_35_we;
  logic gpio_set_1_gpio_set_36_wd;
  logic gpio_set_1_gpio_set_36_we;
  logic gpio_set_1_gpio_set_37_wd;
  logic gpio_set_1_gpio_set_37_we;
  logic gpio_set_1_gpio_set_38_wd;
  logic gpio_set_1_gpio_set_38_we;
  logic gpio_set_1_gpio_set_39_wd;
  logic gpio_set_1_gpio_set_39_we;
  logic gpio_set_1_gpio_set_40_wd;
  logic gpio_set_1_gpio_set_40_we;
  logic gpio_set_1_gpio_set_41_wd;
  logic gpio_set_1_gpio_set_41_we;
  logic gpio_set_1_gpio_set_42_wd;
  logic gpio_set_1_gpio_set_42_we;
  logic gpio_set_1_gpio_set_43_wd;
  logic gpio_set_1_gpio_set_43_we;
  logic gpio_set_1_gpio_set_44_wd;
  logic gpio_set_1_gpio_set_44_we;
  logic gpio_set_1_gpio_set_45_wd;
  logic gpio_set_1_gpio_set_45_we;
  logic gpio_set_1_gpio_set_46_wd;
  logic gpio_set_1_gpio_set_46_we;
  logic gpio_set_1_gpio_set_47_wd;
  logic gpio_set_1_gpio_set_47_we;
  logic gpio_set_1_gpio_set_48_wd;
  logic gpio_set_1_gpio_set_48_we;
  logic gpio_set_1_gpio_set_49_wd;
  logic gpio_set_1_gpio_set_49_we;
  logic gpio_set_1_gpio_set_50_wd;
  logic gpio_set_1_gpio_set_50_we;
  logic gpio_set_1_gpio_set_51_wd;
  logic gpio_set_1_gpio_set_51_we;
  logic gpio_set_1_gpio_set_52_wd;
  logic gpio_set_1_gpio_set_52_we;
  logic gpio_set_1_gpio_set_53_wd;
  logic gpio_set_1_gpio_set_53_we;
  logic gpio_set_1_gpio_set_54_wd;
  logic gpio_set_1_gpio_set_54_we;
  logic gpio_set_1_gpio_set_55_wd;
  logic gpio_set_1_gpio_set_55_we;
  logic gpio_clear_0_gpio_clear_0_wd;
  logic gpio_clear_0_gpio_clear_0_we;
  logic gpio_clear_0_gpio_clear_1_wd;
  logic gpio_clear_0_gpio_clear_1_we;
  logic gpio_clear_0_gpio_clear_2_wd;
  logic gpio_clear_0_gpio_clear_2_we;
  logic gpio_clear_0_gpio_clear_3_wd;
  logic gpio_clear_0_gpio_clear_3_we;
  logic gpio_clear_0_gpio_clear_4_wd;
  logic gpio_clear_0_gpio_clear_4_we;
  logic gpio_clear_0_gpio_clear_5_wd;
  logic gpio_clear_0_gpio_clear_5_we;
  logic gpio_clear_0_gpio_clear_6_wd;
  logic gpio_clear_0_gpio_clear_6_we;
  logic gpio_clear_0_gpio_clear_7_wd;
  logic gpio_clear_0_gpio_clear_7_we;
  logic gpio_clear_0_gpio_clear_8_wd;
  logic gpio_clear_0_gpio_clear_8_we;
  logic gpio_clear_0_gpio_clear_9_wd;
  logic gpio_clear_0_gpio_clear_9_we;
  logic gpio_clear_0_gpio_clear_10_wd;
  logic gpio_clear_0_gpio_clear_10_we;
  logic gpio_clear_0_gpio_clear_11_wd;
  logic gpio_clear_0_gpio_clear_11_we;
  logic gpio_clear_0_gpio_clear_12_wd;
  logic gpio_clear_0_gpio_clear_12_we;
  logic gpio_clear_0_gpio_clear_13_wd;
  logic gpio_clear_0_gpio_clear_13_we;
  logic gpio_clear_0_gpio_clear_14_wd;
  logic gpio_clear_0_gpio_clear_14_we;
  logic gpio_clear_0_gpio_clear_15_wd;
  logic gpio_clear_0_gpio_clear_15_we;
  logic gpio_clear_0_gpio_clear_16_wd;
  logic gpio_clear_0_gpio_clear_16_we;
  logic gpio_clear_0_gpio_clear_17_wd;
  logic gpio_clear_0_gpio_clear_17_we;
  logic gpio_clear_0_gpio_clear_18_wd;
  logic gpio_clear_0_gpio_clear_18_we;
  logic gpio_clear_0_gpio_clear_19_wd;
  logic gpio_clear_0_gpio_clear_19_we;
  logic gpio_clear_0_gpio_clear_20_wd;
  logic gpio_clear_0_gpio_clear_20_we;
  logic gpio_clear_0_gpio_clear_21_wd;
  logic gpio_clear_0_gpio_clear_21_we;
  logic gpio_clear_0_gpio_clear_22_wd;
  logic gpio_clear_0_gpio_clear_22_we;
  logic gpio_clear_0_gpio_clear_23_wd;
  logic gpio_clear_0_gpio_clear_23_we;
  logic gpio_clear_0_gpio_clear_24_wd;
  logic gpio_clear_0_gpio_clear_24_we;
  logic gpio_clear_0_gpio_clear_25_wd;
  logic gpio_clear_0_gpio_clear_25_we;
  logic gpio_clear_0_gpio_clear_26_wd;
  logic gpio_clear_0_gpio_clear_26_we;
  logic gpio_clear_0_gpio_clear_27_wd;
  logic gpio_clear_0_gpio_clear_27_we;
  logic gpio_clear_0_gpio_clear_28_wd;
  logic gpio_clear_0_gpio_clear_28_we;
  logic gpio_clear_0_gpio_clear_29_wd;
  logic gpio_clear_0_gpio_clear_29_we;
  logic gpio_clear_0_gpio_clear_30_wd;
  logic gpio_clear_0_gpio_clear_30_we;
  logic gpio_clear_0_gpio_clear_31_wd;
  logic gpio_clear_0_gpio_clear_31_we;
  logic gpio_clear_1_gpio_clear_32_wd;
  logic gpio_clear_1_gpio_clear_32_we;
  logic gpio_clear_1_gpio_clear_33_wd;
  logic gpio_clear_1_gpio_clear_33_we;
  logic gpio_clear_1_gpio_clear_34_wd;
  logic gpio_clear_1_gpio_clear_34_we;
  logic gpio_clear_1_gpio_clear_35_wd;
  logic gpio_clear_1_gpio_clear_35_we;
  logic gpio_clear_1_gpio_clear_36_wd;
  logic gpio_clear_1_gpio_clear_36_we;
  logic gpio_clear_1_gpio_clear_37_wd;
  logic gpio_clear_1_gpio_clear_37_we;
  logic gpio_clear_1_gpio_clear_38_wd;
  logic gpio_clear_1_gpio_clear_38_we;
  logic gpio_clear_1_gpio_clear_39_wd;
  logic gpio_clear_1_gpio_clear_39_we;
  logic gpio_clear_1_gpio_clear_40_wd;
  logic gpio_clear_1_gpio_clear_40_we;
  logic gpio_clear_1_gpio_clear_41_wd;
  logic gpio_clear_1_gpio_clear_41_we;
  logic gpio_clear_1_gpio_clear_42_wd;
  logic gpio_clear_1_gpio_clear_42_we;
  logic gpio_clear_1_gpio_clear_43_wd;
  logic gpio_clear_1_gpio_clear_43_we;
  logic gpio_clear_1_gpio_clear_44_wd;
  logic gpio_clear_1_gpio_clear_44_we;
  logic gpio_clear_1_gpio_clear_45_wd;
  logic gpio_clear_1_gpio_clear_45_we;
  logic gpio_clear_1_gpio_clear_46_wd;
  logic gpio_clear_1_gpio_clear_46_we;
  logic gpio_clear_1_gpio_clear_47_wd;
  logic gpio_clear_1_gpio_clear_47_we;
  logic gpio_clear_1_gpio_clear_48_wd;
  logic gpio_clear_1_gpio_clear_48_we;
  logic gpio_clear_1_gpio_clear_49_wd;
  logic gpio_clear_1_gpio_clear_49_we;
  logic gpio_clear_1_gpio_clear_50_wd;
  logic gpio_clear_1_gpio_clear_50_we;
  logic gpio_clear_1_gpio_clear_51_wd;
  logic gpio_clear_1_gpio_clear_51_we;
  logic gpio_clear_1_gpio_clear_52_wd;
  logic gpio_clear_1_gpio_clear_52_we;
  logic gpio_clear_1_gpio_clear_53_wd;
  logic gpio_clear_1_gpio_clear_53_we;
  logic gpio_clear_1_gpio_clear_54_wd;
  logic gpio_clear_1_gpio_clear_54_we;
  logic gpio_clear_1_gpio_clear_55_wd;
  logic gpio_clear_1_gpio_clear_55_we;
  logic gpio_toggle_0_gpio_toggle_0_wd;
  logic gpio_toggle_0_gpio_toggle_0_we;
  logic gpio_toggle_0_gpio_toggle_1_wd;
  logic gpio_toggle_0_gpio_toggle_1_we;
  logic gpio_toggle_0_gpio_toggle_2_wd;
  logic gpio_toggle_0_gpio_toggle_2_we;
  logic gpio_toggle_0_gpio_toggle_3_wd;
  logic gpio_toggle_0_gpio_toggle_3_we;
  logic gpio_toggle_0_gpio_toggle_4_wd;
  logic gpio_toggle_0_gpio_toggle_4_we;
  logic gpio_toggle_0_gpio_toggle_5_wd;
  logic gpio_toggle_0_gpio_toggle_5_we;
  logic gpio_toggle_0_gpio_toggle_6_wd;
  logic gpio_toggle_0_gpio_toggle_6_we;
  logic gpio_toggle_0_gpio_toggle_7_wd;
  logic gpio_toggle_0_gpio_toggle_7_we;
  logic gpio_toggle_0_gpio_toggle_8_wd;
  logic gpio_toggle_0_gpio_toggle_8_we;
  logic gpio_toggle_0_gpio_toggle_9_wd;
  logic gpio_toggle_0_gpio_toggle_9_we;
  logic gpio_toggle_0_gpio_toggle_10_wd;
  logic gpio_toggle_0_gpio_toggle_10_we;
  logic gpio_toggle_0_gpio_toggle_11_wd;
  logic gpio_toggle_0_gpio_toggle_11_we;
  logic gpio_toggle_0_gpio_toggle_12_wd;
  logic gpio_toggle_0_gpio_toggle_12_we;
  logic gpio_toggle_0_gpio_toggle_13_wd;
  logic gpio_toggle_0_gpio_toggle_13_we;
  logic gpio_toggle_0_gpio_toggle_14_wd;
  logic gpio_toggle_0_gpio_toggle_14_we;
  logic gpio_toggle_0_gpio_toggle_15_wd;
  logic gpio_toggle_0_gpio_toggle_15_we;
  logic gpio_toggle_0_gpio_toggle_16_wd;
  logic gpio_toggle_0_gpio_toggle_16_we;
  logic gpio_toggle_0_gpio_toggle_17_wd;
  logic gpio_toggle_0_gpio_toggle_17_we;
  logic gpio_toggle_0_gpio_toggle_18_wd;
  logic gpio_toggle_0_gpio_toggle_18_we;
  logic gpio_toggle_0_gpio_toggle_19_wd;
  logic gpio_toggle_0_gpio_toggle_19_we;
  logic gpio_toggle_0_gpio_toggle_20_wd;
  logic gpio_toggle_0_gpio_toggle_20_we;
  logic gpio_toggle_0_gpio_toggle_21_wd;
  logic gpio_toggle_0_gpio_toggle_21_we;
  logic gpio_toggle_0_gpio_toggle_22_wd;
  logic gpio_toggle_0_gpio_toggle_22_we;
  logic gpio_toggle_0_gpio_toggle_23_wd;
  logic gpio_toggle_0_gpio_toggle_23_we;
  logic gpio_toggle_0_gpio_toggle_24_wd;
  logic gpio_toggle_0_gpio_toggle_24_we;
  logic gpio_toggle_0_gpio_toggle_25_wd;
  logic gpio_toggle_0_gpio_toggle_25_we;
  logic gpio_toggle_0_gpio_toggle_26_wd;
  logic gpio_toggle_0_gpio_toggle_26_we;
  logic gpio_toggle_0_gpio_toggle_27_wd;
  logic gpio_toggle_0_gpio_toggle_27_we;
  logic gpio_toggle_0_gpio_toggle_28_wd;
  logic gpio_toggle_0_gpio_toggle_28_we;
  logic gpio_toggle_0_gpio_toggle_29_wd;
  logic gpio_toggle_0_gpio_toggle_29_we;
  logic gpio_toggle_0_gpio_toggle_30_wd;
  logic gpio_toggle_0_gpio_toggle_30_we;
  logic gpio_toggle_0_gpio_toggle_31_wd;
  logic gpio_toggle_0_gpio_toggle_31_we;
  logic gpio_toggle_1_gpio_toggle_32_wd;
  logic gpio_toggle_1_gpio_toggle_32_we;
  logic gpio_toggle_1_gpio_toggle_33_wd;
  logic gpio_toggle_1_gpio_toggle_33_we;
  logic gpio_toggle_1_gpio_toggle_34_wd;
  logic gpio_toggle_1_gpio_toggle_34_we;
  logic gpio_toggle_1_gpio_toggle_35_wd;
  logic gpio_toggle_1_gpio_toggle_35_we;
  logic gpio_toggle_1_gpio_toggle_36_wd;
  logic gpio_toggle_1_gpio_toggle_36_we;
  logic gpio_toggle_1_gpio_toggle_37_wd;
  logic gpio_toggle_1_gpio_toggle_37_we;
  logic gpio_toggle_1_gpio_toggle_38_wd;
  logic gpio_toggle_1_gpio_toggle_38_we;
  logic gpio_toggle_1_gpio_toggle_39_wd;
  logic gpio_toggle_1_gpio_toggle_39_we;
  logic gpio_toggle_1_gpio_toggle_40_wd;
  logic gpio_toggle_1_gpio_toggle_40_we;
  logic gpio_toggle_1_gpio_toggle_41_wd;
  logic gpio_toggle_1_gpio_toggle_41_we;
  logic gpio_toggle_1_gpio_toggle_42_wd;
  logic gpio_toggle_1_gpio_toggle_42_we;
  logic gpio_toggle_1_gpio_toggle_43_wd;
  logic gpio_toggle_1_gpio_toggle_43_we;
  logic gpio_toggle_1_gpio_toggle_44_wd;
  logic gpio_toggle_1_gpio_toggle_44_we;
  logic gpio_toggle_1_gpio_toggle_45_wd;
  logic gpio_toggle_1_gpio_toggle_45_we;
  logic gpio_toggle_1_gpio_toggle_46_wd;
  logic gpio_toggle_1_gpio_toggle_46_we;
  logic gpio_toggle_1_gpio_toggle_47_wd;
  logic gpio_toggle_1_gpio_toggle_47_we;
  logic gpio_toggle_1_gpio_toggle_48_wd;
  logic gpio_toggle_1_gpio_toggle_48_we;
  logic gpio_toggle_1_gpio_toggle_49_wd;
  logic gpio_toggle_1_gpio_toggle_49_we;
  logic gpio_toggle_1_gpio_toggle_50_wd;
  logic gpio_toggle_1_gpio_toggle_50_we;
  logic gpio_toggle_1_gpio_toggle_51_wd;
  logic gpio_toggle_1_gpio_toggle_51_we;
  logic gpio_toggle_1_gpio_toggle_52_wd;
  logic gpio_toggle_1_gpio_toggle_52_we;
  logic gpio_toggle_1_gpio_toggle_53_wd;
  logic gpio_toggle_1_gpio_toggle_53_we;
  logic gpio_toggle_1_gpio_toggle_54_wd;
  logic gpio_toggle_1_gpio_toggle_54_we;
  logic gpio_toggle_1_gpio_toggle_55_wd;
  logic gpio_toggle_1_gpio_toggle_55_we;
  logic intrpt_rise_en_0_intrpt_rise_en_0_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_0_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_0_we;
  logic intrpt_rise_en_0_intrpt_rise_en_1_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_1_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_1_we;
  logic intrpt_rise_en_0_intrpt_rise_en_2_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_2_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_2_we;
  logic intrpt_rise_en_0_intrpt_rise_en_3_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_3_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_3_we;
  logic intrpt_rise_en_0_intrpt_rise_en_4_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_4_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_4_we;
  logic intrpt_rise_en_0_intrpt_rise_en_5_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_5_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_5_we;
  logic intrpt_rise_en_0_intrpt_rise_en_6_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_6_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_6_we;
  logic intrpt_rise_en_0_intrpt_rise_en_7_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_7_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_7_we;
  logic intrpt_rise_en_0_intrpt_rise_en_8_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_8_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_8_we;
  logic intrpt_rise_en_0_intrpt_rise_en_9_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_9_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_9_we;
  logic intrpt_rise_en_0_intrpt_rise_en_10_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_10_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_10_we;
  logic intrpt_rise_en_0_intrpt_rise_en_11_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_11_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_11_we;
  logic intrpt_rise_en_0_intrpt_rise_en_12_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_12_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_12_we;
  logic intrpt_rise_en_0_intrpt_rise_en_13_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_13_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_13_we;
  logic intrpt_rise_en_0_intrpt_rise_en_14_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_14_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_14_we;
  logic intrpt_rise_en_0_intrpt_rise_en_15_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_15_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_15_we;
  logic intrpt_rise_en_0_intrpt_rise_en_16_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_16_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_16_we;
  logic intrpt_rise_en_0_intrpt_rise_en_17_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_17_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_17_we;
  logic intrpt_rise_en_0_intrpt_rise_en_18_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_18_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_18_we;
  logic intrpt_rise_en_0_intrpt_rise_en_19_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_19_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_19_we;
  logic intrpt_rise_en_0_intrpt_rise_en_20_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_20_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_20_we;
  logic intrpt_rise_en_0_intrpt_rise_en_21_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_21_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_21_we;
  logic intrpt_rise_en_0_intrpt_rise_en_22_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_22_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_22_we;
  logic intrpt_rise_en_0_intrpt_rise_en_23_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_23_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_23_we;
  logic intrpt_rise_en_0_intrpt_rise_en_24_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_24_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_24_we;
  logic intrpt_rise_en_0_intrpt_rise_en_25_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_25_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_25_we;
  logic intrpt_rise_en_0_intrpt_rise_en_26_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_26_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_26_we;
  logic intrpt_rise_en_0_intrpt_rise_en_27_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_27_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_27_we;
  logic intrpt_rise_en_0_intrpt_rise_en_28_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_28_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_28_we;
  logic intrpt_rise_en_0_intrpt_rise_en_29_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_29_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_29_we;
  logic intrpt_rise_en_0_intrpt_rise_en_30_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_30_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_30_we;
  logic intrpt_rise_en_0_intrpt_rise_en_31_qs;
  logic intrpt_rise_en_0_intrpt_rise_en_31_wd;
  logic intrpt_rise_en_0_intrpt_rise_en_31_we;
  logic intrpt_rise_en_1_intrpt_rise_en_32_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_32_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_32_we;
  logic intrpt_rise_en_1_intrpt_rise_en_33_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_33_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_33_we;
  logic intrpt_rise_en_1_intrpt_rise_en_34_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_34_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_34_we;
  logic intrpt_rise_en_1_intrpt_rise_en_35_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_35_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_35_we;
  logic intrpt_rise_en_1_intrpt_rise_en_36_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_36_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_36_we;
  logic intrpt_rise_en_1_intrpt_rise_en_37_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_37_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_37_we;
  logic intrpt_rise_en_1_intrpt_rise_en_38_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_38_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_38_we;
  logic intrpt_rise_en_1_intrpt_rise_en_39_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_39_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_39_we;
  logic intrpt_rise_en_1_intrpt_rise_en_40_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_40_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_40_we;
  logic intrpt_rise_en_1_intrpt_rise_en_41_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_41_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_41_we;
  logic intrpt_rise_en_1_intrpt_rise_en_42_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_42_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_42_we;
  logic intrpt_rise_en_1_intrpt_rise_en_43_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_43_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_43_we;
  logic intrpt_rise_en_1_intrpt_rise_en_44_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_44_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_44_we;
  logic intrpt_rise_en_1_intrpt_rise_en_45_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_45_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_45_we;
  logic intrpt_rise_en_1_intrpt_rise_en_46_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_46_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_46_we;
  logic intrpt_rise_en_1_intrpt_rise_en_47_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_47_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_47_we;
  logic intrpt_rise_en_1_intrpt_rise_en_48_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_48_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_48_we;
  logic intrpt_rise_en_1_intrpt_rise_en_49_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_49_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_49_we;
  logic intrpt_rise_en_1_intrpt_rise_en_50_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_50_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_50_we;
  logic intrpt_rise_en_1_intrpt_rise_en_51_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_51_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_51_we;
  logic intrpt_rise_en_1_intrpt_rise_en_52_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_52_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_52_we;
  logic intrpt_rise_en_1_intrpt_rise_en_53_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_53_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_53_we;
  logic intrpt_rise_en_1_intrpt_rise_en_54_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_54_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_54_we;
  logic intrpt_rise_en_1_intrpt_rise_en_55_qs;
  logic intrpt_rise_en_1_intrpt_rise_en_55_wd;
  logic intrpt_rise_en_1_intrpt_rise_en_55_we;
  logic intrpt_fall_en_0_intrpt_fall_en_0_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_0_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_0_we;
  logic intrpt_fall_en_0_intrpt_fall_en_1_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_1_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_1_we;
  logic intrpt_fall_en_0_intrpt_fall_en_2_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_2_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_2_we;
  logic intrpt_fall_en_0_intrpt_fall_en_3_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_3_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_3_we;
  logic intrpt_fall_en_0_intrpt_fall_en_4_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_4_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_4_we;
  logic intrpt_fall_en_0_intrpt_fall_en_5_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_5_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_5_we;
  logic intrpt_fall_en_0_intrpt_fall_en_6_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_6_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_6_we;
  logic intrpt_fall_en_0_intrpt_fall_en_7_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_7_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_7_we;
  logic intrpt_fall_en_0_intrpt_fall_en_8_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_8_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_8_we;
  logic intrpt_fall_en_0_intrpt_fall_en_9_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_9_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_9_we;
  logic intrpt_fall_en_0_intrpt_fall_en_10_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_10_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_10_we;
  logic intrpt_fall_en_0_intrpt_fall_en_11_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_11_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_11_we;
  logic intrpt_fall_en_0_intrpt_fall_en_12_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_12_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_12_we;
  logic intrpt_fall_en_0_intrpt_fall_en_13_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_13_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_13_we;
  logic intrpt_fall_en_0_intrpt_fall_en_14_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_14_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_14_we;
  logic intrpt_fall_en_0_intrpt_fall_en_15_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_15_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_15_we;
  logic intrpt_fall_en_0_intrpt_fall_en_16_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_16_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_16_we;
  logic intrpt_fall_en_0_intrpt_fall_en_17_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_17_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_17_we;
  logic intrpt_fall_en_0_intrpt_fall_en_18_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_18_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_18_we;
  logic intrpt_fall_en_0_intrpt_fall_en_19_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_19_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_19_we;
  logic intrpt_fall_en_0_intrpt_fall_en_20_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_20_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_20_we;
  logic intrpt_fall_en_0_intrpt_fall_en_21_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_21_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_21_we;
  logic intrpt_fall_en_0_intrpt_fall_en_22_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_22_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_22_we;
  logic intrpt_fall_en_0_intrpt_fall_en_23_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_23_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_23_we;
  logic intrpt_fall_en_0_intrpt_fall_en_24_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_24_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_24_we;
  logic intrpt_fall_en_0_intrpt_fall_en_25_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_25_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_25_we;
  logic intrpt_fall_en_0_intrpt_fall_en_26_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_26_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_26_we;
  logic intrpt_fall_en_0_intrpt_fall_en_27_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_27_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_27_we;
  logic intrpt_fall_en_0_intrpt_fall_en_28_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_28_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_28_we;
  logic intrpt_fall_en_0_intrpt_fall_en_29_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_29_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_29_we;
  logic intrpt_fall_en_0_intrpt_fall_en_30_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_30_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_30_we;
  logic intrpt_fall_en_0_intrpt_fall_en_31_qs;
  logic intrpt_fall_en_0_intrpt_fall_en_31_wd;
  logic intrpt_fall_en_0_intrpt_fall_en_31_we;
  logic intrpt_fall_en_1_intrpt_fall_en_32_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_32_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_32_we;
  logic intrpt_fall_en_1_intrpt_fall_en_33_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_33_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_33_we;
  logic intrpt_fall_en_1_intrpt_fall_en_34_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_34_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_34_we;
  logic intrpt_fall_en_1_intrpt_fall_en_35_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_35_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_35_we;
  logic intrpt_fall_en_1_intrpt_fall_en_36_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_36_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_36_we;
  logic intrpt_fall_en_1_intrpt_fall_en_37_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_37_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_37_we;
  logic intrpt_fall_en_1_intrpt_fall_en_38_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_38_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_38_we;
  logic intrpt_fall_en_1_intrpt_fall_en_39_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_39_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_39_we;
  logic intrpt_fall_en_1_intrpt_fall_en_40_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_40_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_40_we;
  logic intrpt_fall_en_1_intrpt_fall_en_41_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_41_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_41_we;
  logic intrpt_fall_en_1_intrpt_fall_en_42_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_42_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_42_we;
  logic intrpt_fall_en_1_intrpt_fall_en_43_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_43_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_43_we;
  logic intrpt_fall_en_1_intrpt_fall_en_44_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_44_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_44_we;
  logic intrpt_fall_en_1_intrpt_fall_en_45_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_45_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_45_we;
  logic intrpt_fall_en_1_intrpt_fall_en_46_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_46_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_46_we;
  logic intrpt_fall_en_1_intrpt_fall_en_47_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_47_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_47_we;
  logic intrpt_fall_en_1_intrpt_fall_en_48_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_48_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_48_we;
  logic intrpt_fall_en_1_intrpt_fall_en_49_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_49_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_49_we;
  logic intrpt_fall_en_1_intrpt_fall_en_50_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_50_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_50_we;
  logic intrpt_fall_en_1_intrpt_fall_en_51_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_51_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_51_we;
  logic intrpt_fall_en_1_intrpt_fall_en_52_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_52_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_52_we;
  logic intrpt_fall_en_1_intrpt_fall_en_53_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_53_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_53_we;
  logic intrpt_fall_en_1_intrpt_fall_en_54_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_54_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_54_we;
  logic intrpt_fall_en_1_intrpt_fall_en_55_qs;
  logic intrpt_fall_en_1_intrpt_fall_en_55_wd;
  logic intrpt_fall_en_1_intrpt_fall_en_55_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_0_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_0_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_0_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_1_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_1_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_1_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_2_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_2_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_2_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_3_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_3_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_3_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_4_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_4_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_4_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_5_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_5_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_5_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_6_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_6_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_6_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_7_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_7_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_7_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_8_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_8_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_8_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_9_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_9_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_9_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_10_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_10_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_10_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_11_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_11_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_11_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_12_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_12_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_12_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_13_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_13_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_13_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_14_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_14_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_14_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_15_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_15_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_15_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_16_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_16_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_16_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_17_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_17_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_17_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_18_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_18_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_18_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_19_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_19_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_19_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_20_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_20_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_20_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_21_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_21_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_21_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_22_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_22_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_22_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_23_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_23_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_23_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_24_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_24_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_24_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_25_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_25_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_25_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_26_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_26_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_26_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_27_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_27_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_27_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_28_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_28_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_28_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_29_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_29_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_29_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_30_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_30_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_30_we;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_31_qs;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_31_wd;
  logic intrpt_lvl_high_en_0_intrpt_lvl_high_en_31_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_32_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_32_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_32_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_33_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_33_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_33_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_34_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_34_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_34_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_35_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_35_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_35_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_36_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_36_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_36_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_37_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_37_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_37_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_38_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_38_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_38_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_39_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_39_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_39_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_40_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_40_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_40_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_41_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_41_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_41_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_42_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_42_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_42_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_43_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_43_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_43_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_44_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_44_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_44_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_45_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_45_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_45_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_46_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_46_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_46_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_47_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_47_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_47_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_48_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_48_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_48_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_49_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_49_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_49_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_50_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_50_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_50_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_51_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_51_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_51_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_52_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_52_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_52_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_53_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_53_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_53_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_54_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_54_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_54_we;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_55_qs;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_55_wd;
  logic intrpt_lvl_high_en_1_intrpt_lvl_high_en_55_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_0_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_0_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_0_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_1_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_1_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_1_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_2_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_2_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_2_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_3_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_3_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_3_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_4_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_4_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_4_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_5_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_5_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_5_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_6_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_6_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_6_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_7_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_7_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_7_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_8_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_8_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_8_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_9_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_9_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_9_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_10_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_10_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_10_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_11_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_11_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_11_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_12_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_12_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_12_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_13_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_13_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_13_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_14_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_14_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_14_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_15_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_15_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_15_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_16_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_16_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_16_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_17_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_17_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_17_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_18_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_18_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_18_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_19_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_19_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_19_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_20_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_20_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_20_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_21_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_21_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_21_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_22_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_22_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_22_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_23_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_23_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_23_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_24_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_24_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_24_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_25_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_25_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_25_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_26_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_26_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_26_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_27_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_27_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_27_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_28_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_28_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_28_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_29_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_29_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_29_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_30_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_30_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_30_we;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_31_qs;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_31_wd;
  logic intrpt_lvl_low_en_0_intrpt_lvl_low_en_31_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_32_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_32_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_32_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_33_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_33_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_33_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_34_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_34_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_34_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_35_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_35_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_35_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_36_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_36_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_36_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_37_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_37_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_37_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_38_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_38_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_38_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_39_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_39_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_39_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_40_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_40_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_40_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_41_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_41_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_41_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_42_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_42_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_42_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_43_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_43_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_43_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_44_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_44_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_44_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_45_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_45_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_45_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_46_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_46_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_46_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_47_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_47_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_47_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_48_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_48_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_48_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_49_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_49_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_49_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_50_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_50_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_50_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_51_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_51_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_51_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_52_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_52_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_52_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_53_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_53_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_53_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_54_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_54_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_54_we;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_55_qs;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_55_wd;
  logic intrpt_lvl_low_en_1_intrpt_lvl_low_en_55_we;
  logic intrpt_status_0_intrpt_status_0_qs;
  logic intrpt_status_0_intrpt_status_0_wd;
  logic intrpt_status_0_intrpt_status_0_we;
  logic intrpt_status_0_intrpt_status_0_re;
  logic intrpt_status_0_intrpt_status_1_qs;
  logic intrpt_status_0_intrpt_status_1_wd;
  logic intrpt_status_0_intrpt_status_1_we;
  logic intrpt_status_0_intrpt_status_1_re;
  logic intrpt_status_0_intrpt_status_2_qs;
  logic intrpt_status_0_intrpt_status_2_wd;
  logic intrpt_status_0_intrpt_status_2_we;
  logic intrpt_status_0_intrpt_status_2_re;
  logic intrpt_status_0_intrpt_status_3_qs;
  logic intrpt_status_0_intrpt_status_3_wd;
  logic intrpt_status_0_intrpt_status_3_we;
  logic intrpt_status_0_intrpt_status_3_re;
  logic intrpt_status_0_intrpt_status_4_qs;
  logic intrpt_status_0_intrpt_status_4_wd;
  logic intrpt_status_0_intrpt_status_4_we;
  logic intrpt_status_0_intrpt_status_4_re;
  logic intrpt_status_0_intrpt_status_5_qs;
  logic intrpt_status_0_intrpt_status_5_wd;
  logic intrpt_status_0_intrpt_status_5_we;
  logic intrpt_status_0_intrpt_status_5_re;
  logic intrpt_status_0_intrpt_status_6_qs;
  logic intrpt_status_0_intrpt_status_6_wd;
  logic intrpt_status_0_intrpt_status_6_we;
  logic intrpt_status_0_intrpt_status_6_re;
  logic intrpt_status_0_intrpt_status_7_qs;
  logic intrpt_status_0_intrpt_status_7_wd;
  logic intrpt_status_0_intrpt_status_7_we;
  logic intrpt_status_0_intrpt_status_7_re;
  logic intrpt_status_0_intrpt_status_8_qs;
  logic intrpt_status_0_intrpt_status_8_wd;
  logic intrpt_status_0_intrpt_status_8_we;
  logic intrpt_status_0_intrpt_status_8_re;
  logic intrpt_status_0_intrpt_status_9_qs;
  logic intrpt_status_0_intrpt_status_9_wd;
  logic intrpt_status_0_intrpt_status_9_we;
  logic intrpt_status_0_intrpt_status_9_re;
  logic intrpt_status_0_intrpt_status_10_qs;
  logic intrpt_status_0_intrpt_status_10_wd;
  logic intrpt_status_0_intrpt_status_10_we;
  logic intrpt_status_0_intrpt_status_10_re;
  logic intrpt_status_0_intrpt_status_11_qs;
  logic intrpt_status_0_intrpt_status_11_wd;
  logic intrpt_status_0_intrpt_status_11_we;
  logic intrpt_status_0_intrpt_status_11_re;
  logic intrpt_status_0_intrpt_status_12_qs;
  logic intrpt_status_0_intrpt_status_12_wd;
  logic intrpt_status_0_intrpt_status_12_we;
  logic intrpt_status_0_intrpt_status_12_re;
  logic intrpt_status_0_intrpt_status_13_qs;
  logic intrpt_status_0_intrpt_status_13_wd;
  logic intrpt_status_0_intrpt_status_13_we;
  logic intrpt_status_0_intrpt_status_13_re;
  logic intrpt_status_0_intrpt_status_14_qs;
  logic intrpt_status_0_intrpt_status_14_wd;
  logic intrpt_status_0_intrpt_status_14_we;
  logic intrpt_status_0_intrpt_status_14_re;
  logic intrpt_status_0_intrpt_status_15_qs;
  logic intrpt_status_0_intrpt_status_15_wd;
  logic intrpt_status_0_intrpt_status_15_we;
  logic intrpt_status_0_intrpt_status_15_re;
  logic intrpt_status_0_intrpt_status_16_qs;
  logic intrpt_status_0_intrpt_status_16_wd;
  logic intrpt_status_0_intrpt_status_16_we;
  logic intrpt_status_0_intrpt_status_16_re;
  logic intrpt_status_0_intrpt_status_17_qs;
  logic intrpt_status_0_intrpt_status_17_wd;
  logic intrpt_status_0_intrpt_status_17_we;
  logic intrpt_status_0_intrpt_status_17_re;
  logic intrpt_status_0_intrpt_status_18_qs;
  logic intrpt_status_0_intrpt_status_18_wd;
  logic intrpt_status_0_intrpt_status_18_we;
  logic intrpt_status_0_intrpt_status_18_re;
  logic intrpt_status_0_intrpt_status_19_qs;
  logic intrpt_status_0_intrpt_status_19_wd;
  logic intrpt_status_0_intrpt_status_19_we;
  logic intrpt_status_0_intrpt_status_19_re;
  logic intrpt_status_0_intrpt_status_20_qs;
  logic intrpt_status_0_intrpt_status_20_wd;
  logic intrpt_status_0_intrpt_status_20_we;
  logic intrpt_status_0_intrpt_status_20_re;
  logic intrpt_status_0_intrpt_status_21_qs;
  logic intrpt_status_0_intrpt_status_21_wd;
  logic intrpt_status_0_intrpt_status_21_we;
  logic intrpt_status_0_intrpt_status_21_re;
  logic intrpt_status_0_intrpt_status_22_qs;
  logic intrpt_status_0_intrpt_status_22_wd;
  logic intrpt_status_0_intrpt_status_22_we;
  logic intrpt_status_0_intrpt_status_22_re;
  logic intrpt_status_0_intrpt_status_23_qs;
  logic intrpt_status_0_intrpt_status_23_wd;
  logic intrpt_status_0_intrpt_status_23_we;
  logic intrpt_status_0_intrpt_status_23_re;
  logic intrpt_status_0_intrpt_status_24_qs;
  logic intrpt_status_0_intrpt_status_24_wd;
  logic intrpt_status_0_intrpt_status_24_we;
  logic intrpt_status_0_intrpt_status_24_re;
  logic intrpt_status_0_intrpt_status_25_qs;
  logic intrpt_status_0_intrpt_status_25_wd;
  logic intrpt_status_0_intrpt_status_25_we;
  logic intrpt_status_0_intrpt_status_25_re;
  logic intrpt_status_0_intrpt_status_26_qs;
  logic intrpt_status_0_intrpt_status_26_wd;
  logic intrpt_status_0_intrpt_status_26_we;
  logic intrpt_status_0_intrpt_status_26_re;
  logic intrpt_status_0_intrpt_status_27_qs;
  logic intrpt_status_0_intrpt_status_27_wd;
  logic intrpt_status_0_intrpt_status_27_we;
  logic intrpt_status_0_intrpt_status_27_re;
  logic intrpt_status_0_intrpt_status_28_qs;
  logic intrpt_status_0_intrpt_status_28_wd;
  logic intrpt_status_0_intrpt_status_28_we;
  logic intrpt_status_0_intrpt_status_28_re;
  logic intrpt_status_0_intrpt_status_29_qs;
  logic intrpt_status_0_intrpt_status_29_wd;
  logic intrpt_status_0_intrpt_status_29_we;
  logic intrpt_status_0_intrpt_status_29_re;
  logic intrpt_status_0_intrpt_status_30_qs;
  logic intrpt_status_0_intrpt_status_30_wd;
  logic intrpt_status_0_intrpt_status_30_we;
  logic intrpt_status_0_intrpt_status_30_re;
  logic intrpt_status_0_intrpt_status_31_qs;
  logic intrpt_status_0_intrpt_status_31_wd;
  logic intrpt_status_0_intrpt_status_31_we;
  logic intrpt_status_0_intrpt_status_31_re;
  logic intrpt_status_1_intrpt_status_32_qs;
  logic intrpt_status_1_intrpt_status_32_wd;
  logic intrpt_status_1_intrpt_status_32_we;
  logic intrpt_status_1_intrpt_status_32_re;
  logic intrpt_status_1_intrpt_status_33_qs;
  logic intrpt_status_1_intrpt_status_33_wd;
  logic intrpt_status_1_intrpt_status_33_we;
  logic intrpt_status_1_intrpt_status_33_re;
  logic intrpt_status_1_intrpt_status_34_qs;
  logic intrpt_status_1_intrpt_status_34_wd;
  logic intrpt_status_1_intrpt_status_34_we;
  logic intrpt_status_1_intrpt_status_34_re;
  logic intrpt_status_1_intrpt_status_35_qs;
  logic intrpt_status_1_intrpt_status_35_wd;
  logic intrpt_status_1_intrpt_status_35_we;
  logic intrpt_status_1_intrpt_status_35_re;
  logic intrpt_status_1_intrpt_status_36_qs;
  logic intrpt_status_1_intrpt_status_36_wd;
  logic intrpt_status_1_intrpt_status_36_we;
  logic intrpt_status_1_intrpt_status_36_re;
  logic intrpt_status_1_intrpt_status_37_qs;
  logic intrpt_status_1_intrpt_status_37_wd;
  logic intrpt_status_1_intrpt_status_37_we;
  logic intrpt_status_1_intrpt_status_37_re;
  logic intrpt_status_1_intrpt_status_38_qs;
  logic intrpt_status_1_intrpt_status_38_wd;
  logic intrpt_status_1_intrpt_status_38_we;
  logic intrpt_status_1_intrpt_status_38_re;
  logic intrpt_status_1_intrpt_status_39_qs;
  logic intrpt_status_1_intrpt_status_39_wd;
  logic intrpt_status_1_intrpt_status_39_we;
  logic intrpt_status_1_intrpt_status_39_re;
  logic intrpt_status_1_intrpt_status_40_qs;
  logic intrpt_status_1_intrpt_status_40_wd;
  logic intrpt_status_1_intrpt_status_40_we;
  logic intrpt_status_1_intrpt_status_40_re;
  logic intrpt_status_1_intrpt_status_41_qs;
  logic intrpt_status_1_intrpt_status_41_wd;
  logic intrpt_status_1_intrpt_status_41_we;
  logic intrpt_status_1_intrpt_status_41_re;
  logic intrpt_status_1_intrpt_status_42_qs;
  logic intrpt_status_1_intrpt_status_42_wd;
  logic intrpt_status_1_intrpt_status_42_we;
  logic intrpt_status_1_intrpt_status_42_re;
  logic intrpt_status_1_intrpt_status_43_qs;
  logic intrpt_status_1_intrpt_status_43_wd;
  logic intrpt_status_1_intrpt_status_43_we;
  logic intrpt_status_1_intrpt_status_43_re;
  logic intrpt_status_1_intrpt_status_44_qs;
  logic intrpt_status_1_intrpt_status_44_wd;
  logic intrpt_status_1_intrpt_status_44_we;
  logic intrpt_status_1_intrpt_status_44_re;
  logic intrpt_status_1_intrpt_status_45_qs;
  logic intrpt_status_1_intrpt_status_45_wd;
  logic intrpt_status_1_intrpt_status_45_we;
  logic intrpt_status_1_intrpt_status_45_re;
  logic intrpt_status_1_intrpt_status_46_qs;
  logic intrpt_status_1_intrpt_status_46_wd;
  logic intrpt_status_1_intrpt_status_46_we;
  logic intrpt_status_1_intrpt_status_46_re;
  logic intrpt_status_1_intrpt_status_47_qs;
  logic intrpt_status_1_intrpt_status_47_wd;
  logic intrpt_status_1_intrpt_status_47_we;
  logic intrpt_status_1_intrpt_status_47_re;
  logic intrpt_status_1_intrpt_status_48_qs;
  logic intrpt_status_1_intrpt_status_48_wd;
  logic intrpt_status_1_intrpt_status_48_we;
  logic intrpt_status_1_intrpt_status_48_re;
  logic intrpt_status_1_intrpt_status_49_qs;
  logic intrpt_status_1_intrpt_status_49_wd;
  logic intrpt_status_1_intrpt_status_49_we;
  logic intrpt_status_1_intrpt_status_49_re;
  logic intrpt_status_1_intrpt_status_50_qs;
  logic intrpt_status_1_intrpt_status_50_wd;
  logic intrpt_status_1_intrpt_status_50_we;
  logic intrpt_status_1_intrpt_status_50_re;
  logic intrpt_status_1_intrpt_status_51_qs;
  logic intrpt_status_1_intrpt_status_51_wd;
  logic intrpt_status_1_intrpt_status_51_we;
  logic intrpt_status_1_intrpt_status_51_re;
  logic intrpt_status_1_intrpt_status_52_qs;
  logic intrpt_status_1_intrpt_status_52_wd;
  logic intrpt_status_1_intrpt_status_52_we;
  logic intrpt_status_1_intrpt_status_52_re;
  logic intrpt_status_1_intrpt_status_53_qs;
  logic intrpt_status_1_intrpt_status_53_wd;
  logic intrpt_status_1_intrpt_status_53_we;
  logic intrpt_status_1_intrpt_status_53_re;
  logic intrpt_status_1_intrpt_status_54_qs;
  logic intrpt_status_1_intrpt_status_54_wd;
  logic intrpt_status_1_intrpt_status_54_we;
  logic intrpt_status_1_intrpt_status_54_re;
  logic intrpt_status_1_intrpt_status_55_qs;
  logic intrpt_status_1_intrpt_status_55_wd;
  logic intrpt_status_1_intrpt_status_55_we;
  logic intrpt_status_1_intrpt_status_55_re;
  logic intrpt_rise_status_0_intrpt_rise_status_0_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_0_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_0_we;
  logic intrpt_rise_status_0_intrpt_rise_status_1_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_1_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_1_we;
  logic intrpt_rise_status_0_intrpt_rise_status_2_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_2_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_2_we;
  logic intrpt_rise_status_0_intrpt_rise_status_3_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_3_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_3_we;
  logic intrpt_rise_status_0_intrpt_rise_status_4_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_4_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_4_we;
  logic intrpt_rise_status_0_intrpt_rise_status_5_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_5_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_5_we;
  logic intrpt_rise_status_0_intrpt_rise_status_6_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_6_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_6_we;
  logic intrpt_rise_status_0_intrpt_rise_status_7_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_7_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_7_we;
  logic intrpt_rise_status_0_intrpt_rise_status_8_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_8_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_8_we;
  logic intrpt_rise_status_0_intrpt_rise_status_9_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_9_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_9_we;
  logic intrpt_rise_status_0_intrpt_rise_status_10_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_10_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_10_we;
  logic intrpt_rise_status_0_intrpt_rise_status_11_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_11_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_11_we;
  logic intrpt_rise_status_0_intrpt_rise_status_12_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_12_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_12_we;
  logic intrpt_rise_status_0_intrpt_rise_status_13_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_13_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_13_we;
  logic intrpt_rise_status_0_intrpt_rise_status_14_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_14_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_14_we;
  logic intrpt_rise_status_0_intrpt_rise_status_15_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_15_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_15_we;
  logic intrpt_rise_status_0_intrpt_rise_status_16_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_16_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_16_we;
  logic intrpt_rise_status_0_intrpt_rise_status_17_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_17_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_17_we;
  logic intrpt_rise_status_0_intrpt_rise_status_18_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_18_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_18_we;
  logic intrpt_rise_status_0_intrpt_rise_status_19_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_19_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_19_we;
  logic intrpt_rise_status_0_intrpt_rise_status_20_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_20_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_20_we;
  logic intrpt_rise_status_0_intrpt_rise_status_21_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_21_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_21_we;
  logic intrpt_rise_status_0_intrpt_rise_status_22_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_22_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_22_we;
  logic intrpt_rise_status_0_intrpt_rise_status_23_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_23_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_23_we;
  logic intrpt_rise_status_0_intrpt_rise_status_24_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_24_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_24_we;
  logic intrpt_rise_status_0_intrpt_rise_status_25_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_25_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_25_we;
  logic intrpt_rise_status_0_intrpt_rise_status_26_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_26_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_26_we;
  logic intrpt_rise_status_0_intrpt_rise_status_27_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_27_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_27_we;
  logic intrpt_rise_status_0_intrpt_rise_status_28_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_28_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_28_we;
  logic intrpt_rise_status_0_intrpt_rise_status_29_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_29_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_29_we;
  logic intrpt_rise_status_0_intrpt_rise_status_30_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_30_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_30_we;
  logic intrpt_rise_status_0_intrpt_rise_status_31_qs;
  logic intrpt_rise_status_0_intrpt_rise_status_31_wd;
  logic intrpt_rise_status_0_intrpt_rise_status_31_we;
  logic intrpt_rise_status_1_intrpt_rise_status_32_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_32_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_32_we;
  logic intrpt_rise_status_1_intrpt_rise_status_33_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_33_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_33_we;
  logic intrpt_rise_status_1_intrpt_rise_status_34_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_34_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_34_we;
  logic intrpt_rise_status_1_intrpt_rise_status_35_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_35_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_35_we;
  logic intrpt_rise_status_1_intrpt_rise_status_36_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_36_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_36_we;
  logic intrpt_rise_status_1_intrpt_rise_status_37_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_37_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_37_we;
  logic intrpt_rise_status_1_intrpt_rise_status_38_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_38_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_38_we;
  logic intrpt_rise_status_1_intrpt_rise_status_39_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_39_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_39_we;
  logic intrpt_rise_status_1_intrpt_rise_status_40_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_40_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_40_we;
  logic intrpt_rise_status_1_intrpt_rise_status_41_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_41_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_41_we;
  logic intrpt_rise_status_1_intrpt_rise_status_42_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_42_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_42_we;
  logic intrpt_rise_status_1_intrpt_rise_status_43_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_43_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_43_we;
  logic intrpt_rise_status_1_intrpt_rise_status_44_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_44_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_44_we;
  logic intrpt_rise_status_1_intrpt_rise_status_45_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_45_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_45_we;
  logic intrpt_rise_status_1_intrpt_rise_status_46_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_46_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_46_we;
  logic intrpt_rise_status_1_intrpt_rise_status_47_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_47_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_47_we;
  logic intrpt_rise_status_1_intrpt_rise_status_48_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_48_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_48_we;
  logic intrpt_rise_status_1_intrpt_rise_status_49_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_49_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_49_we;
  logic intrpt_rise_status_1_intrpt_rise_status_50_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_50_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_50_we;
  logic intrpt_rise_status_1_intrpt_rise_status_51_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_51_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_51_we;
  logic intrpt_rise_status_1_intrpt_rise_status_52_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_52_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_52_we;
  logic intrpt_rise_status_1_intrpt_rise_status_53_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_53_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_53_we;
  logic intrpt_rise_status_1_intrpt_rise_status_54_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_54_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_54_we;
  logic intrpt_rise_status_1_intrpt_rise_status_55_qs;
  logic intrpt_rise_status_1_intrpt_rise_status_55_wd;
  logic intrpt_rise_status_1_intrpt_rise_status_55_we;
  logic intrpt_fall_status_0_intrpt_fall_status_0_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_0_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_0_we;
  logic intrpt_fall_status_0_intrpt_fall_status_1_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_1_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_1_we;
  logic intrpt_fall_status_0_intrpt_fall_status_2_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_2_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_2_we;
  logic intrpt_fall_status_0_intrpt_fall_status_3_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_3_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_3_we;
  logic intrpt_fall_status_0_intrpt_fall_status_4_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_4_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_4_we;
  logic intrpt_fall_status_0_intrpt_fall_status_5_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_5_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_5_we;
  logic intrpt_fall_status_0_intrpt_fall_status_6_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_6_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_6_we;
  logic intrpt_fall_status_0_intrpt_fall_status_7_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_7_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_7_we;
  logic intrpt_fall_status_0_intrpt_fall_status_8_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_8_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_8_we;
  logic intrpt_fall_status_0_intrpt_fall_status_9_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_9_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_9_we;
  logic intrpt_fall_status_0_intrpt_fall_status_10_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_10_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_10_we;
  logic intrpt_fall_status_0_intrpt_fall_status_11_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_11_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_11_we;
  logic intrpt_fall_status_0_intrpt_fall_status_12_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_12_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_12_we;
  logic intrpt_fall_status_0_intrpt_fall_status_13_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_13_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_13_we;
  logic intrpt_fall_status_0_intrpt_fall_status_14_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_14_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_14_we;
  logic intrpt_fall_status_0_intrpt_fall_status_15_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_15_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_15_we;
  logic intrpt_fall_status_0_intrpt_fall_status_16_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_16_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_16_we;
  logic intrpt_fall_status_0_intrpt_fall_status_17_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_17_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_17_we;
  logic intrpt_fall_status_0_intrpt_fall_status_18_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_18_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_18_we;
  logic intrpt_fall_status_0_intrpt_fall_status_19_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_19_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_19_we;
  logic intrpt_fall_status_0_intrpt_fall_status_20_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_20_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_20_we;
  logic intrpt_fall_status_0_intrpt_fall_status_21_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_21_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_21_we;
  logic intrpt_fall_status_0_intrpt_fall_status_22_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_22_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_22_we;
  logic intrpt_fall_status_0_intrpt_fall_status_23_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_23_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_23_we;
  logic intrpt_fall_status_0_intrpt_fall_status_24_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_24_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_24_we;
  logic intrpt_fall_status_0_intrpt_fall_status_25_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_25_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_25_we;
  logic intrpt_fall_status_0_intrpt_fall_status_26_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_26_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_26_we;
  logic intrpt_fall_status_0_intrpt_fall_status_27_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_27_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_27_we;
  logic intrpt_fall_status_0_intrpt_fall_status_28_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_28_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_28_we;
  logic intrpt_fall_status_0_intrpt_fall_status_29_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_29_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_29_we;
  logic intrpt_fall_status_0_intrpt_fall_status_30_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_30_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_30_we;
  logic intrpt_fall_status_0_intrpt_fall_status_31_qs;
  logic intrpt_fall_status_0_intrpt_fall_status_31_wd;
  logic intrpt_fall_status_0_intrpt_fall_status_31_we;
  logic intrpt_fall_status_1_intrpt_fall_status_32_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_32_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_32_we;
  logic intrpt_fall_status_1_intrpt_fall_status_33_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_33_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_33_we;
  logic intrpt_fall_status_1_intrpt_fall_status_34_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_34_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_34_we;
  logic intrpt_fall_status_1_intrpt_fall_status_35_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_35_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_35_we;
  logic intrpt_fall_status_1_intrpt_fall_status_36_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_36_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_36_we;
  logic intrpt_fall_status_1_intrpt_fall_status_37_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_37_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_37_we;
  logic intrpt_fall_status_1_intrpt_fall_status_38_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_38_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_38_we;
  logic intrpt_fall_status_1_intrpt_fall_status_39_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_39_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_39_we;
  logic intrpt_fall_status_1_intrpt_fall_status_40_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_40_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_40_we;
  logic intrpt_fall_status_1_intrpt_fall_status_41_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_41_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_41_we;
  logic intrpt_fall_status_1_intrpt_fall_status_42_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_42_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_42_we;
  logic intrpt_fall_status_1_intrpt_fall_status_43_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_43_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_43_we;
  logic intrpt_fall_status_1_intrpt_fall_status_44_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_44_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_44_we;
  logic intrpt_fall_status_1_intrpt_fall_status_45_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_45_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_45_we;
  logic intrpt_fall_status_1_intrpt_fall_status_46_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_46_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_46_we;
  logic intrpt_fall_status_1_intrpt_fall_status_47_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_47_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_47_we;
  logic intrpt_fall_status_1_intrpt_fall_status_48_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_48_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_48_we;
  logic intrpt_fall_status_1_intrpt_fall_status_49_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_49_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_49_we;
  logic intrpt_fall_status_1_intrpt_fall_status_50_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_50_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_50_we;
  logic intrpt_fall_status_1_intrpt_fall_status_51_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_51_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_51_we;
  logic intrpt_fall_status_1_intrpt_fall_status_52_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_52_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_52_we;
  logic intrpt_fall_status_1_intrpt_fall_status_53_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_53_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_53_we;
  logic intrpt_fall_status_1_intrpt_fall_status_54_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_54_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_54_we;
  logic intrpt_fall_status_1_intrpt_fall_status_55_qs;
  logic intrpt_fall_status_1_intrpt_fall_status_55_wd;
  logic intrpt_fall_status_1_intrpt_fall_status_55_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_0_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_0_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_0_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_1_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_1_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_1_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_2_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_2_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_2_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_3_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_3_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_3_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_4_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_4_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_4_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_5_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_5_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_5_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_6_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_6_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_6_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_7_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_7_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_7_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_8_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_8_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_8_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_9_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_9_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_9_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_10_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_10_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_10_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_11_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_11_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_11_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_12_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_12_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_12_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_13_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_13_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_13_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_14_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_14_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_14_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_15_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_15_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_15_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_16_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_16_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_16_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_17_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_17_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_17_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_18_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_18_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_18_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_19_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_19_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_19_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_20_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_20_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_20_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_21_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_21_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_21_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_22_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_22_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_22_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_23_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_23_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_23_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_24_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_24_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_24_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_25_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_25_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_25_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_26_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_26_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_26_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_27_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_27_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_27_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_28_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_28_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_28_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_29_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_29_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_29_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_30_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_30_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_30_we;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_31_qs;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_31_wd;
  logic intrpt_lvl_high_status_0_intrpt_lvl_high_status_31_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_32_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_32_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_32_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_33_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_33_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_33_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_34_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_34_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_34_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_35_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_35_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_35_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_36_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_36_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_36_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_37_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_37_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_37_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_38_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_38_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_38_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_39_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_39_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_39_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_40_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_40_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_40_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_41_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_41_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_41_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_42_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_42_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_42_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_43_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_43_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_43_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_44_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_44_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_44_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_45_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_45_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_45_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_46_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_46_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_46_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_47_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_47_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_47_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_48_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_48_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_48_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_49_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_49_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_49_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_50_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_50_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_50_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_51_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_51_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_51_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_52_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_52_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_52_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_53_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_53_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_53_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_54_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_54_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_54_we;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_55_qs;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_55_wd;
  logic intrpt_lvl_high_status_1_intrpt_lvl_high_status_55_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_0_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_0_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_0_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_1_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_1_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_1_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_2_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_2_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_2_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_3_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_3_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_3_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_4_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_4_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_4_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_5_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_5_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_5_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_6_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_6_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_6_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_7_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_7_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_7_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_8_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_8_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_8_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_9_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_9_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_9_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_10_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_10_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_10_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_11_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_11_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_11_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_12_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_12_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_12_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_13_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_13_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_13_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_14_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_14_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_14_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_15_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_15_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_15_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_16_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_16_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_16_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_17_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_17_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_17_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_18_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_18_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_18_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_19_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_19_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_19_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_20_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_20_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_20_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_21_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_21_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_21_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_22_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_22_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_22_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_23_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_23_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_23_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_24_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_24_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_24_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_25_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_25_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_25_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_26_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_26_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_26_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_27_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_27_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_27_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_28_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_28_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_28_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_29_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_29_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_29_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_30_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_30_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_30_we;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_31_qs;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_31_wd;
  logic intrpt_lvl_low_status_0_intrpt_lvl_low_status_31_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_32_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_32_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_32_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_33_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_33_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_33_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_34_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_34_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_34_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_35_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_35_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_35_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_36_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_36_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_36_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_37_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_37_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_37_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_38_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_38_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_38_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_39_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_39_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_39_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_40_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_40_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_40_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_41_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_41_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_41_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_42_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_42_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_42_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_43_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_43_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_43_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_44_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_44_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_44_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_45_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_45_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_45_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_46_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_46_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_46_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_47_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_47_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_47_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_48_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_48_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_48_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_49_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_49_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_49_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_50_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_50_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_50_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_51_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_51_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_51_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_52_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_52_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_52_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_53_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_53_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_53_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_54_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_54_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_54_we;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_55_qs;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_55_wd;
  logic intrpt_lvl_low_status_1_intrpt_lvl_low_status_55_we;

  // Register instances
  // R[info]: V(True)

  //   F[gpio_cnt]: 9:0
  prim_subreg_ext #(
    .DW    (10)
  ) u_info_gpio_cnt (
    .re     (info_gpio_cnt_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.info.gpio_cnt.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (info_gpio_cnt_qs)
  );


  //   F[version]: 19:10
  prim_subreg_ext #(
    .DW    (10)
  ) u_info_version (
    .re     (info_version_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.info.version.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (info_version_qs)
  );


  // R[cfg]: V(False)

  //   F[intrpt_mode]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cfg_intrpt_mode (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_intrpt_mode_we),
    .wd     (cfg_intrpt_mode_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg.intrpt_mode.q ),

    // to register interface (read)
    .qs     (cfg_intrpt_mode_qs)
  );


  //   F[reserved]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cfg_reserved (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_reserved_we),
    .wd     (cfg_reserved_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg.reserved.q ),

    // to register interface (read)
    .qs     (cfg_reserved_qs)
  );



  // Subregister 0 of Multireg gpio_mode
  // R[gpio_mode_0]: V(False)

  // F[mode_0]: 1:0
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_0_we),
    .wd     (gpio_mode_0_mode_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[0].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_0_qs)
  );


  // F[mode_1]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_1_we),
    .wd     (gpio_mode_0_mode_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[1].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_1_qs)
  );


  // F[mode_2]: 5:4
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_2_we),
    .wd     (gpio_mode_0_mode_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[2].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_2_qs)
  );


  // F[mode_3]: 7:6
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_3_we),
    .wd     (gpio_mode_0_mode_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[3].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_3_qs)
  );


  // F[mode_4]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_4_we),
    .wd     (gpio_mode_0_mode_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[4].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_4_qs)
  );


  // F[mode_5]: 11:10
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_5_we),
    .wd     (gpio_mode_0_mode_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[5].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_5_qs)
  );


  // F[mode_6]: 13:12
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_6_we),
    .wd     (gpio_mode_0_mode_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[6].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_6_qs)
  );


  // F[mode_7]: 15:14
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_7_we),
    .wd     (gpio_mode_0_mode_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[7].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_7_qs)
  );


  // F[mode_8]: 17:16
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_8_we),
    .wd     (gpio_mode_0_mode_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[8].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_8_qs)
  );


  // F[mode_9]: 19:18
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_9_we),
    .wd     (gpio_mode_0_mode_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[9].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_9_qs)
  );


  // F[mode_10]: 21:20
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_10_we),
    .wd     (gpio_mode_0_mode_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[10].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_10_qs)
  );


  // F[mode_11]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_11_we),
    .wd     (gpio_mode_0_mode_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[11].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_11_qs)
  );


  // F[mode_12]: 25:24
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_12_we),
    .wd     (gpio_mode_0_mode_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[12].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_12_qs)
  );


  // F[mode_13]: 27:26
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_13_we),
    .wd     (gpio_mode_0_mode_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[13].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_13_qs)
  );


  // F[mode_14]: 29:28
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_14_we),
    .wd     (gpio_mode_0_mode_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[14].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_14_qs)
  );


  // F[mode_15]: 31:30
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_0_mode_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_0_mode_15_we),
    .wd     (gpio_mode_0_mode_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[15].q ),

    // to register interface (read)
    .qs     (gpio_mode_0_mode_15_qs)
  );


  // Subregister 16 of Multireg gpio_mode
  // R[gpio_mode_1]: V(False)

  // F[mode_16]: 1:0
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_16_we),
    .wd     (gpio_mode_1_mode_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[16].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_16_qs)
  );


  // F[mode_17]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_17_we),
    .wd     (gpio_mode_1_mode_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[17].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_17_qs)
  );


  // F[mode_18]: 5:4
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_18_we),
    .wd     (gpio_mode_1_mode_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[18].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_18_qs)
  );


  // F[mode_19]: 7:6
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_19_we),
    .wd     (gpio_mode_1_mode_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[19].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_19_qs)
  );


  // F[mode_20]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_20_we),
    .wd     (gpio_mode_1_mode_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[20].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_20_qs)
  );


  // F[mode_21]: 11:10
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_21_we),
    .wd     (gpio_mode_1_mode_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[21].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_21_qs)
  );


  // F[mode_22]: 13:12
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_22_we),
    .wd     (gpio_mode_1_mode_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[22].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_22_qs)
  );


  // F[mode_23]: 15:14
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_23_we),
    .wd     (gpio_mode_1_mode_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[23].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_23_qs)
  );


  // F[mode_24]: 17:16
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_24_we),
    .wd     (gpio_mode_1_mode_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[24].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_24_qs)
  );


  // F[mode_25]: 19:18
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_25_we),
    .wd     (gpio_mode_1_mode_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[25].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_25_qs)
  );


  // F[mode_26]: 21:20
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_26_we),
    .wd     (gpio_mode_1_mode_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[26].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_26_qs)
  );


  // F[mode_27]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_27_we),
    .wd     (gpio_mode_1_mode_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[27].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_27_qs)
  );


  // F[mode_28]: 25:24
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_28_we),
    .wd     (gpio_mode_1_mode_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[28].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_28_qs)
  );


  // F[mode_29]: 27:26
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_29_we),
    .wd     (gpio_mode_1_mode_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[29].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_29_qs)
  );


  // F[mode_30]: 29:28
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_30_we),
    .wd     (gpio_mode_1_mode_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[30].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_30_qs)
  );


  // F[mode_31]: 31:30
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_1_mode_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_1_mode_31_we),
    .wd     (gpio_mode_1_mode_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[31].q ),

    // to register interface (read)
    .qs     (gpio_mode_1_mode_31_qs)
  );


  // Subregister 32 of Multireg gpio_mode
  // R[gpio_mode_2]: V(False)

  // F[mode_32]: 1:0
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_32_we),
    .wd     (gpio_mode_2_mode_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[32].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_32_qs)
  );


  // F[mode_33]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_33_we),
    .wd     (gpio_mode_2_mode_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[33].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_33_qs)
  );


  // F[mode_34]: 5:4
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_34_we),
    .wd     (gpio_mode_2_mode_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[34].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_34_qs)
  );


  // F[mode_35]: 7:6
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_35_we),
    .wd     (gpio_mode_2_mode_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[35].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_35_qs)
  );


  // F[mode_36]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_36_we),
    .wd     (gpio_mode_2_mode_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[36].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_36_qs)
  );


  // F[mode_37]: 11:10
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_37_we),
    .wd     (gpio_mode_2_mode_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[37].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_37_qs)
  );


  // F[mode_38]: 13:12
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_38_we),
    .wd     (gpio_mode_2_mode_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[38].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_38_qs)
  );


  // F[mode_39]: 15:14
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_39_we),
    .wd     (gpio_mode_2_mode_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[39].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_39_qs)
  );


  // F[mode_40]: 17:16
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_40_we),
    .wd     (gpio_mode_2_mode_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[40].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_40_qs)
  );


  // F[mode_41]: 19:18
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_41_we),
    .wd     (gpio_mode_2_mode_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[41].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_41_qs)
  );


  // F[mode_42]: 21:20
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_42_we),
    .wd     (gpio_mode_2_mode_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[42].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_42_qs)
  );


  // F[mode_43]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_43_we),
    .wd     (gpio_mode_2_mode_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[43].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_43_qs)
  );


  // F[mode_44]: 25:24
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_44_we),
    .wd     (gpio_mode_2_mode_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[44].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_44_qs)
  );


  // F[mode_45]: 27:26
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_45_we),
    .wd     (gpio_mode_2_mode_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[45].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_45_qs)
  );


  // F[mode_46]: 29:28
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_46_we),
    .wd     (gpio_mode_2_mode_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[46].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_46_qs)
  );


  // F[mode_47]: 31:30
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_2_mode_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_2_mode_47_we),
    .wd     (gpio_mode_2_mode_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[47].q ),

    // to register interface (read)
    .qs     (gpio_mode_2_mode_47_qs)
  );


  // Subregister 48 of Multireg gpio_mode
  // R[gpio_mode_3]: V(False)

  // F[mode_48]: 1:0
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_3_mode_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_3_mode_48_we),
    .wd     (gpio_mode_3_mode_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[48].q ),

    // to register interface (read)
    .qs     (gpio_mode_3_mode_48_qs)
  );


  // F[mode_49]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_3_mode_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_3_mode_49_we),
    .wd     (gpio_mode_3_mode_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[49].q ),

    // to register interface (read)
    .qs     (gpio_mode_3_mode_49_qs)
  );


  // F[mode_50]: 5:4
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_3_mode_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_3_mode_50_we),
    .wd     (gpio_mode_3_mode_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[50].q ),

    // to register interface (read)
    .qs     (gpio_mode_3_mode_50_qs)
  );


  // F[mode_51]: 7:6
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_3_mode_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_3_mode_51_we),
    .wd     (gpio_mode_3_mode_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[51].q ),

    // to register interface (read)
    .qs     (gpio_mode_3_mode_51_qs)
  );


  // F[mode_52]: 9:8
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_3_mode_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_3_mode_52_we),
    .wd     (gpio_mode_3_mode_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[52].q ),

    // to register interface (read)
    .qs     (gpio_mode_3_mode_52_qs)
  );


  // F[mode_53]: 11:10
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_3_mode_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_3_mode_53_we),
    .wd     (gpio_mode_3_mode_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[53].q ),

    // to register interface (read)
    .qs     (gpio_mode_3_mode_53_qs)
  );


  // F[mode_54]: 13:12
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_3_mode_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_3_mode_54_we),
    .wd     (gpio_mode_3_mode_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[54].q ),

    // to register interface (read)
    .qs     (gpio_mode_3_mode_54_qs)
  );


  // F[mode_55]: 15:14
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_gpio_mode_3_mode_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_mode_3_mode_55_we),
    .wd     (gpio_mode_3_mode_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_mode[55].q ),

    // to register interface (read)
    .qs     (gpio_mode_3_mode_55_qs)
  );




  // Subregister 0 of Multireg gpio_en
  // R[gpio_en_0]: V(False)

  // F[gpio_en_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_0_we),
    .wd     (gpio_en_0_gpio_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[0].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_0_qs)
  );


  // F[gpio_en_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_1_we),
    .wd     (gpio_en_0_gpio_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[1].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_1_qs)
  );


  // F[gpio_en_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_2_we),
    .wd     (gpio_en_0_gpio_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[2].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_2_qs)
  );


  // F[gpio_en_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_3_we),
    .wd     (gpio_en_0_gpio_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[3].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_3_qs)
  );


  // F[gpio_en_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_4_we),
    .wd     (gpio_en_0_gpio_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[4].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_4_qs)
  );


  // F[gpio_en_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_5_we),
    .wd     (gpio_en_0_gpio_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[5].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_5_qs)
  );


  // F[gpio_en_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_6_we),
    .wd     (gpio_en_0_gpio_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[6].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_6_qs)
  );


  // F[gpio_en_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_7_we),
    .wd     (gpio_en_0_gpio_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[7].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_7_qs)
  );


  // F[gpio_en_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_8_we),
    .wd     (gpio_en_0_gpio_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[8].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_8_qs)
  );


  // F[gpio_en_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_9_we),
    .wd     (gpio_en_0_gpio_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[9].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_9_qs)
  );


  // F[gpio_en_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_10_we),
    .wd     (gpio_en_0_gpio_en_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[10].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_10_qs)
  );


  // F[gpio_en_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_11_we),
    .wd     (gpio_en_0_gpio_en_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[11].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_11_qs)
  );


  // F[gpio_en_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_12_we),
    .wd     (gpio_en_0_gpio_en_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[12].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_12_qs)
  );


  // F[gpio_en_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_13_we),
    .wd     (gpio_en_0_gpio_en_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[13].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_13_qs)
  );


  // F[gpio_en_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_14_we),
    .wd     (gpio_en_0_gpio_en_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[14].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_14_qs)
  );


  // F[gpio_en_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_15_we),
    .wd     (gpio_en_0_gpio_en_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[15].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_15_qs)
  );


  // F[gpio_en_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_16_we),
    .wd     (gpio_en_0_gpio_en_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[16].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_16_qs)
  );


  // F[gpio_en_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_17_we),
    .wd     (gpio_en_0_gpio_en_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[17].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_17_qs)
  );


  // F[gpio_en_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_18_we),
    .wd     (gpio_en_0_gpio_en_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[18].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_18_qs)
  );


  // F[gpio_en_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_19_we),
    .wd     (gpio_en_0_gpio_en_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[19].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_19_qs)
  );


  // F[gpio_en_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_20_we),
    .wd     (gpio_en_0_gpio_en_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[20].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_20_qs)
  );


  // F[gpio_en_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_21_we),
    .wd     (gpio_en_0_gpio_en_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[21].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_21_qs)
  );


  // F[gpio_en_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_22_we),
    .wd     (gpio_en_0_gpio_en_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[22].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_22_qs)
  );


  // F[gpio_en_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_23_we),
    .wd     (gpio_en_0_gpio_en_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[23].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_23_qs)
  );


  // F[gpio_en_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_24_we),
    .wd     (gpio_en_0_gpio_en_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[24].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_24_qs)
  );


  // F[gpio_en_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_25_we),
    .wd     (gpio_en_0_gpio_en_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[25].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_25_qs)
  );


  // F[gpio_en_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_26_we),
    .wd     (gpio_en_0_gpio_en_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[26].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_26_qs)
  );


  // F[gpio_en_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_27_we),
    .wd     (gpio_en_0_gpio_en_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[27].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_27_qs)
  );


  // F[gpio_en_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_28_we),
    .wd     (gpio_en_0_gpio_en_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[28].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_28_qs)
  );


  // F[gpio_en_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_29_we),
    .wd     (gpio_en_0_gpio_en_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[29].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_29_qs)
  );


  // F[gpio_en_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_30_we),
    .wd     (gpio_en_0_gpio_en_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[30].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_30_qs)
  );


  // F[gpio_en_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_0_gpio_en_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_gpio_en_31_we),
    .wd     (gpio_en_0_gpio_en_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[31].q ),

    // to register interface (read)
    .qs     (gpio_en_0_gpio_en_31_qs)
  );


  // Subregister 32 of Multireg gpio_en
  // R[gpio_en_1]: V(False)

  // F[gpio_en_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_32_we),
    .wd     (gpio_en_1_gpio_en_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[32].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_32_qs)
  );


  // F[gpio_en_33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_33_we),
    .wd     (gpio_en_1_gpio_en_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[33].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_33_qs)
  );


  // F[gpio_en_34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_34_we),
    .wd     (gpio_en_1_gpio_en_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[34].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_34_qs)
  );


  // F[gpio_en_35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_35_we),
    .wd     (gpio_en_1_gpio_en_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[35].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_35_qs)
  );


  // F[gpio_en_36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_36_we),
    .wd     (gpio_en_1_gpio_en_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[36].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_36_qs)
  );


  // F[gpio_en_37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_37_we),
    .wd     (gpio_en_1_gpio_en_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[37].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_37_qs)
  );


  // F[gpio_en_38]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_38_we),
    .wd     (gpio_en_1_gpio_en_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[38].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_38_qs)
  );


  // F[gpio_en_39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_39_we),
    .wd     (gpio_en_1_gpio_en_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[39].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_39_qs)
  );


  // F[gpio_en_40]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_40_we),
    .wd     (gpio_en_1_gpio_en_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[40].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_40_qs)
  );


  // F[gpio_en_41]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_41_we),
    .wd     (gpio_en_1_gpio_en_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[41].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_41_qs)
  );


  // F[gpio_en_42]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_42_we),
    .wd     (gpio_en_1_gpio_en_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[42].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_42_qs)
  );


  // F[gpio_en_43]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_43_we),
    .wd     (gpio_en_1_gpio_en_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[43].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_43_qs)
  );


  // F[gpio_en_44]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_44_we),
    .wd     (gpio_en_1_gpio_en_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[44].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_44_qs)
  );


  // F[gpio_en_45]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_45_we),
    .wd     (gpio_en_1_gpio_en_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[45].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_45_qs)
  );


  // F[gpio_en_46]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_46_we),
    .wd     (gpio_en_1_gpio_en_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[46].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_46_qs)
  );


  // F[gpio_en_47]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_47_we),
    .wd     (gpio_en_1_gpio_en_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[47].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_47_qs)
  );


  // F[gpio_en_48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_48_we),
    .wd     (gpio_en_1_gpio_en_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[48].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_48_qs)
  );


  // F[gpio_en_49]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_49_we),
    .wd     (gpio_en_1_gpio_en_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[49].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_49_qs)
  );


  // F[gpio_en_50]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_50_we),
    .wd     (gpio_en_1_gpio_en_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[50].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_50_qs)
  );


  // F[gpio_en_51]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_51_we),
    .wd     (gpio_en_1_gpio_en_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[51].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_51_qs)
  );


  // F[gpio_en_52]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_52_we),
    .wd     (gpio_en_1_gpio_en_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[52].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_52_qs)
  );


  // F[gpio_en_53]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_53_we),
    .wd     (gpio_en_1_gpio_en_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[53].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_53_qs)
  );


  // F[gpio_en_54]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_54_we),
    .wd     (gpio_en_1_gpio_en_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[54].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_54_qs)
  );


  // F[gpio_en_55]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_en_1_gpio_en_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_gpio_en_55_we),
    .wd     (gpio_en_1_gpio_en_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[55].q ),

    // to register interface (read)
    .qs     (gpio_en_1_gpio_en_55_qs)
  );




  // Subregister 0 of Multireg gpio_in
  // R[gpio_in_0]: V(True)

  // F[gpio_in_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_0 (
    .re     (gpio_in_0_gpio_in_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_0_qs)
  );


  // F[gpio_in_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_1 (
    .re     (gpio_in_0_gpio_in_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_1_qs)
  );


  // F[gpio_in_2]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_2 (
    .re     (gpio_in_0_gpio_in_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_2_qs)
  );


  // F[gpio_in_3]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_3 (
    .re     (gpio_in_0_gpio_in_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_3_qs)
  );


  // F[gpio_in_4]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_4 (
    .re     (gpio_in_0_gpio_in_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[4].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_4_qs)
  );


  // F[gpio_in_5]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_5 (
    .re     (gpio_in_0_gpio_in_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[5].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_5_qs)
  );


  // F[gpio_in_6]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_6 (
    .re     (gpio_in_0_gpio_in_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[6].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_6_qs)
  );


  // F[gpio_in_7]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_7 (
    .re     (gpio_in_0_gpio_in_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[7].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_7_qs)
  );


  // F[gpio_in_8]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_8 (
    .re     (gpio_in_0_gpio_in_8_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[8].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_8_qs)
  );


  // F[gpio_in_9]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_9 (
    .re     (gpio_in_0_gpio_in_9_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[9].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_9_qs)
  );


  // F[gpio_in_10]: 10:10
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_10 (
    .re     (gpio_in_0_gpio_in_10_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[10].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_10_qs)
  );


  // F[gpio_in_11]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_11 (
    .re     (gpio_in_0_gpio_in_11_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[11].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_11_qs)
  );


  // F[gpio_in_12]: 12:12
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_12 (
    .re     (gpio_in_0_gpio_in_12_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[12].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_12_qs)
  );


  // F[gpio_in_13]: 13:13
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_13 (
    .re     (gpio_in_0_gpio_in_13_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[13].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_13_qs)
  );


  // F[gpio_in_14]: 14:14
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_14 (
    .re     (gpio_in_0_gpio_in_14_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[14].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_14_qs)
  );


  // F[gpio_in_15]: 15:15
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_15 (
    .re     (gpio_in_0_gpio_in_15_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[15].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_15_qs)
  );


  // F[gpio_in_16]: 16:16
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_16 (
    .re     (gpio_in_0_gpio_in_16_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[16].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_16_qs)
  );


  // F[gpio_in_17]: 17:17
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_17 (
    .re     (gpio_in_0_gpio_in_17_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[17].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_17_qs)
  );


  // F[gpio_in_18]: 18:18
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_18 (
    .re     (gpio_in_0_gpio_in_18_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[18].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_18_qs)
  );


  // F[gpio_in_19]: 19:19
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_19 (
    .re     (gpio_in_0_gpio_in_19_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[19].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_19_qs)
  );


  // F[gpio_in_20]: 20:20
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_20 (
    .re     (gpio_in_0_gpio_in_20_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[20].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_20_qs)
  );


  // F[gpio_in_21]: 21:21
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_21 (
    .re     (gpio_in_0_gpio_in_21_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[21].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_21_qs)
  );


  // F[gpio_in_22]: 22:22
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_22 (
    .re     (gpio_in_0_gpio_in_22_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[22].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_22_qs)
  );


  // F[gpio_in_23]: 23:23
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_23 (
    .re     (gpio_in_0_gpio_in_23_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[23].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_23_qs)
  );


  // F[gpio_in_24]: 24:24
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_24 (
    .re     (gpio_in_0_gpio_in_24_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[24].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_24_qs)
  );


  // F[gpio_in_25]: 25:25
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_25 (
    .re     (gpio_in_0_gpio_in_25_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[25].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_25_qs)
  );


  // F[gpio_in_26]: 26:26
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_26 (
    .re     (gpio_in_0_gpio_in_26_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[26].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_26_qs)
  );


  // F[gpio_in_27]: 27:27
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_27 (
    .re     (gpio_in_0_gpio_in_27_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[27].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_27_qs)
  );


  // F[gpio_in_28]: 28:28
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_28 (
    .re     (gpio_in_0_gpio_in_28_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[28].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_28_qs)
  );


  // F[gpio_in_29]: 29:29
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_29 (
    .re     (gpio_in_0_gpio_in_29_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[29].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_29_qs)
  );


  // F[gpio_in_30]: 30:30
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_30 (
    .re     (gpio_in_0_gpio_in_30_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[30].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_30_qs)
  );


  // F[gpio_in_31]: 31:31
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_0_gpio_in_31 (
    .re     (gpio_in_0_gpio_in_31_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[31].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_gpio_in_31_qs)
  );


  // Subregister 32 of Multireg gpio_in
  // R[gpio_in_1]: V(True)

  // F[gpio_in_32]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_32 (
    .re     (gpio_in_1_gpio_in_32_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[32].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_32_qs)
  );


  // F[gpio_in_33]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_33 (
    .re     (gpio_in_1_gpio_in_33_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[33].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_33_qs)
  );


  // F[gpio_in_34]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_34 (
    .re     (gpio_in_1_gpio_in_34_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[34].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_34_qs)
  );


  // F[gpio_in_35]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_35 (
    .re     (gpio_in_1_gpio_in_35_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[35].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_35_qs)
  );


  // F[gpio_in_36]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_36 (
    .re     (gpio_in_1_gpio_in_36_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[36].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_36_qs)
  );


  // F[gpio_in_37]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_37 (
    .re     (gpio_in_1_gpio_in_37_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[37].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_37_qs)
  );


  // F[gpio_in_38]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_38 (
    .re     (gpio_in_1_gpio_in_38_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[38].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_38_qs)
  );


  // F[gpio_in_39]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_39 (
    .re     (gpio_in_1_gpio_in_39_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[39].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_39_qs)
  );


  // F[gpio_in_40]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_40 (
    .re     (gpio_in_1_gpio_in_40_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[40].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_40_qs)
  );


  // F[gpio_in_41]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_41 (
    .re     (gpio_in_1_gpio_in_41_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[41].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_41_qs)
  );


  // F[gpio_in_42]: 10:10
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_42 (
    .re     (gpio_in_1_gpio_in_42_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[42].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_42_qs)
  );


  // F[gpio_in_43]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_43 (
    .re     (gpio_in_1_gpio_in_43_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[43].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_43_qs)
  );


  // F[gpio_in_44]: 12:12
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_44 (
    .re     (gpio_in_1_gpio_in_44_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[44].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_44_qs)
  );


  // F[gpio_in_45]: 13:13
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_45 (
    .re     (gpio_in_1_gpio_in_45_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[45].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_45_qs)
  );


  // F[gpio_in_46]: 14:14
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_46 (
    .re     (gpio_in_1_gpio_in_46_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[46].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_46_qs)
  );


  // F[gpio_in_47]: 15:15
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_47 (
    .re     (gpio_in_1_gpio_in_47_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[47].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_47_qs)
  );


  // F[gpio_in_48]: 16:16
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_48 (
    .re     (gpio_in_1_gpio_in_48_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[48].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_48_qs)
  );


  // F[gpio_in_49]: 17:17
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_49 (
    .re     (gpio_in_1_gpio_in_49_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[49].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_49_qs)
  );


  // F[gpio_in_50]: 18:18
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_50 (
    .re     (gpio_in_1_gpio_in_50_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[50].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_50_qs)
  );


  // F[gpio_in_51]: 19:19
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_51 (
    .re     (gpio_in_1_gpio_in_51_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[51].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_51_qs)
  );


  // F[gpio_in_52]: 20:20
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_52 (
    .re     (gpio_in_1_gpio_in_52_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[52].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_52_qs)
  );


  // F[gpio_in_53]: 21:21
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_53 (
    .re     (gpio_in_1_gpio_in_53_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[53].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_53_qs)
  );


  // F[gpio_in_54]: 22:22
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_54 (
    .re     (gpio_in_1_gpio_in_54_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[54].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_54_qs)
  );


  // F[gpio_in_55]: 23:23
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_in_1_gpio_in_55 (
    .re     (gpio_in_1_gpio_in_55_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[55].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_gpio_in_55_qs)
  );




  // Subregister 0 of Multireg gpio_out
  // R[gpio_out_0]: V(False)

  // F[gpio_out_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_0_we),
    .wd     (gpio_out_0_gpio_out_0_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[0].de),
    .d      (hw2reg.gpio_out[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[0].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_0_qs)
  );


  // F[gpio_out_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_1_we),
    .wd     (gpio_out_0_gpio_out_1_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[1].de),
    .d      (hw2reg.gpio_out[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[1].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_1_qs)
  );


  // F[gpio_out_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_2_we),
    .wd     (gpio_out_0_gpio_out_2_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[2].de),
    .d      (hw2reg.gpio_out[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[2].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_2_qs)
  );


  // F[gpio_out_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_3_we),
    .wd     (gpio_out_0_gpio_out_3_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[3].de),
    .d      (hw2reg.gpio_out[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[3].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_3_qs)
  );


  // F[gpio_out_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_4_we),
    .wd     (gpio_out_0_gpio_out_4_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[4].de),
    .d      (hw2reg.gpio_out[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[4].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_4_qs)
  );


  // F[gpio_out_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_5_we),
    .wd     (gpio_out_0_gpio_out_5_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[5].de),
    .d      (hw2reg.gpio_out[5].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[5].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_5_qs)
  );


  // F[gpio_out_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_6_we),
    .wd     (gpio_out_0_gpio_out_6_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[6].de),
    .d      (hw2reg.gpio_out[6].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[6].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_6_qs)
  );


  // F[gpio_out_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_7_we),
    .wd     (gpio_out_0_gpio_out_7_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[7].de),
    .d      (hw2reg.gpio_out[7].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[7].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_7_qs)
  );


  // F[gpio_out_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_8_we),
    .wd     (gpio_out_0_gpio_out_8_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[8].de),
    .d      (hw2reg.gpio_out[8].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[8].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_8_qs)
  );


  // F[gpio_out_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_9_we),
    .wd     (gpio_out_0_gpio_out_9_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[9].de),
    .d      (hw2reg.gpio_out[9].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[9].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_9_qs)
  );


  // F[gpio_out_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_10_we),
    .wd     (gpio_out_0_gpio_out_10_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[10].de),
    .d      (hw2reg.gpio_out[10].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[10].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_10_qs)
  );


  // F[gpio_out_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_11_we),
    .wd     (gpio_out_0_gpio_out_11_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[11].de),
    .d      (hw2reg.gpio_out[11].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[11].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_11_qs)
  );


  // F[gpio_out_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_12_we),
    .wd     (gpio_out_0_gpio_out_12_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[12].de),
    .d      (hw2reg.gpio_out[12].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[12].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_12_qs)
  );


  // F[gpio_out_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_13_we),
    .wd     (gpio_out_0_gpio_out_13_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[13].de),
    .d      (hw2reg.gpio_out[13].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[13].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_13_qs)
  );


  // F[gpio_out_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_14_we),
    .wd     (gpio_out_0_gpio_out_14_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[14].de),
    .d      (hw2reg.gpio_out[14].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[14].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_14_qs)
  );


  // F[gpio_out_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_15_we),
    .wd     (gpio_out_0_gpio_out_15_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[15].de),
    .d      (hw2reg.gpio_out[15].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[15].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_15_qs)
  );


  // F[gpio_out_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_16_we),
    .wd     (gpio_out_0_gpio_out_16_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[16].de),
    .d      (hw2reg.gpio_out[16].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[16].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_16_qs)
  );


  // F[gpio_out_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_17_we),
    .wd     (gpio_out_0_gpio_out_17_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[17].de),
    .d      (hw2reg.gpio_out[17].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[17].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_17_qs)
  );


  // F[gpio_out_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_18_we),
    .wd     (gpio_out_0_gpio_out_18_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[18].de),
    .d      (hw2reg.gpio_out[18].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[18].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_18_qs)
  );


  // F[gpio_out_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_19_we),
    .wd     (gpio_out_0_gpio_out_19_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[19].de),
    .d      (hw2reg.gpio_out[19].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[19].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_19_qs)
  );


  // F[gpio_out_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_20_we),
    .wd     (gpio_out_0_gpio_out_20_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[20].de),
    .d      (hw2reg.gpio_out[20].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[20].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_20_qs)
  );


  // F[gpio_out_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_21_we),
    .wd     (gpio_out_0_gpio_out_21_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[21].de),
    .d      (hw2reg.gpio_out[21].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[21].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_21_qs)
  );


  // F[gpio_out_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_22_we),
    .wd     (gpio_out_0_gpio_out_22_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[22].de),
    .d      (hw2reg.gpio_out[22].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[22].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_22_qs)
  );


  // F[gpio_out_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_23_we),
    .wd     (gpio_out_0_gpio_out_23_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[23].de),
    .d      (hw2reg.gpio_out[23].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[23].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_23_qs)
  );


  // F[gpio_out_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_24_we),
    .wd     (gpio_out_0_gpio_out_24_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[24].de),
    .d      (hw2reg.gpio_out[24].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[24].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_24_qs)
  );


  // F[gpio_out_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_25_we),
    .wd     (gpio_out_0_gpio_out_25_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[25].de),
    .d      (hw2reg.gpio_out[25].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[25].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_25_qs)
  );


  // F[gpio_out_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_26_we),
    .wd     (gpio_out_0_gpio_out_26_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[26].de),
    .d      (hw2reg.gpio_out[26].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[26].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_26_qs)
  );


  // F[gpio_out_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_27_we),
    .wd     (gpio_out_0_gpio_out_27_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[27].de),
    .d      (hw2reg.gpio_out[27].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[27].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_27_qs)
  );


  // F[gpio_out_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_28_we),
    .wd     (gpio_out_0_gpio_out_28_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[28].de),
    .d      (hw2reg.gpio_out[28].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[28].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_28_qs)
  );


  // F[gpio_out_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_29_we),
    .wd     (gpio_out_0_gpio_out_29_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[29].de),
    .d      (hw2reg.gpio_out[29].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[29].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_29_qs)
  );


  // F[gpio_out_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_30_we),
    .wd     (gpio_out_0_gpio_out_30_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[30].de),
    .d      (hw2reg.gpio_out[30].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[30].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_30_qs)
  );


  // F[gpio_out_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_0_gpio_out_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_gpio_out_31_we),
    .wd     (gpio_out_0_gpio_out_31_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[31].de),
    .d      (hw2reg.gpio_out[31].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[31].q ),

    // to register interface (read)
    .qs     (gpio_out_0_gpio_out_31_qs)
  );


  // Subregister 32 of Multireg gpio_out
  // R[gpio_out_1]: V(False)

  // F[gpio_out_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_32_we),
    .wd     (gpio_out_1_gpio_out_32_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[32].de),
    .d      (hw2reg.gpio_out[32].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[32].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_32_qs)
  );


  // F[gpio_out_33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_33_we),
    .wd     (gpio_out_1_gpio_out_33_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[33].de),
    .d      (hw2reg.gpio_out[33].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[33].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_33_qs)
  );


  // F[gpio_out_34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_34_we),
    .wd     (gpio_out_1_gpio_out_34_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[34].de),
    .d      (hw2reg.gpio_out[34].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[34].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_34_qs)
  );


  // F[gpio_out_35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_35_we),
    .wd     (gpio_out_1_gpio_out_35_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[35].de),
    .d      (hw2reg.gpio_out[35].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[35].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_35_qs)
  );


  // F[gpio_out_36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_36_we),
    .wd     (gpio_out_1_gpio_out_36_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[36].de),
    .d      (hw2reg.gpio_out[36].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[36].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_36_qs)
  );


  // F[gpio_out_37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_37_we),
    .wd     (gpio_out_1_gpio_out_37_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[37].de),
    .d      (hw2reg.gpio_out[37].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[37].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_37_qs)
  );


  // F[gpio_out_38]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_38_we),
    .wd     (gpio_out_1_gpio_out_38_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[38].de),
    .d      (hw2reg.gpio_out[38].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[38].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_38_qs)
  );


  // F[gpio_out_39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_39_we),
    .wd     (gpio_out_1_gpio_out_39_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[39].de),
    .d      (hw2reg.gpio_out[39].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[39].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_39_qs)
  );


  // F[gpio_out_40]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_40_we),
    .wd     (gpio_out_1_gpio_out_40_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[40].de),
    .d      (hw2reg.gpio_out[40].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[40].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_40_qs)
  );


  // F[gpio_out_41]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_41_we),
    .wd     (gpio_out_1_gpio_out_41_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[41].de),
    .d      (hw2reg.gpio_out[41].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[41].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_41_qs)
  );


  // F[gpio_out_42]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_42_we),
    .wd     (gpio_out_1_gpio_out_42_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[42].de),
    .d      (hw2reg.gpio_out[42].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[42].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_42_qs)
  );


  // F[gpio_out_43]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_43_we),
    .wd     (gpio_out_1_gpio_out_43_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[43].de),
    .d      (hw2reg.gpio_out[43].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[43].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_43_qs)
  );


  // F[gpio_out_44]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_44_we),
    .wd     (gpio_out_1_gpio_out_44_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[44].de),
    .d      (hw2reg.gpio_out[44].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[44].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_44_qs)
  );


  // F[gpio_out_45]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_45_we),
    .wd     (gpio_out_1_gpio_out_45_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[45].de),
    .d      (hw2reg.gpio_out[45].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[45].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_45_qs)
  );


  // F[gpio_out_46]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_46_we),
    .wd     (gpio_out_1_gpio_out_46_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[46].de),
    .d      (hw2reg.gpio_out[46].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[46].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_46_qs)
  );


  // F[gpio_out_47]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_47_we),
    .wd     (gpio_out_1_gpio_out_47_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[47].de),
    .d      (hw2reg.gpio_out[47].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[47].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_47_qs)
  );


  // F[gpio_out_48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_48_we),
    .wd     (gpio_out_1_gpio_out_48_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[48].de),
    .d      (hw2reg.gpio_out[48].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[48].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_48_qs)
  );


  // F[gpio_out_49]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_49_we),
    .wd     (gpio_out_1_gpio_out_49_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[49].de),
    .d      (hw2reg.gpio_out[49].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[49].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_49_qs)
  );


  // F[gpio_out_50]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_50_we),
    .wd     (gpio_out_1_gpio_out_50_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[50].de),
    .d      (hw2reg.gpio_out[50].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[50].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_50_qs)
  );


  // F[gpio_out_51]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_51_we),
    .wd     (gpio_out_1_gpio_out_51_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[51].de),
    .d      (hw2reg.gpio_out[51].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[51].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_51_qs)
  );


  // F[gpio_out_52]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_52_we),
    .wd     (gpio_out_1_gpio_out_52_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[52].de),
    .d      (hw2reg.gpio_out[52].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[52].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_52_qs)
  );


  // F[gpio_out_53]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_53_we),
    .wd     (gpio_out_1_gpio_out_53_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[53].de),
    .d      (hw2reg.gpio_out[53].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[53].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_53_qs)
  );


  // F[gpio_out_54]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_54_we),
    .wd     (gpio_out_1_gpio_out_54_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[54].de),
    .d      (hw2reg.gpio_out[54].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[54].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_54_qs)
  );


  // F[gpio_out_55]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gpio_out_1_gpio_out_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_gpio_out_55_we),
    .wd     (gpio_out_1_gpio_out_55_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[55].de),
    .d      (hw2reg.gpio_out[55].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[55].q ),

    // to register interface (read)
    .qs     (gpio_out_1_gpio_out_55_qs)
  );




  // Subregister 0 of Multireg gpio_set
  // R[gpio_set_0]: V(True)

  // F[gpio_set_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_0 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_0_we),
    .wd     (gpio_set_0_gpio_set_0_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[0].qe),
    .q      (reg2hw.gpio_set[0].q ),
    .qs     ()
  );


  // F[gpio_set_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_1 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_1_we),
    .wd     (gpio_set_0_gpio_set_1_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[1].qe),
    .q      (reg2hw.gpio_set[1].q ),
    .qs     ()
  );


  // F[gpio_set_2]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_2 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_2_we),
    .wd     (gpio_set_0_gpio_set_2_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[2].qe),
    .q      (reg2hw.gpio_set[2].q ),
    .qs     ()
  );


  // F[gpio_set_3]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_3 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_3_we),
    .wd     (gpio_set_0_gpio_set_3_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[3].qe),
    .q      (reg2hw.gpio_set[3].q ),
    .qs     ()
  );


  // F[gpio_set_4]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_4 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_4_we),
    .wd     (gpio_set_0_gpio_set_4_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[4].qe),
    .q      (reg2hw.gpio_set[4].q ),
    .qs     ()
  );


  // F[gpio_set_5]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_5 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_5_we),
    .wd     (gpio_set_0_gpio_set_5_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[5].qe),
    .q      (reg2hw.gpio_set[5].q ),
    .qs     ()
  );


  // F[gpio_set_6]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_6 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_6_we),
    .wd     (gpio_set_0_gpio_set_6_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[6].qe),
    .q      (reg2hw.gpio_set[6].q ),
    .qs     ()
  );


  // F[gpio_set_7]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_7 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_7_we),
    .wd     (gpio_set_0_gpio_set_7_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[7].qe),
    .q      (reg2hw.gpio_set[7].q ),
    .qs     ()
  );


  // F[gpio_set_8]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_8 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_8_we),
    .wd     (gpio_set_0_gpio_set_8_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[8].qe),
    .q      (reg2hw.gpio_set[8].q ),
    .qs     ()
  );


  // F[gpio_set_9]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_9 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_9_we),
    .wd     (gpio_set_0_gpio_set_9_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[9].qe),
    .q      (reg2hw.gpio_set[9].q ),
    .qs     ()
  );


  // F[gpio_set_10]: 10:10
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_10 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_10_we),
    .wd     (gpio_set_0_gpio_set_10_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[10].qe),
    .q      (reg2hw.gpio_set[10].q ),
    .qs     ()
  );


  // F[gpio_set_11]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_11 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_11_we),
    .wd     (gpio_set_0_gpio_set_11_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[11].qe),
    .q      (reg2hw.gpio_set[11].q ),
    .qs     ()
  );


  // F[gpio_set_12]: 12:12
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_12 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_12_we),
    .wd     (gpio_set_0_gpio_set_12_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[12].qe),
    .q      (reg2hw.gpio_set[12].q ),
    .qs     ()
  );


  // F[gpio_set_13]: 13:13
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_13 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_13_we),
    .wd     (gpio_set_0_gpio_set_13_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[13].qe),
    .q      (reg2hw.gpio_set[13].q ),
    .qs     ()
  );


  // F[gpio_set_14]: 14:14
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_14 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_14_we),
    .wd     (gpio_set_0_gpio_set_14_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[14].qe),
    .q      (reg2hw.gpio_set[14].q ),
    .qs     ()
  );


  // F[gpio_set_15]: 15:15
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_15 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_15_we),
    .wd     (gpio_set_0_gpio_set_15_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[15].qe),
    .q      (reg2hw.gpio_set[15].q ),
    .qs     ()
  );


  // F[gpio_set_16]: 16:16
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_16 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_16_we),
    .wd     (gpio_set_0_gpio_set_16_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[16].qe),
    .q      (reg2hw.gpio_set[16].q ),
    .qs     ()
  );


  // F[gpio_set_17]: 17:17
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_17 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_17_we),
    .wd     (gpio_set_0_gpio_set_17_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[17].qe),
    .q      (reg2hw.gpio_set[17].q ),
    .qs     ()
  );


  // F[gpio_set_18]: 18:18
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_18 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_18_we),
    .wd     (gpio_set_0_gpio_set_18_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[18].qe),
    .q      (reg2hw.gpio_set[18].q ),
    .qs     ()
  );


  // F[gpio_set_19]: 19:19
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_19 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_19_we),
    .wd     (gpio_set_0_gpio_set_19_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[19].qe),
    .q      (reg2hw.gpio_set[19].q ),
    .qs     ()
  );


  // F[gpio_set_20]: 20:20
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_20 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_20_we),
    .wd     (gpio_set_0_gpio_set_20_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[20].qe),
    .q      (reg2hw.gpio_set[20].q ),
    .qs     ()
  );


  // F[gpio_set_21]: 21:21
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_21 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_21_we),
    .wd     (gpio_set_0_gpio_set_21_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[21].qe),
    .q      (reg2hw.gpio_set[21].q ),
    .qs     ()
  );


  // F[gpio_set_22]: 22:22
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_22 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_22_we),
    .wd     (gpio_set_0_gpio_set_22_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[22].qe),
    .q      (reg2hw.gpio_set[22].q ),
    .qs     ()
  );


  // F[gpio_set_23]: 23:23
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_23 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_23_we),
    .wd     (gpio_set_0_gpio_set_23_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[23].qe),
    .q      (reg2hw.gpio_set[23].q ),
    .qs     ()
  );


  // F[gpio_set_24]: 24:24
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_24 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_24_we),
    .wd     (gpio_set_0_gpio_set_24_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[24].qe),
    .q      (reg2hw.gpio_set[24].q ),
    .qs     ()
  );


  // F[gpio_set_25]: 25:25
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_25 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_25_we),
    .wd     (gpio_set_0_gpio_set_25_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[25].qe),
    .q      (reg2hw.gpio_set[25].q ),
    .qs     ()
  );


  // F[gpio_set_26]: 26:26
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_26 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_26_we),
    .wd     (gpio_set_0_gpio_set_26_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[26].qe),
    .q      (reg2hw.gpio_set[26].q ),
    .qs     ()
  );


  // F[gpio_set_27]: 27:27
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_27 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_27_we),
    .wd     (gpio_set_0_gpio_set_27_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[27].qe),
    .q      (reg2hw.gpio_set[27].q ),
    .qs     ()
  );


  // F[gpio_set_28]: 28:28
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_28 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_28_we),
    .wd     (gpio_set_0_gpio_set_28_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[28].qe),
    .q      (reg2hw.gpio_set[28].q ),
    .qs     ()
  );


  // F[gpio_set_29]: 29:29
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_29 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_29_we),
    .wd     (gpio_set_0_gpio_set_29_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[29].qe),
    .q      (reg2hw.gpio_set[29].q ),
    .qs     ()
  );


  // F[gpio_set_30]: 30:30
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_30 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_30_we),
    .wd     (gpio_set_0_gpio_set_30_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[30].qe),
    .q      (reg2hw.gpio_set[30].q ),
    .qs     ()
  );


  // F[gpio_set_31]: 31:31
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_0_gpio_set_31 (
    .re     (1'b0),
    .we     (gpio_set_0_gpio_set_31_we),
    .wd     (gpio_set_0_gpio_set_31_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[31].qe),
    .q      (reg2hw.gpio_set[31].q ),
    .qs     ()
  );


  // Subregister 32 of Multireg gpio_set
  // R[gpio_set_1]: V(True)

  // F[gpio_set_32]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_32 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_32_we),
    .wd     (gpio_set_1_gpio_set_32_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[32].qe),
    .q      (reg2hw.gpio_set[32].q ),
    .qs     ()
  );


  // F[gpio_set_33]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_33 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_33_we),
    .wd     (gpio_set_1_gpio_set_33_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[33].qe),
    .q      (reg2hw.gpio_set[33].q ),
    .qs     ()
  );


  // F[gpio_set_34]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_34 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_34_we),
    .wd     (gpio_set_1_gpio_set_34_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[34].qe),
    .q      (reg2hw.gpio_set[34].q ),
    .qs     ()
  );


  // F[gpio_set_35]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_35 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_35_we),
    .wd     (gpio_set_1_gpio_set_35_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[35].qe),
    .q      (reg2hw.gpio_set[35].q ),
    .qs     ()
  );


  // F[gpio_set_36]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_36 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_36_we),
    .wd     (gpio_set_1_gpio_set_36_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[36].qe),
    .q      (reg2hw.gpio_set[36].q ),
    .qs     ()
  );


  // F[gpio_set_37]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_37 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_37_we),
    .wd     (gpio_set_1_gpio_set_37_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[37].qe),
    .q      (reg2hw.gpio_set[37].q ),
    .qs     ()
  );


  // F[gpio_set_38]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_38 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_38_we),
    .wd     (gpio_set_1_gpio_set_38_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[38].qe),
    .q      (reg2hw.gpio_set[38].q ),
    .qs     ()
  );


  // F[gpio_set_39]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_39 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_39_we),
    .wd     (gpio_set_1_gpio_set_39_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[39].qe),
    .q      (reg2hw.gpio_set[39].q ),
    .qs     ()
  );


  // F[gpio_set_40]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_40 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_40_we),
    .wd     (gpio_set_1_gpio_set_40_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[40].qe),
    .q      (reg2hw.gpio_set[40].q ),
    .qs     ()
  );


  // F[gpio_set_41]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_41 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_41_we),
    .wd     (gpio_set_1_gpio_set_41_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[41].qe),
    .q      (reg2hw.gpio_set[41].q ),
    .qs     ()
  );


  // F[gpio_set_42]: 10:10
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_42 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_42_we),
    .wd     (gpio_set_1_gpio_set_42_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[42].qe),
    .q      (reg2hw.gpio_set[42].q ),
    .qs     ()
  );


  // F[gpio_set_43]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_43 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_43_we),
    .wd     (gpio_set_1_gpio_set_43_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[43].qe),
    .q      (reg2hw.gpio_set[43].q ),
    .qs     ()
  );


  // F[gpio_set_44]: 12:12
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_44 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_44_we),
    .wd     (gpio_set_1_gpio_set_44_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[44].qe),
    .q      (reg2hw.gpio_set[44].q ),
    .qs     ()
  );


  // F[gpio_set_45]: 13:13
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_45 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_45_we),
    .wd     (gpio_set_1_gpio_set_45_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[45].qe),
    .q      (reg2hw.gpio_set[45].q ),
    .qs     ()
  );


  // F[gpio_set_46]: 14:14
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_46 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_46_we),
    .wd     (gpio_set_1_gpio_set_46_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[46].qe),
    .q      (reg2hw.gpio_set[46].q ),
    .qs     ()
  );


  // F[gpio_set_47]: 15:15
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_47 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_47_we),
    .wd     (gpio_set_1_gpio_set_47_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[47].qe),
    .q      (reg2hw.gpio_set[47].q ),
    .qs     ()
  );


  // F[gpio_set_48]: 16:16
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_48 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_48_we),
    .wd     (gpio_set_1_gpio_set_48_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[48].qe),
    .q      (reg2hw.gpio_set[48].q ),
    .qs     ()
  );


  // F[gpio_set_49]: 17:17
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_49 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_49_we),
    .wd     (gpio_set_1_gpio_set_49_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[49].qe),
    .q      (reg2hw.gpio_set[49].q ),
    .qs     ()
  );


  // F[gpio_set_50]: 18:18
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_50 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_50_we),
    .wd     (gpio_set_1_gpio_set_50_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[50].qe),
    .q      (reg2hw.gpio_set[50].q ),
    .qs     ()
  );


  // F[gpio_set_51]: 19:19
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_51 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_51_we),
    .wd     (gpio_set_1_gpio_set_51_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[51].qe),
    .q      (reg2hw.gpio_set[51].q ),
    .qs     ()
  );


  // F[gpio_set_52]: 20:20
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_52 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_52_we),
    .wd     (gpio_set_1_gpio_set_52_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[52].qe),
    .q      (reg2hw.gpio_set[52].q ),
    .qs     ()
  );


  // F[gpio_set_53]: 21:21
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_53 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_53_we),
    .wd     (gpio_set_1_gpio_set_53_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[53].qe),
    .q      (reg2hw.gpio_set[53].q ),
    .qs     ()
  );


  // F[gpio_set_54]: 22:22
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_54 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_54_we),
    .wd     (gpio_set_1_gpio_set_54_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[54].qe),
    .q      (reg2hw.gpio_set[54].q ),
    .qs     ()
  );


  // F[gpio_set_55]: 23:23
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_set_1_gpio_set_55 (
    .re     (1'b0),
    .we     (gpio_set_1_gpio_set_55_we),
    .wd     (gpio_set_1_gpio_set_55_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[55].qe),
    .q      (reg2hw.gpio_set[55].q ),
    .qs     ()
  );




  // Subregister 0 of Multireg gpio_clear
  // R[gpio_clear_0]: V(True)

  // F[gpio_clear_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_0 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_0_we),
    .wd     (gpio_clear_0_gpio_clear_0_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[0].qe),
    .q      (reg2hw.gpio_clear[0].q ),
    .qs     ()
  );


  // F[gpio_clear_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_1 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_1_we),
    .wd     (gpio_clear_0_gpio_clear_1_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[1].qe),
    .q      (reg2hw.gpio_clear[1].q ),
    .qs     ()
  );


  // F[gpio_clear_2]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_2 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_2_we),
    .wd     (gpio_clear_0_gpio_clear_2_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[2].qe),
    .q      (reg2hw.gpio_clear[2].q ),
    .qs     ()
  );


  // F[gpio_clear_3]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_3 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_3_we),
    .wd     (gpio_clear_0_gpio_clear_3_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[3].qe),
    .q      (reg2hw.gpio_clear[3].q ),
    .qs     ()
  );


  // F[gpio_clear_4]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_4 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_4_we),
    .wd     (gpio_clear_0_gpio_clear_4_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[4].qe),
    .q      (reg2hw.gpio_clear[4].q ),
    .qs     ()
  );


  // F[gpio_clear_5]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_5 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_5_we),
    .wd     (gpio_clear_0_gpio_clear_5_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[5].qe),
    .q      (reg2hw.gpio_clear[5].q ),
    .qs     ()
  );


  // F[gpio_clear_6]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_6 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_6_we),
    .wd     (gpio_clear_0_gpio_clear_6_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[6].qe),
    .q      (reg2hw.gpio_clear[6].q ),
    .qs     ()
  );


  // F[gpio_clear_7]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_7 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_7_we),
    .wd     (gpio_clear_0_gpio_clear_7_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[7].qe),
    .q      (reg2hw.gpio_clear[7].q ),
    .qs     ()
  );


  // F[gpio_clear_8]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_8 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_8_we),
    .wd     (gpio_clear_0_gpio_clear_8_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[8].qe),
    .q      (reg2hw.gpio_clear[8].q ),
    .qs     ()
  );


  // F[gpio_clear_9]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_9 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_9_we),
    .wd     (gpio_clear_0_gpio_clear_9_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[9].qe),
    .q      (reg2hw.gpio_clear[9].q ),
    .qs     ()
  );


  // F[gpio_clear_10]: 10:10
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_10 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_10_we),
    .wd     (gpio_clear_0_gpio_clear_10_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[10].qe),
    .q      (reg2hw.gpio_clear[10].q ),
    .qs     ()
  );


  // F[gpio_clear_11]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_11 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_11_we),
    .wd     (gpio_clear_0_gpio_clear_11_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[11].qe),
    .q      (reg2hw.gpio_clear[11].q ),
    .qs     ()
  );


  // F[gpio_clear_12]: 12:12
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_12 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_12_we),
    .wd     (gpio_clear_0_gpio_clear_12_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[12].qe),
    .q      (reg2hw.gpio_clear[12].q ),
    .qs     ()
  );


  // F[gpio_clear_13]: 13:13
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_13 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_13_we),
    .wd     (gpio_clear_0_gpio_clear_13_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[13].qe),
    .q      (reg2hw.gpio_clear[13].q ),
    .qs     ()
  );


  // F[gpio_clear_14]: 14:14
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_14 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_14_we),
    .wd     (gpio_clear_0_gpio_clear_14_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[14].qe),
    .q      (reg2hw.gpio_clear[14].q ),
    .qs     ()
  );


  // F[gpio_clear_15]: 15:15
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_15 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_15_we),
    .wd     (gpio_clear_0_gpio_clear_15_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[15].qe),
    .q      (reg2hw.gpio_clear[15].q ),
    .qs     ()
  );


  // F[gpio_clear_16]: 16:16
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_16 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_16_we),
    .wd     (gpio_clear_0_gpio_clear_16_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[16].qe),
    .q      (reg2hw.gpio_clear[16].q ),
    .qs     ()
  );


  // F[gpio_clear_17]: 17:17
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_17 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_17_we),
    .wd     (gpio_clear_0_gpio_clear_17_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[17].qe),
    .q      (reg2hw.gpio_clear[17].q ),
    .qs     ()
  );


  // F[gpio_clear_18]: 18:18
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_18 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_18_we),
    .wd     (gpio_clear_0_gpio_clear_18_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[18].qe),
    .q      (reg2hw.gpio_clear[18].q ),
    .qs     ()
  );


  // F[gpio_clear_19]: 19:19
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_19 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_19_we),
    .wd     (gpio_clear_0_gpio_clear_19_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[19].qe),
    .q      (reg2hw.gpio_clear[19].q ),
    .qs     ()
  );


  // F[gpio_clear_20]: 20:20
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_20 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_20_we),
    .wd     (gpio_clear_0_gpio_clear_20_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[20].qe),
    .q      (reg2hw.gpio_clear[20].q ),
    .qs     ()
  );


  // F[gpio_clear_21]: 21:21
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_21 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_21_we),
    .wd     (gpio_clear_0_gpio_clear_21_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[21].qe),
    .q      (reg2hw.gpio_clear[21].q ),
    .qs     ()
  );


  // F[gpio_clear_22]: 22:22
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_22 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_22_we),
    .wd     (gpio_clear_0_gpio_clear_22_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[22].qe),
    .q      (reg2hw.gpio_clear[22].q ),
    .qs     ()
  );


  // F[gpio_clear_23]: 23:23
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_23 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_23_we),
    .wd     (gpio_clear_0_gpio_clear_23_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[23].qe),
    .q      (reg2hw.gpio_clear[23].q ),
    .qs     ()
  );


  // F[gpio_clear_24]: 24:24
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_24 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_24_we),
    .wd     (gpio_clear_0_gpio_clear_24_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[24].qe),
    .q      (reg2hw.gpio_clear[24].q ),
    .qs     ()
  );


  // F[gpio_clear_25]: 25:25
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_25 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_25_we),
    .wd     (gpio_clear_0_gpio_clear_25_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[25].qe),
    .q      (reg2hw.gpio_clear[25].q ),
    .qs     ()
  );


  // F[gpio_clear_26]: 26:26
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_26 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_26_we),
    .wd     (gpio_clear_0_gpio_clear_26_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[26].qe),
    .q      (reg2hw.gpio_clear[26].q ),
    .qs     ()
  );


  // F[gpio_clear_27]: 27:27
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_27 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_27_we),
    .wd     (gpio_clear_0_gpio_clear_27_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[27].qe),
    .q      (reg2hw.gpio_clear[27].q ),
    .qs     ()
  );


  // F[gpio_clear_28]: 28:28
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_28 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_28_we),
    .wd     (gpio_clear_0_gpio_clear_28_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[28].qe),
    .q      (reg2hw.gpio_clear[28].q ),
    .qs     ()
  );


  // F[gpio_clear_29]: 29:29
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_29 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_29_we),
    .wd     (gpio_clear_0_gpio_clear_29_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[29].qe),
    .q      (reg2hw.gpio_clear[29].q ),
    .qs     ()
  );


  // F[gpio_clear_30]: 30:30
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_30 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_30_we),
    .wd     (gpio_clear_0_gpio_clear_30_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[30].qe),
    .q      (reg2hw.gpio_clear[30].q ),
    .qs     ()
  );


  // F[gpio_clear_31]: 31:31
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_0_gpio_clear_31 (
    .re     (1'b0),
    .we     (gpio_clear_0_gpio_clear_31_we),
    .wd     (gpio_clear_0_gpio_clear_31_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[31].qe),
    .q      (reg2hw.gpio_clear[31].q ),
    .qs     ()
  );


  // Subregister 32 of Multireg gpio_clear
  // R[gpio_clear_1]: V(True)

  // F[gpio_clear_32]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_32 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_32_we),
    .wd     (gpio_clear_1_gpio_clear_32_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[32].qe),
    .q      (reg2hw.gpio_clear[32].q ),
    .qs     ()
  );


  // F[gpio_clear_33]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_33 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_33_we),
    .wd     (gpio_clear_1_gpio_clear_33_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[33].qe),
    .q      (reg2hw.gpio_clear[33].q ),
    .qs     ()
  );


  // F[gpio_clear_34]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_34 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_34_we),
    .wd     (gpio_clear_1_gpio_clear_34_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[34].qe),
    .q      (reg2hw.gpio_clear[34].q ),
    .qs     ()
  );


  // F[gpio_clear_35]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_35 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_35_we),
    .wd     (gpio_clear_1_gpio_clear_35_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[35].qe),
    .q      (reg2hw.gpio_clear[35].q ),
    .qs     ()
  );


  // F[gpio_clear_36]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_36 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_36_we),
    .wd     (gpio_clear_1_gpio_clear_36_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[36].qe),
    .q      (reg2hw.gpio_clear[36].q ),
    .qs     ()
  );


  // F[gpio_clear_37]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_37 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_37_we),
    .wd     (gpio_clear_1_gpio_clear_37_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[37].qe),
    .q      (reg2hw.gpio_clear[37].q ),
    .qs     ()
  );


  // F[gpio_clear_38]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_38 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_38_we),
    .wd     (gpio_clear_1_gpio_clear_38_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[38].qe),
    .q      (reg2hw.gpio_clear[38].q ),
    .qs     ()
  );


  // F[gpio_clear_39]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_39 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_39_we),
    .wd     (gpio_clear_1_gpio_clear_39_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[39].qe),
    .q      (reg2hw.gpio_clear[39].q ),
    .qs     ()
  );


  // F[gpio_clear_40]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_40 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_40_we),
    .wd     (gpio_clear_1_gpio_clear_40_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[40].qe),
    .q      (reg2hw.gpio_clear[40].q ),
    .qs     ()
  );


  // F[gpio_clear_41]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_41 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_41_we),
    .wd     (gpio_clear_1_gpio_clear_41_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[41].qe),
    .q      (reg2hw.gpio_clear[41].q ),
    .qs     ()
  );


  // F[gpio_clear_42]: 10:10
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_42 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_42_we),
    .wd     (gpio_clear_1_gpio_clear_42_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[42].qe),
    .q      (reg2hw.gpio_clear[42].q ),
    .qs     ()
  );


  // F[gpio_clear_43]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_43 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_43_we),
    .wd     (gpio_clear_1_gpio_clear_43_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[43].qe),
    .q      (reg2hw.gpio_clear[43].q ),
    .qs     ()
  );


  // F[gpio_clear_44]: 12:12
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_44 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_44_we),
    .wd     (gpio_clear_1_gpio_clear_44_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[44].qe),
    .q      (reg2hw.gpio_clear[44].q ),
    .qs     ()
  );


  // F[gpio_clear_45]: 13:13
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_45 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_45_we),
    .wd     (gpio_clear_1_gpio_clear_45_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[45].qe),
    .q      (reg2hw.gpio_clear[45].q ),
    .qs     ()
  );


  // F[gpio_clear_46]: 14:14
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_46 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_46_we),
    .wd     (gpio_clear_1_gpio_clear_46_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[46].qe),
    .q      (reg2hw.gpio_clear[46].q ),
    .qs     ()
  );


  // F[gpio_clear_47]: 15:15
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_47 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_47_we),
    .wd     (gpio_clear_1_gpio_clear_47_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[47].qe),
    .q      (reg2hw.gpio_clear[47].q ),
    .qs     ()
  );


  // F[gpio_clear_48]: 16:16
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_48 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_48_we),
    .wd     (gpio_clear_1_gpio_clear_48_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[48].qe),
    .q      (reg2hw.gpio_clear[48].q ),
    .qs     ()
  );


  // F[gpio_clear_49]: 17:17
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_49 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_49_we),
    .wd     (gpio_clear_1_gpio_clear_49_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[49].qe),
    .q      (reg2hw.gpio_clear[49].q ),
    .qs     ()
  );


  // F[gpio_clear_50]: 18:18
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_50 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_50_we),
    .wd     (gpio_clear_1_gpio_clear_50_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[50].qe),
    .q      (reg2hw.gpio_clear[50].q ),
    .qs     ()
  );


  // F[gpio_clear_51]: 19:19
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_51 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_51_we),
    .wd     (gpio_clear_1_gpio_clear_51_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[51].qe),
    .q      (reg2hw.gpio_clear[51].q ),
    .qs     ()
  );


  // F[gpio_clear_52]: 20:20
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_52 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_52_we),
    .wd     (gpio_clear_1_gpio_clear_52_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[52].qe),
    .q      (reg2hw.gpio_clear[52].q ),
    .qs     ()
  );


  // F[gpio_clear_53]: 21:21
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_53 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_53_we),
    .wd     (gpio_clear_1_gpio_clear_53_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[53].qe),
    .q      (reg2hw.gpio_clear[53].q ),
    .qs     ()
  );


  // F[gpio_clear_54]: 22:22
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_54 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_54_we),
    .wd     (gpio_clear_1_gpio_clear_54_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[54].qe),
    .q      (reg2hw.gpio_clear[54].q ),
    .qs     ()
  );


  // F[gpio_clear_55]: 23:23
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_clear_1_gpio_clear_55 (
    .re     (1'b0),
    .we     (gpio_clear_1_gpio_clear_55_we),
    .wd     (gpio_clear_1_gpio_clear_55_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[55].qe),
    .q      (reg2hw.gpio_clear[55].q ),
    .qs     ()
  );




  // Subregister 0 of Multireg gpio_toggle
  // R[gpio_toggle_0]: V(True)

  // F[gpio_toggle_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_0 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_0_we),
    .wd     (gpio_toggle_0_gpio_toggle_0_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[0].qe),
    .q      (reg2hw.gpio_toggle[0].q ),
    .qs     ()
  );


  // F[gpio_toggle_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_1 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_1_we),
    .wd     (gpio_toggle_0_gpio_toggle_1_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[1].qe),
    .q      (reg2hw.gpio_toggle[1].q ),
    .qs     ()
  );


  // F[gpio_toggle_2]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_2 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_2_we),
    .wd     (gpio_toggle_0_gpio_toggle_2_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[2].qe),
    .q      (reg2hw.gpio_toggle[2].q ),
    .qs     ()
  );


  // F[gpio_toggle_3]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_3 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_3_we),
    .wd     (gpio_toggle_0_gpio_toggle_3_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[3].qe),
    .q      (reg2hw.gpio_toggle[3].q ),
    .qs     ()
  );


  // F[gpio_toggle_4]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_4 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_4_we),
    .wd     (gpio_toggle_0_gpio_toggle_4_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[4].qe),
    .q      (reg2hw.gpio_toggle[4].q ),
    .qs     ()
  );


  // F[gpio_toggle_5]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_5 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_5_we),
    .wd     (gpio_toggle_0_gpio_toggle_5_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[5].qe),
    .q      (reg2hw.gpio_toggle[5].q ),
    .qs     ()
  );


  // F[gpio_toggle_6]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_6 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_6_we),
    .wd     (gpio_toggle_0_gpio_toggle_6_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[6].qe),
    .q      (reg2hw.gpio_toggle[6].q ),
    .qs     ()
  );


  // F[gpio_toggle_7]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_7 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_7_we),
    .wd     (gpio_toggle_0_gpio_toggle_7_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[7].qe),
    .q      (reg2hw.gpio_toggle[7].q ),
    .qs     ()
  );


  // F[gpio_toggle_8]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_8 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_8_we),
    .wd     (gpio_toggle_0_gpio_toggle_8_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[8].qe),
    .q      (reg2hw.gpio_toggle[8].q ),
    .qs     ()
  );


  // F[gpio_toggle_9]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_9 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_9_we),
    .wd     (gpio_toggle_0_gpio_toggle_9_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[9].qe),
    .q      (reg2hw.gpio_toggle[9].q ),
    .qs     ()
  );


  // F[gpio_toggle_10]: 10:10
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_10 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_10_we),
    .wd     (gpio_toggle_0_gpio_toggle_10_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[10].qe),
    .q      (reg2hw.gpio_toggle[10].q ),
    .qs     ()
  );


  // F[gpio_toggle_11]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_11 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_11_we),
    .wd     (gpio_toggle_0_gpio_toggle_11_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[11].qe),
    .q      (reg2hw.gpio_toggle[11].q ),
    .qs     ()
  );


  // F[gpio_toggle_12]: 12:12
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_12 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_12_we),
    .wd     (gpio_toggle_0_gpio_toggle_12_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[12].qe),
    .q      (reg2hw.gpio_toggle[12].q ),
    .qs     ()
  );


  // F[gpio_toggle_13]: 13:13
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_13 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_13_we),
    .wd     (gpio_toggle_0_gpio_toggle_13_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[13].qe),
    .q      (reg2hw.gpio_toggle[13].q ),
    .qs     ()
  );


  // F[gpio_toggle_14]: 14:14
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_14 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_14_we),
    .wd     (gpio_toggle_0_gpio_toggle_14_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[14].qe),
    .q      (reg2hw.gpio_toggle[14].q ),
    .qs     ()
  );


  // F[gpio_toggle_15]: 15:15
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_15 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_15_we),
    .wd     (gpio_toggle_0_gpio_toggle_15_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[15].qe),
    .q      (reg2hw.gpio_toggle[15].q ),
    .qs     ()
  );


  // F[gpio_toggle_16]: 16:16
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_16 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_16_we),
    .wd     (gpio_toggle_0_gpio_toggle_16_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[16].qe),
    .q      (reg2hw.gpio_toggle[16].q ),
    .qs     ()
  );


  // F[gpio_toggle_17]: 17:17
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_17 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_17_we),
    .wd     (gpio_toggle_0_gpio_toggle_17_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[17].qe),
    .q      (reg2hw.gpio_toggle[17].q ),
    .qs     ()
  );


  // F[gpio_toggle_18]: 18:18
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_18 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_18_we),
    .wd     (gpio_toggle_0_gpio_toggle_18_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[18].qe),
    .q      (reg2hw.gpio_toggle[18].q ),
    .qs     ()
  );


  // F[gpio_toggle_19]: 19:19
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_19 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_19_we),
    .wd     (gpio_toggle_0_gpio_toggle_19_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[19].qe),
    .q      (reg2hw.gpio_toggle[19].q ),
    .qs     ()
  );


  // F[gpio_toggle_20]: 20:20
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_20 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_20_we),
    .wd     (gpio_toggle_0_gpio_toggle_20_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[20].qe),
    .q      (reg2hw.gpio_toggle[20].q ),
    .qs     ()
  );


  // F[gpio_toggle_21]: 21:21
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_21 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_21_we),
    .wd     (gpio_toggle_0_gpio_toggle_21_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[21].qe),
    .q      (reg2hw.gpio_toggle[21].q ),
    .qs     ()
  );


  // F[gpio_toggle_22]: 22:22
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_22 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_22_we),
    .wd     (gpio_toggle_0_gpio_toggle_22_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[22].qe),
    .q      (reg2hw.gpio_toggle[22].q ),
    .qs     ()
  );


  // F[gpio_toggle_23]: 23:23
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_23 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_23_we),
    .wd     (gpio_toggle_0_gpio_toggle_23_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[23].qe),
    .q      (reg2hw.gpio_toggle[23].q ),
    .qs     ()
  );


  // F[gpio_toggle_24]: 24:24
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_24 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_24_we),
    .wd     (gpio_toggle_0_gpio_toggle_24_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[24].qe),
    .q      (reg2hw.gpio_toggle[24].q ),
    .qs     ()
  );


  // F[gpio_toggle_25]: 25:25
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_25 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_25_we),
    .wd     (gpio_toggle_0_gpio_toggle_25_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[25].qe),
    .q      (reg2hw.gpio_toggle[25].q ),
    .qs     ()
  );


  // F[gpio_toggle_26]: 26:26
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_26 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_26_we),
    .wd     (gpio_toggle_0_gpio_toggle_26_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[26].qe),
    .q      (reg2hw.gpio_toggle[26].q ),
    .qs     ()
  );


  // F[gpio_toggle_27]: 27:27
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_27 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_27_we),
    .wd     (gpio_toggle_0_gpio_toggle_27_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[27].qe),
    .q      (reg2hw.gpio_toggle[27].q ),
    .qs     ()
  );


  // F[gpio_toggle_28]: 28:28
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_28 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_28_we),
    .wd     (gpio_toggle_0_gpio_toggle_28_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[28].qe),
    .q      (reg2hw.gpio_toggle[28].q ),
    .qs     ()
  );


  // F[gpio_toggle_29]: 29:29
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_29 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_29_we),
    .wd     (gpio_toggle_0_gpio_toggle_29_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[29].qe),
    .q      (reg2hw.gpio_toggle[29].q ),
    .qs     ()
  );


  // F[gpio_toggle_30]: 30:30
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_30 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_30_we),
    .wd     (gpio_toggle_0_gpio_toggle_30_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[30].qe),
    .q      (reg2hw.gpio_toggle[30].q ),
    .qs     ()
  );


  // F[gpio_toggle_31]: 31:31
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_0_gpio_toggle_31 (
    .re     (1'b0),
    .we     (gpio_toggle_0_gpio_toggle_31_we),
    .wd     (gpio_toggle_0_gpio_toggle_31_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[31].qe),
    .q      (reg2hw.gpio_toggle[31].q ),
    .qs     ()
  );


  // Subregister 32 of Multireg gpio_toggle
  // R[gpio_toggle_1]: V(True)

  // F[gpio_toggle_32]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_32 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_32_we),
    .wd     (gpio_toggle_1_gpio_toggle_32_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[32].qe),
    .q      (reg2hw.gpio_toggle[32].q ),
    .qs     ()
  );


  // F[gpio_toggle_33]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_33 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_33_we),
    .wd     (gpio_toggle_1_gpio_toggle_33_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[33].qe),
    .q      (reg2hw.gpio_toggle[33].q ),
    .qs     ()
  );


  // F[gpio_toggle_34]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_34 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_34_we),
    .wd     (gpio_toggle_1_gpio_toggle_34_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[34].qe),
    .q      (reg2hw.gpio_toggle[34].q ),
    .qs     ()
  );


  // F[gpio_toggle_35]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_35 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_35_we),
    .wd     (gpio_toggle_1_gpio_toggle_35_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[35].qe),
    .q      (reg2hw.gpio_toggle[35].q ),
    .qs     ()
  );


  // F[gpio_toggle_36]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_36 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_36_we),
    .wd     (gpio_toggle_1_gpio_toggle_36_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[36].qe),
    .q      (reg2hw.gpio_toggle[36].q ),
    .qs     ()
  );


  // F[gpio_toggle_37]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_37 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_37_we),
    .wd     (gpio_toggle_1_gpio_toggle_37_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[37].qe),
    .q      (reg2hw.gpio_toggle[37].q ),
    .qs     ()
  );


  // F[gpio_toggle_38]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_38 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_38_we),
    .wd     (gpio_toggle_1_gpio_toggle_38_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[38].qe),
    .q      (reg2hw.gpio_toggle[38].q ),
    .qs     ()
  );


  // F[gpio_toggle_39]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_39 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_39_we),
    .wd     (gpio_toggle_1_gpio_toggle_39_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[39].qe),
    .q      (reg2hw.gpio_toggle[39].q ),
    .qs     ()
  );


  // F[gpio_toggle_40]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_40 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_40_we),
    .wd     (gpio_toggle_1_gpio_toggle_40_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[40].qe),
    .q      (reg2hw.gpio_toggle[40].q ),
    .qs     ()
  );


  // F[gpio_toggle_41]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_41 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_41_we),
    .wd     (gpio_toggle_1_gpio_toggle_41_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[41].qe),
    .q      (reg2hw.gpio_toggle[41].q ),
    .qs     ()
  );


  // F[gpio_toggle_42]: 10:10
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_42 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_42_we),
    .wd     (gpio_toggle_1_gpio_toggle_42_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[42].qe),
    .q      (reg2hw.gpio_toggle[42].q ),
    .qs     ()
  );


  // F[gpio_toggle_43]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_43 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_43_we),
    .wd     (gpio_toggle_1_gpio_toggle_43_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[43].qe),
    .q      (reg2hw.gpio_toggle[43].q ),
    .qs     ()
  );


  // F[gpio_toggle_44]: 12:12
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_44 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_44_we),
    .wd     (gpio_toggle_1_gpio_toggle_44_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[44].qe),
    .q      (reg2hw.gpio_toggle[44].q ),
    .qs     ()
  );


  // F[gpio_toggle_45]: 13:13
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_45 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_45_we),
    .wd     (gpio_toggle_1_gpio_toggle_45_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[45].qe),
    .q      (reg2hw.gpio_toggle[45].q ),
    .qs     ()
  );


  // F[gpio_toggle_46]: 14:14
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_46 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_46_we),
    .wd     (gpio_toggle_1_gpio_toggle_46_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[46].qe),
    .q      (reg2hw.gpio_toggle[46].q ),
    .qs     ()
  );


  // F[gpio_toggle_47]: 15:15
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_47 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_47_we),
    .wd     (gpio_toggle_1_gpio_toggle_47_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[47].qe),
    .q      (reg2hw.gpio_toggle[47].q ),
    .qs     ()
  );


  // F[gpio_toggle_48]: 16:16
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_48 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_48_we),
    .wd     (gpio_toggle_1_gpio_toggle_48_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[48].qe),
    .q      (reg2hw.gpio_toggle[48].q ),
    .qs     ()
  );


  // F[gpio_toggle_49]: 17:17
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_49 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_49_we),
    .wd     (gpio_toggle_1_gpio_toggle_49_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[49].qe),
    .q      (reg2hw.gpio_toggle[49].q ),
    .qs     ()
  );


  // F[gpio_toggle_50]: 18:18
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_50 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_50_we),
    .wd     (gpio_toggle_1_gpio_toggle_50_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[50].qe),
    .q      (reg2hw.gpio_toggle[50].q ),
    .qs     ()
  );


  // F[gpio_toggle_51]: 19:19
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_51 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_51_we),
    .wd     (gpio_toggle_1_gpio_toggle_51_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[51].qe),
    .q      (reg2hw.gpio_toggle[51].q ),
    .qs     ()
  );


  // F[gpio_toggle_52]: 20:20
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_52 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_52_we),
    .wd     (gpio_toggle_1_gpio_toggle_52_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[52].qe),
    .q      (reg2hw.gpio_toggle[52].q ),
    .qs     ()
  );


  // F[gpio_toggle_53]: 21:21
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_53 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_53_we),
    .wd     (gpio_toggle_1_gpio_toggle_53_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[53].qe),
    .q      (reg2hw.gpio_toggle[53].q ),
    .qs     ()
  );


  // F[gpio_toggle_54]: 22:22
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_54 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_54_we),
    .wd     (gpio_toggle_1_gpio_toggle_54_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[54].qe),
    .q      (reg2hw.gpio_toggle[54].q ),
    .qs     ()
  );


  // F[gpio_toggle_55]: 23:23
  prim_subreg_ext #(
    .DW    (1)
  ) u_gpio_toggle_1_gpio_toggle_55 (
    .re     (1'b0),
    .we     (gpio_toggle_1_gpio_toggle_55_we),
    .wd     (gpio_toggle_1_gpio_toggle_55_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[55].qe),
    .q      (reg2hw.gpio_toggle[55].q ),
    .qs     ()
  );




  // Subregister 0 of Multireg intrpt_rise_en
  // R[intrpt_rise_en_0]: V(False)

  // F[intrpt_rise_en_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_0_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[0].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_0_qs)
  );


  // F[intrpt_rise_en_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_1_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[1].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_1_qs)
  );


  // F[intrpt_rise_en_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_2_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[2].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_2_qs)
  );


  // F[intrpt_rise_en_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_3_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[3].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_3_qs)
  );


  // F[intrpt_rise_en_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_4_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[4].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_4_qs)
  );


  // F[intrpt_rise_en_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_5_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[5].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_5_qs)
  );


  // F[intrpt_rise_en_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_6_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[6].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_6_qs)
  );


  // F[intrpt_rise_en_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_7_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[7].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_7_qs)
  );


  // F[intrpt_rise_en_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_8_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[8].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_8_qs)
  );


  // F[intrpt_rise_en_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_9_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[9].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_9_qs)
  );


  // F[intrpt_rise_en_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_10_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[10].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_10_qs)
  );


  // F[intrpt_rise_en_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_11_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[11].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_11_qs)
  );


  // F[intrpt_rise_en_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_12_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[12].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_12_qs)
  );


  // F[intrpt_rise_en_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_13_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[13].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_13_qs)
  );


  // F[intrpt_rise_en_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_14_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[14].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_14_qs)
  );


  // F[intrpt_rise_en_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_15_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[15].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_15_qs)
  );


  // F[intrpt_rise_en_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_16_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[16].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_16_qs)
  );


  // F[intrpt_rise_en_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_17_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[17].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_17_qs)
  );


  // F[intrpt_rise_en_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_18_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[18].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_18_qs)
  );


  // F[intrpt_rise_en_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_19_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[19].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_19_qs)
  );


  // F[intrpt_rise_en_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_20_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[20].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_20_qs)
  );


  // F[intrpt_rise_en_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_21_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[21].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_21_qs)
  );


  // F[intrpt_rise_en_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_22_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[22].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_22_qs)
  );


  // F[intrpt_rise_en_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_23_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[23].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_23_qs)
  );


  // F[intrpt_rise_en_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_24_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[24].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_24_qs)
  );


  // F[intrpt_rise_en_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_25_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[25].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_25_qs)
  );


  // F[intrpt_rise_en_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_26_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[26].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_26_qs)
  );


  // F[intrpt_rise_en_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_27_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[27].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_27_qs)
  );


  // F[intrpt_rise_en_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_28_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[28].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_28_qs)
  );


  // F[intrpt_rise_en_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_29_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[29].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_29_qs)
  );


  // F[intrpt_rise_en_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_30_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[30].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_30_qs)
  );


  // F[intrpt_rise_en_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_0_intrpt_rise_en_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_intrpt_rise_en_31_we),
    .wd     (intrpt_rise_en_0_intrpt_rise_en_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[31].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_intrpt_rise_en_31_qs)
  );


  // Subregister 32 of Multireg intrpt_rise_en
  // R[intrpt_rise_en_1]: V(False)

  // F[intrpt_rise_en_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_32_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[32].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_32_qs)
  );


  // F[intrpt_rise_en_33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_33_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[33].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_33_qs)
  );


  // F[intrpt_rise_en_34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_34_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[34].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_34_qs)
  );


  // F[intrpt_rise_en_35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_35_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[35].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_35_qs)
  );


  // F[intrpt_rise_en_36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_36_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[36].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_36_qs)
  );


  // F[intrpt_rise_en_37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_37_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[37].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_37_qs)
  );


  // F[intrpt_rise_en_38]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_38_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[38].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_38_qs)
  );


  // F[intrpt_rise_en_39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_39_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[39].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_39_qs)
  );


  // F[intrpt_rise_en_40]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_40_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[40].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_40_qs)
  );


  // F[intrpt_rise_en_41]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_41_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[41].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_41_qs)
  );


  // F[intrpt_rise_en_42]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_42_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[42].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_42_qs)
  );


  // F[intrpt_rise_en_43]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_43_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[43].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_43_qs)
  );


  // F[intrpt_rise_en_44]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_44_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[44].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_44_qs)
  );


  // F[intrpt_rise_en_45]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_45_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[45].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_45_qs)
  );


  // F[intrpt_rise_en_46]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_46_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[46].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_46_qs)
  );


  // F[intrpt_rise_en_47]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_47_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[47].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_47_qs)
  );


  // F[intrpt_rise_en_48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_48_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[48].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_48_qs)
  );


  // F[intrpt_rise_en_49]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_49_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[49].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_49_qs)
  );


  // F[intrpt_rise_en_50]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_50_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[50].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_50_qs)
  );


  // F[intrpt_rise_en_51]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_51_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[51].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_51_qs)
  );


  // F[intrpt_rise_en_52]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_52_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[52].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_52_qs)
  );


  // F[intrpt_rise_en_53]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_53_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[53].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_53_qs)
  );


  // F[intrpt_rise_en_54]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_54_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[54].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_54_qs)
  );


  // F[intrpt_rise_en_55]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_en_1_intrpt_rise_en_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_intrpt_rise_en_55_we),
    .wd     (intrpt_rise_en_1_intrpt_rise_en_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[55].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_intrpt_rise_en_55_qs)
  );




  // Subregister 0 of Multireg intrpt_fall_en
  // R[intrpt_fall_en_0]: V(False)

  // F[intrpt_fall_en_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_0_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[0].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_0_qs)
  );


  // F[intrpt_fall_en_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_1_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[1].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_1_qs)
  );


  // F[intrpt_fall_en_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_2_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[2].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_2_qs)
  );


  // F[intrpt_fall_en_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_3_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[3].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_3_qs)
  );


  // F[intrpt_fall_en_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_4_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[4].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_4_qs)
  );


  // F[intrpt_fall_en_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_5_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[5].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_5_qs)
  );


  // F[intrpt_fall_en_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_6_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[6].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_6_qs)
  );


  // F[intrpt_fall_en_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_7_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[7].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_7_qs)
  );


  // F[intrpt_fall_en_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_8_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[8].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_8_qs)
  );


  // F[intrpt_fall_en_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_9_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[9].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_9_qs)
  );


  // F[intrpt_fall_en_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_10_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[10].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_10_qs)
  );


  // F[intrpt_fall_en_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_11_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[11].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_11_qs)
  );


  // F[intrpt_fall_en_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_12_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[12].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_12_qs)
  );


  // F[intrpt_fall_en_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_13_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[13].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_13_qs)
  );


  // F[intrpt_fall_en_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_14_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[14].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_14_qs)
  );


  // F[intrpt_fall_en_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_15_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[15].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_15_qs)
  );


  // F[intrpt_fall_en_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_16_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[16].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_16_qs)
  );


  // F[intrpt_fall_en_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_17_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[17].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_17_qs)
  );


  // F[intrpt_fall_en_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_18_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[18].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_18_qs)
  );


  // F[intrpt_fall_en_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_19_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[19].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_19_qs)
  );


  // F[intrpt_fall_en_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_20_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[20].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_20_qs)
  );


  // F[intrpt_fall_en_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_21_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[21].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_21_qs)
  );


  // F[intrpt_fall_en_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_22_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[22].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_22_qs)
  );


  // F[intrpt_fall_en_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_23_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[23].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_23_qs)
  );


  // F[intrpt_fall_en_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_24_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[24].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_24_qs)
  );


  // F[intrpt_fall_en_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_25_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[25].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_25_qs)
  );


  // F[intrpt_fall_en_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_26_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[26].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_26_qs)
  );


  // F[intrpt_fall_en_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_27_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[27].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_27_qs)
  );


  // F[intrpt_fall_en_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_28_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[28].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_28_qs)
  );


  // F[intrpt_fall_en_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_29_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[29].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_29_qs)
  );


  // F[intrpt_fall_en_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_30_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[30].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_30_qs)
  );


  // F[intrpt_fall_en_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_0_intrpt_fall_en_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_intrpt_fall_en_31_we),
    .wd     (intrpt_fall_en_0_intrpt_fall_en_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[31].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_intrpt_fall_en_31_qs)
  );


  // Subregister 32 of Multireg intrpt_fall_en
  // R[intrpt_fall_en_1]: V(False)

  // F[intrpt_fall_en_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_32_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[32].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_32_qs)
  );


  // F[intrpt_fall_en_33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_33_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[33].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_33_qs)
  );


  // F[intrpt_fall_en_34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_34_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[34].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_34_qs)
  );


  // F[intrpt_fall_en_35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_35_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[35].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_35_qs)
  );


  // F[intrpt_fall_en_36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_36_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[36].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_36_qs)
  );


  // F[intrpt_fall_en_37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_37_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[37].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_37_qs)
  );


  // F[intrpt_fall_en_38]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_38_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[38].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_38_qs)
  );


  // F[intrpt_fall_en_39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_39_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[39].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_39_qs)
  );


  // F[intrpt_fall_en_40]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_40_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[40].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_40_qs)
  );


  // F[intrpt_fall_en_41]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_41_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[41].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_41_qs)
  );


  // F[intrpt_fall_en_42]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_42_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[42].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_42_qs)
  );


  // F[intrpt_fall_en_43]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_43_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[43].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_43_qs)
  );


  // F[intrpt_fall_en_44]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_44_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[44].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_44_qs)
  );


  // F[intrpt_fall_en_45]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_45_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[45].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_45_qs)
  );


  // F[intrpt_fall_en_46]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_46_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[46].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_46_qs)
  );


  // F[intrpt_fall_en_47]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_47_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[47].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_47_qs)
  );


  // F[intrpt_fall_en_48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_48_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[48].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_48_qs)
  );


  // F[intrpt_fall_en_49]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_49_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[49].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_49_qs)
  );


  // F[intrpt_fall_en_50]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_50_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[50].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_50_qs)
  );


  // F[intrpt_fall_en_51]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_51_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[51].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_51_qs)
  );


  // F[intrpt_fall_en_52]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_52_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[52].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_52_qs)
  );


  // F[intrpt_fall_en_53]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_53_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[53].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_53_qs)
  );


  // F[intrpt_fall_en_54]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_54_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[54].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_54_qs)
  );


  // F[intrpt_fall_en_55]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_en_1_intrpt_fall_en_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_intrpt_fall_en_55_we),
    .wd     (intrpt_fall_en_1_intrpt_fall_en_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[55].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_intrpt_fall_en_55_qs)
  );




  // Subregister 0 of Multireg intrpt_lvl_high_en
  // R[intrpt_lvl_high_en_0]: V(False)

  // F[intrpt_lvl_high_en_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_0_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[0].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_0_qs)
  );


  // F[intrpt_lvl_high_en_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_1_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[1].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_1_qs)
  );


  // F[intrpt_lvl_high_en_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_2_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[2].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_2_qs)
  );


  // F[intrpt_lvl_high_en_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_3_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[3].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_3_qs)
  );


  // F[intrpt_lvl_high_en_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_4_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[4].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_4_qs)
  );


  // F[intrpt_lvl_high_en_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_5_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[5].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_5_qs)
  );


  // F[intrpt_lvl_high_en_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_6_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[6].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_6_qs)
  );


  // F[intrpt_lvl_high_en_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_7_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[7].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_7_qs)
  );


  // F[intrpt_lvl_high_en_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_8_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[8].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_8_qs)
  );


  // F[intrpt_lvl_high_en_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_9_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[9].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_9_qs)
  );


  // F[intrpt_lvl_high_en_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_10_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[10].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_10_qs)
  );


  // F[intrpt_lvl_high_en_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_11_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[11].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_11_qs)
  );


  // F[intrpt_lvl_high_en_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_12_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[12].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_12_qs)
  );


  // F[intrpt_lvl_high_en_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_13_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[13].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_13_qs)
  );


  // F[intrpt_lvl_high_en_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_14_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[14].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_14_qs)
  );


  // F[intrpt_lvl_high_en_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_15_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[15].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_15_qs)
  );


  // F[intrpt_lvl_high_en_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_16_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[16].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_16_qs)
  );


  // F[intrpt_lvl_high_en_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_17_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[17].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_17_qs)
  );


  // F[intrpt_lvl_high_en_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_18_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[18].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_18_qs)
  );


  // F[intrpt_lvl_high_en_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_19_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[19].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_19_qs)
  );


  // F[intrpt_lvl_high_en_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_20_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[20].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_20_qs)
  );


  // F[intrpt_lvl_high_en_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_21_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[21].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_21_qs)
  );


  // F[intrpt_lvl_high_en_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_22_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[22].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_22_qs)
  );


  // F[intrpt_lvl_high_en_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_23_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[23].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_23_qs)
  );


  // F[intrpt_lvl_high_en_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_24_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[24].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_24_qs)
  );


  // F[intrpt_lvl_high_en_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_25_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[25].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_25_qs)
  );


  // F[intrpt_lvl_high_en_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_26_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[26].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_26_qs)
  );


  // F[intrpt_lvl_high_en_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_27_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[27].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_27_qs)
  );


  // F[intrpt_lvl_high_en_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_28_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[28].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_28_qs)
  );


  // F[intrpt_lvl_high_en_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_29_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[29].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_29_qs)
  );


  // F[intrpt_lvl_high_en_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_30_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[30].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_30_qs)
  );


  // F[intrpt_lvl_high_en_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_0_intrpt_lvl_high_en_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_31_we),
    .wd     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[31].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_0_intrpt_lvl_high_en_31_qs)
  );


  // Subregister 32 of Multireg intrpt_lvl_high_en
  // R[intrpt_lvl_high_en_1]: V(False)

  // F[intrpt_lvl_high_en_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_32_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[32].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_32_qs)
  );


  // F[intrpt_lvl_high_en_33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_33_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[33].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_33_qs)
  );


  // F[intrpt_lvl_high_en_34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_34_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[34].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_34_qs)
  );


  // F[intrpt_lvl_high_en_35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_35_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[35].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_35_qs)
  );


  // F[intrpt_lvl_high_en_36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_36_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[36].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_36_qs)
  );


  // F[intrpt_lvl_high_en_37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_37_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[37].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_37_qs)
  );


  // F[intrpt_lvl_high_en_38]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_38_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[38].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_38_qs)
  );


  // F[intrpt_lvl_high_en_39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_39_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[39].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_39_qs)
  );


  // F[intrpt_lvl_high_en_40]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_40_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[40].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_40_qs)
  );


  // F[intrpt_lvl_high_en_41]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_41_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[41].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_41_qs)
  );


  // F[intrpt_lvl_high_en_42]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_42_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[42].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_42_qs)
  );


  // F[intrpt_lvl_high_en_43]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_43_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[43].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_43_qs)
  );


  // F[intrpt_lvl_high_en_44]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_44_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[44].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_44_qs)
  );


  // F[intrpt_lvl_high_en_45]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_45_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[45].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_45_qs)
  );


  // F[intrpt_lvl_high_en_46]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_46_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[46].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_46_qs)
  );


  // F[intrpt_lvl_high_en_47]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_47_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[47].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_47_qs)
  );


  // F[intrpt_lvl_high_en_48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_48_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[48].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_48_qs)
  );


  // F[intrpt_lvl_high_en_49]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_49_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[49].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_49_qs)
  );


  // F[intrpt_lvl_high_en_50]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_50_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[50].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_50_qs)
  );


  // F[intrpt_lvl_high_en_51]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_51_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[51].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_51_qs)
  );


  // F[intrpt_lvl_high_en_52]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_52_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[52].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_52_qs)
  );


  // F[intrpt_lvl_high_en_53]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_53_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[53].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_53_qs)
  );


  // F[intrpt_lvl_high_en_54]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_54_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[54].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_54_qs)
  );


  // F[intrpt_lvl_high_en_55]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_en_1_intrpt_lvl_high_en_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_55_we),
    .wd     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_en[55].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_en_1_intrpt_lvl_high_en_55_qs)
  );




  // Subregister 0 of Multireg intrpt_lvl_low_en
  // R[intrpt_lvl_low_en_0]: V(False)

  // F[intrpt_lvl_low_en_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_0_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[0].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_0_qs)
  );


  // F[intrpt_lvl_low_en_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_1_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[1].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_1_qs)
  );


  // F[intrpt_lvl_low_en_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_2_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[2].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_2_qs)
  );


  // F[intrpt_lvl_low_en_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_3_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[3].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_3_qs)
  );


  // F[intrpt_lvl_low_en_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_4_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[4].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_4_qs)
  );


  // F[intrpt_lvl_low_en_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_5_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[5].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_5_qs)
  );


  // F[intrpt_lvl_low_en_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_6_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[6].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_6_qs)
  );


  // F[intrpt_lvl_low_en_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_7_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[7].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_7_qs)
  );


  // F[intrpt_lvl_low_en_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_8_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[8].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_8_qs)
  );


  // F[intrpt_lvl_low_en_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_9_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[9].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_9_qs)
  );


  // F[intrpt_lvl_low_en_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_10_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[10].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_10_qs)
  );


  // F[intrpt_lvl_low_en_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_11_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[11].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_11_qs)
  );


  // F[intrpt_lvl_low_en_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_12_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[12].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_12_qs)
  );


  // F[intrpt_lvl_low_en_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_13_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[13].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_13_qs)
  );


  // F[intrpt_lvl_low_en_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_14_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[14].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_14_qs)
  );


  // F[intrpt_lvl_low_en_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_15_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[15].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_15_qs)
  );


  // F[intrpt_lvl_low_en_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_16_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[16].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_16_qs)
  );


  // F[intrpt_lvl_low_en_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_17_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[17].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_17_qs)
  );


  // F[intrpt_lvl_low_en_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_18_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[18].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_18_qs)
  );


  // F[intrpt_lvl_low_en_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_19_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[19].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_19_qs)
  );


  // F[intrpt_lvl_low_en_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_20_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[20].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_20_qs)
  );


  // F[intrpt_lvl_low_en_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_21_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[21].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_21_qs)
  );


  // F[intrpt_lvl_low_en_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_22_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[22].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_22_qs)
  );


  // F[intrpt_lvl_low_en_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_23_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[23].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_23_qs)
  );


  // F[intrpt_lvl_low_en_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_24_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[24].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_24_qs)
  );


  // F[intrpt_lvl_low_en_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_25_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[25].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_25_qs)
  );


  // F[intrpt_lvl_low_en_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_26_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[26].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_26_qs)
  );


  // F[intrpt_lvl_low_en_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_27_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[27].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_27_qs)
  );


  // F[intrpt_lvl_low_en_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_28_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[28].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_28_qs)
  );


  // F[intrpt_lvl_low_en_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_29_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[29].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_29_qs)
  );


  // F[intrpt_lvl_low_en_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_30_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[30].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_30_qs)
  );


  // F[intrpt_lvl_low_en_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_0_intrpt_lvl_low_en_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_31_we),
    .wd     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[31].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_0_intrpt_lvl_low_en_31_qs)
  );


  // Subregister 32 of Multireg intrpt_lvl_low_en
  // R[intrpt_lvl_low_en_1]: V(False)

  // F[intrpt_lvl_low_en_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_32_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[32].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_32_qs)
  );


  // F[intrpt_lvl_low_en_33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_33_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[33].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_33_qs)
  );


  // F[intrpt_lvl_low_en_34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_34_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[34].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_34_qs)
  );


  // F[intrpt_lvl_low_en_35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_35_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[35].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_35_qs)
  );


  // F[intrpt_lvl_low_en_36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_36_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[36].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_36_qs)
  );


  // F[intrpt_lvl_low_en_37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_37_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[37].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_37_qs)
  );


  // F[intrpt_lvl_low_en_38]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_38_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[38].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_38_qs)
  );


  // F[intrpt_lvl_low_en_39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_39_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[39].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_39_qs)
  );


  // F[intrpt_lvl_low_en_40]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_40_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[40].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_40_qs)
  );


  // F[intrpt_lvl_low_en_41]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_41_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[41].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_41_qs)
  );


  // F[intrpt_lvl_low_en_42]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_42_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[42].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_42_qs)
  );


  // F[intrpt_lvl_low_en_43]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_43_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[43].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_43_qs)
  );


  // F[intrpt_lvl_low_en_44]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_44_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[44].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_44_qs)
  );


  // F[intrpt_lvl_low_en_45]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_45_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[45].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_45_qs)
  );


  // F[intrpt_lvl_low_en_46]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_46_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[46].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_46_qs)
  );


  // F[intrpt_lvl_low_en_47]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_47_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[47].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_47_qs)
  );


  // F[intrpt_lvl_low_en_48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_48_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[48].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_48_qs)
  );


  // F[intrpt_lvl_low_en_49]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_49_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[49].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_49_qs)
  );


  // F[intrpt_lvl_low_en_50]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_50_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[50].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_50_qs)
  );


  // F[intrpt_lvl_low_en_51]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_51_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[51].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_51_qs)
  );


  // F[intrpt_lvl_low_en_52]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_52_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[52].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_52_qs)
  );


  // F[intrpt_lvl_low_en_53]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_53_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[53].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_53_qs)
  );


  // F[intrpt_lvl_low_en_54]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_54_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[54].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_54_qs)
  );


  // F[intrpt_lvl_low_en_55]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_en_1_intrpt_lvl_low_en_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_55_we),
    .wd     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_en[55].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_en_1_intrpt_lvl_low_en_55_qs)
  );




  // Subregister 0 of Multireg intrpt_status
  // R[intrpt_status_0]: V(True)

  // F[intrpt_status_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_0 (
    .re     (intrpt_status_0_intrpt_status_0_re),
    .we     (intrpt_status_0_intrpt_status_0_we),
    .wd     (intrpt_status_0_intrpt_status_0_wd),
    .d      (hw2reg.intrpt_status[0].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[0].qe),
    .q      (reg2hw.intrpt_status[0].q ),
    .qs     (intrpt_status_0_intrpt_status_0_qs)
  );


  // F[intrpt_status_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_1 (
    .re     (intrpt_status_0_intrpt_status_1_re),
    .we     (intrpt_status_0_intrpt_status_1_we),
    .wd     (intrpt_status_0_intrpt_status_1_wd),
    .d      (hw2reg.intrpt_status[1].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[1].qe),
    .q      (reg2hw.intrpt_status[1].q ),
    .qs     (intrpt_status_0_intrpt_status_1_qs)
  );


  // F[intrpt_status_2]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_2 (
    .re     (intrpt_status_0_intrpt_status_2_re),
    .we     (intrpt_status_0_intrpt_status_2_we),
    .wd     (intrpt_status_0_intrpt_status_2_wd),
    .d      (hw2reg.intrpt_status[2].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[2].qe),
    .q      (reg2hw.intrpt_status[2].q ),
    .qs     (intrpt_status_0_intrpt_status_2_qs)
  );


  // F[intrpt_status_3]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_3 (
    .re     (intrpt_status_0_intrpt_status_3_re),
    .we     (intrpt_status_0_intrpt_status_3_we),
    .wd     (intrpt_status_0_intrpt_status_3_wd),
    .d      (hw2reg.intrpt_status[3].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[3].qe),
    .q      (reg2hw.intrpt_status[3].q ),
    .qs     (intrpt_status_0_intrpt_status_3_qs)
  );


  // F[intrpt_status_4]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_4 (
    .re     (intrpt_status_0_intrpt_status_4_re),
    .we     (intrpt_status_0_intrpt_status_4_we),
    .wd     (intrpt_status_0_intrpt_status_4_wd),
    .d      (hw2reg.intrpt_status[4].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[4].qe),
    .q      (reg2hw.intrpt_status[4].q ),
    .qs     (intrpt_status_0_intrpt_status_4_qs)
  );


  // F[intrpt_status_5]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_5 (
    .re     (intrpt_status_0_intrpt_status_5_re),
    .we     (intrpt_status_0_intrpt_status_5_we),
    .wd     (intrpt_status_0_intrpt_status_5_wd),
    .d      (hw2reg.intrpt_status[5].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[5].qe),
    .q      (reg2hw.intrpt_status[5].q ),
    .qs     (intrpt_status_0_intrpt_status_5_qs)
  );


  // F[intrpt_status_6]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_6 (
    .re     (intrpt_status_0_intrpt_status_6_re),
    .we     (intrpt_status_0_intrpt_status_6_we),
    .wd     (intrpt_status_0_intrpt_status_6_wd),
    .d      (hw2reg.intrpt_status[6].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[6].qe),
    .q      (reg2hw.intrpt_status[6].q ),
    .qs     (intrpt_status_0_intrpt_status_6_qs)
  );


  // F[intrpt_status_7]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_7 (
    .re     (intrpt_status_0_intrpt_status_7_re),
    .we     (intrpt_status_0_intrpt_status_7_we),
    .wd     (intrpt_status_0_intrpt_status_7_wd),
    .d      (hw2reg.intrpt_status[7].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[7].qe),
    .q      (reg2hw.intrpt_status[7].q ),
    .qs     (intrpt_status_0_intrpt_status_7_qs)
  );


  // F[intrpt_status_8]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_8 (
    .re     (intrpt_status_0_intrpt_status_8_re),
    .we     (intrpt_status_0_intrpt_status_8_we),
    .wd     (intrpt_status_0_intrpt_status_8_wd),
    .d      (hw2reg.intrpt_status[8].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[8].qe),
    .q      (reg2hw.intrpt_status[8].q ),
    .qs     (intrpt_status_0_intrpt_status_8_qs)
  );


  // F[intrpt_status_9]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_9 (
    .re     (intrpt_status_0_intrpt_status_9_re),
    .we     (intrpt_status_0_intrpt_status_9_we),
    .wd     (intrpt_status_0_intrpt_status_9_wd),
    .d      (hw2reg.intrpt_status[9].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[9].qe),
    .q      (reg2hw.intrpt_status[9].q ),
    .qs     (intrpt_status_0_intrpt_status_9_qs)
  );


  // F[intrpt_status_10]: 10:10
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_10 (
    .re     (intrpt_status_0_intrpt_status_10_re),
    .we     (intrpt_status_0_intrpt_status_10_we),
    .wd     (intrpt_status_0_intrpt_status_10_wd),
    .d      (hw2reg.intrpt_status[10].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[10].qe),
    .q      (reg2hw.intrpt_status[10].q ),
    .qs     (intrpt_status_0_intrpt_status_10_qs)
  );


  // F[intrpt_status_11]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_11 (
    .re     (intrpt_status_0_intrpt_status_11_re),
    .we     (intrpt_status_0_intrpt_status_11_we),
    .wd     (intrpt_status_0_intrpt_status_11_wd),
    .d      (hw2reg.intrpt_status[11].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[11].qe),
    .q      (reg2hw.intrpt_status[11].q ),
    .qs     (intrpt_status_0_intrpt_status_11_qs)
  );


  // F[intrpt_status_12]: 12:12
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_12 (
    .re     (intrpt_status_0_intrpt_status_12_re),
    .we     (intrpt_status_0_intrpt_status_12_we),
    .wd     (intrpt_status_0_intrpt_status_12_wd),
    .d      (hw2reg.intrpt_status[12].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[12].qe),
    .q      (reg2hw.intrpt_status[12].q ),
    .qs     (intrpt_status_0_intrpt_status_12_qs)
  );


  // F[intrpt_status_13]: 13:13
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_13 (
    .re     (intrpt_status_0_intrpt_status_13_re),
    .we     (intrpt_status_0_intrpt_status_13_we),
    .wd     (intrpt_status_0_intrpt_status_13_wd),
    .d      (hw2reg.intrpt_status[13].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[13].qe),
    .q      (reg2hw.intrpt_status[13].q ),
    .qs     (intrpt_status_0_intrpt_status_13_qs)
  );


  // F[intrpt_status_14]: 14:14
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_14 (
    .re     (intrpt_status_0_intrpt_status_14_re),
    .we     (intrpt_status_0_intrpt_status_14_we),
    .wd     (intrpt_status_0_intrpt_status_14_wd),
    .d      (hw2reg.intrpt_status[14].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[14].qe),
    .q      (reg2hw.intrpt_status[14].q ),
    .qs     (intrpt_status_0_intrpt_status_14_qs)
  );


  // F[intrpt_status_15]: 15:15
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_15 (
    .re     (intrpt_status_0_intrpt_status_15_re),
    .we     (intrpt_status_0_intrpt_status_15_we),
    .wd     (intrpt_status_0_intrpt_status_15_wd),
    .d      (hw2reg.intrpt_status[15].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[15].qe),
    .q      (reg2hw.intrpt_status[15].q ),
    .qs     (intrpt_status_0_intrpt_status_15_qs)
  );


  // F[intrpt_status_16]: 16:16
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_16 (
    .re     (intrpt_status_0_intrpt_status_16_re),
    .we     (intrpt_status_0_intrpt_status_16_we),
    .wd     (intrpt_status_0_intrpt_status_16_wd),
    .d      (hw2reg.intrpt_status[16].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[16].qe),
    .q      (reg2hw.intrpt_status[16].q ),
    .qs     (intrpt_status_0_intrpt_status_16_qs)
  );


  // F[intrpt_status_17]: 17:17
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_17 (
    .re     (intrpt_status_0_intrpt_status_17_re),
    .we     (intrpt_status_0_intrpt_status_17_we),
    .wd     (intrpt_status_0_intrpt_status_17_wd),
    .d      (hw2reg.intrpt_status[17].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[17].qe),
    .q      (reg2hw.intrpt_status[17].q ),
    .qs     (intrpt_status_0_intrpt_status_17_qs)
  );


  // F[intrpt_status_18]: 18:18
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_18 (
    .re     (intrpt_status_0_intrpt_status_18_re),
    .we     (intrpt_status_0_intrpt_status_18_we),
    .wd     (intrpt_status_0_intrpt_status_18_wd),
    .d      (hw2reg.intrpt_status[18].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[18].qe),
    .q      (reg2hw.intrpt_status[18].q ),
    .qs     (intrpt_status_0_intrpt_status_18_qs)
  );


  // F[intrpt_status_19]: 19:19
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_19 (
    .re     (intrpt_status_0_intrpt_status_19_re),
    .we     (intrpt_status_0_intrpt_status_19_we),
    .wd     (intrpt_status_0_intrpt_status_19_wd),
    .d      (hw2reg.intrpt_status[19].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[19].qe),
    .q      (reg2hw.intrpt_status[19].q ),
    .qs     (intrpt_status_0_intrpt_status_19_qs)
  );


  // F[intrpt_status_20]: 20:20
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_20 (
    .re     (intrpt_status_0_intrpt_status_20_re),
    .we     (intrpt_status_0_intrpt_status_20_we),
    .wd     (intrpt_status_0_intrpt_status_20_wd),
    .d      (hw2reg.intrpt_status[20].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[20].qe),
    .q      (reg2hw.intrpt_status[20].q ),
    .qs     (intrpt_status_0_intrpt_status_20_qs)
  );


  // F[intrpt_status_21]: 21:21
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_21 (
    .re     (intrpt_status_0_intrpt_status_21_re),
    .we     (intrpt_status_0_intrpt_status_21_we),
    .wd     (intrpt_status_0_intrpt_status_21_wd),
    .d      (hw2reg.intrpt_status[21].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[21].qe),
    .q      (reg2hw.intrpt_status[21].q ),
    .qs     (intrpt_status_0_intrpt_status_21_qs)
  );


  // F[intrpt_status_22]: 22:22
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_22 (
    .re     (intrpt_status_0_intrpt_status_22_re),
    .we     (intrpt_status_0_intrpt_status_22_we),
    .wd     (intrpt_status_0_intrpt_status_22_wd),
    .d      (hw2reg.intrpt_status[22].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[22].qe),
    .q      (reg2hw.intrpt_status[22].q ),
    .qs     (intrpt_status_0_intrpt_status_22_qs)
  );


  // F[intrpt_status_23]: 23:23
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_23 (
    .re     (intrpt_status_0_intrpt_status_23_re),
    .we     (intrpt_status_0_intrpt_status_23_we),
    .wd     (intrpt_status_0_intrpt_status_23_wd),
    .d      (hw2reg.intrpt_status[23].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[23].qe),
    .q      (reg2hw.intrpt_status[23].q ),
    .qs     (intrpt_status_0_intrpt_status_23_qs)
  );


  // F[intrpt_status_24]: 24:24
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_24 (
    .re     (intrpt_status_0_intrpt_status_24_re),
    .we     (intrpt_status_0_intrpt_status_24_we),
    .wd     (intrpt_status_0_intrpt_status_24_wd),
    .d      (hw2reg.intrpt_status[24].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[24].qe),
    .q      (reg2hw.intrpt_status[24].q ),
    .qs     (intrpt_status_0_intrpt_status_24_qs)
  );


  // F[intrpt_status_25]: 25:25
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_25 (
    .re     (intrpt_status_0_intrpt_status_25_re),
    .we     (intrpt_status_0_intrpt_status_25_we),
    .wd     (intrpt_status_0_intrpt_status_25_wd),
    .d      (hw2reg.intrpt_status[25].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[25].qe),
    .q      (reg2hw.intrpt_status[25].q ),
    .qs     (intrpt_status_0_intrpt_status_25_qs)
  );


  // F[intrpt_status_26]: 26:26
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_26 (
    .re     (intrpt_status_0_intrpt_status_26_re),
    .we     (intrpt_status_0_intrpt_status_26_we),
    .wd     (intrpt_status_0_intrpt_status_26_wd),
    .d      (hw2reg.intrpt_status[26].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[26].qe),
    .q      (reg2hw.intrpt_status[26].q ),
    .qs     (intrpt_status_0_intrpt_status_26_qs)
  );


  // F[intrpt_status_27]: 27:27
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_27 (
    .re     (intrpt_status_0_intrpt_status_27_re),
    .we     (intrpt_status_0_intrpt_status_27_we),
    .wd     (intrpt_status_0_intrpt_status_27_wd),
    .d      (hw2reg.intrpt_status[27].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[27].qe),
    .q      (reg2hw.intrpt_status[27].q ),
    .qs     (intrpt_status_0_intrpt_status_27_qs)
  );


  // F[intrpt_status_28]: 28:28
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_28 (
    .re     (intrpt_status_0_intrpt_status_28_re),
    .we     (intrpt_status_0_intrpt_status_28_we),
    .wd     (intrpt_status_0_intrpt_status_28_wd),
    .d      (hw2reg.intrpt_status[28].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[28].qe),
    .q      (reg2hw.intrpt_status[28].q ),
    .qs     (intrpt_status_0_intrpt_status_28_qs)
  );


  // F[intrpt_status_29]: 29:29
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_29 (
    .re     (intrpt_status_0_intrpt_status_29_re),
    .we     (intrpt_status_0_intrpt_status_29_we),
    .wd     (intrpt_status_0_intrpt_status_29_wd),
    .d      (hw2reg.intrpt_status[29].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[29].qe),
    .q      (reg2hw.intrpt_status[29].q ),
    .qs     (intrpt_status_0_intrpt_status_29_qs)
  );


  // F[intrpt_status_30]: 30:30
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_30 (
    .re     (intrpt_status_0_intrpt_status_30_re),
    .we     (intrpt_status_0_intrpt_status_30_we),
    .wd     (intrpt_status_0_intrpt_status_30_wd),
    .d      (hw2reg.intrpt_status[30].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[30].qe),
    .q      (reg2hw.intrpt_status[30].q ),
    .qs     (intrpt_status_0_intrpt_status_30_qs)
  );


  // F[intrpt_status_31]: 31:31
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_0_intrpt_status_31 (
    .re     (intrpt_status_0_intrpt_status_31_re),
    .we     (intrpt_status_0_intrpt_status_31_we),
    .wd     (intrpt_status_0_intrpt_status_31_wd),
    .d      (hw2reg.intrpt_status[31].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[31].qe),
    .q      (reg2hw.intrpt_status[31].q ),
    .qs     (intrpt_status_0_intrpt_status_31_qs)
  );


  // Subregister 32 of Multireg intrpt_status
  // R[intrpt_status_1]: V(True)

  // F[intrpt_status_32]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_32 (
    .re     (intrpt_status_1_intrpt_status_32_re),
    .we     (intrpt_status_1_intrpt_status_32_we),
    .wd     (intrpt_status_1_intrpt_status_32_wd),
    .d      (hw2reg.intrpt_status[32].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[32].qe),
    .q      (reg2hw.intrpt_status[32].q ),
    .qs     (intrpt_status_1_intrpt_status_32_qs)
  );


  // F[intrpt_status_33]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_33 (
    .re     (intrpt_status_1_intrpt_status_33_re),
    .we     (intrpt_status_1_intrpt_status_33_we),
    .wd     (intrpt_status_1_intrpt_status_33_wd),
    .d      (hw2reg.intrpt_status[33].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[33].qe),
    .q      (reg2hw.intrpt_status[33].q ),
    .qs     (intrpt_status_1_intrpt_status_33_qs)
  );


  // F[intrpt_status_34]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_34 (
    .re     (intrpt_status_1_intrpt_status_34_re),
    .we     (intrpt_status_1_intrpt_status_34_we),
    .wd     (intrpt_status_1_intrpt_status_34_wd),
    .d      (hw2reg.intrpt_status[34].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[34].qe),
    .q      (reg2hw.intrpt_status[34].q ),
    .qs     (intrpt_status_1_intrpt_status_34_qs)
  );


  // F[intrpt_status_35]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_35 (
    .re     (intrpt_status_1_intrpt_status_35_re),
    .we     (intrpt_status_1_intrpt_status_35_we),
    .wd     (intrpt_status_1_intrpt_status_35_wd),
    .d      (hw2reg.intrpt_status[35].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[35].qe),
    .q      (reg2hw.intrpt_status[35].q ),
    .qs     (intrpt_status_1_intrpt_status_35_qs)
  );


  // F[intrpt_status_36]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_36 (
    .re     (intrpt_status_1_intrpt_status_36_re),
    .we     (intrpt_status_1_intrpt_status_36_we),
    .wd     (intrpt_status_1_intrpt_status_36_wd),
    .d      (hw2reg.intrpt_status[36].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[36].qe),
    .q      (reg2hw.intrpt_status[36].q ),
    .qs     (intrpt_status_1_intrpt_status_36_qs)
  );


  // F[intrpt_status_37]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_37 (
    .re     (intrpt_status_1_intrpt_status_37_re),
    .we     (intrpt_status_1_intrpt_status_37_we),
    .wd     (intrpt_status_1_intrpt_status_37_wd),
    .d      (hw2reg.intrpt_status[37].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[37].qe),
    .q      (reg2hw.intrpt_status[37].q ),
    .qs     (intrpt_status_1_intrpt_status_37_qs)
  );


  // F[intrpt_status_38]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_38 (
    .re     (intrpt_status_1_intrpt_status_38_re),
    .we     (intrpt_status_1_intrpt_status_38_we),
    .wd     (intrpt_status_1_intrpt_status_38_wd),
    .d      (hw2reg.intrpt_status[38].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[38].qe),
    .q      (reg2hw.intrpt_status[38].q ),
    .qs     (intrpt_status_1_intrpt_status_38_qs)
  );


  // F[intrpt_status_39]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_39 (
    .re     (intrpt_status_1_intrpt_status_39_re),
    .we     (intrpt_status_1_intrpt_status_39_we),
    .wd     (intrpt_status_1_intrpt_status_39_wd),
    .d      (hw2reg.intrpt_status[39].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[39].qe),
    .q      (reg2hw.intrpt_status[39].q ),
    .qs     (intrpt_status_1_intrpt_status_39_qs)
  );


  // F[intrpt_status_40]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_40 (
    .re     (intrpt_status_1_intrpt_status_40_re),
    .we     (intrpt_status_1_intrpt_status_40_we),
    .wd     (intrpt_status_1_intrpt_status_40_wd),
    .d      (hw2reg.intrpt_status[40].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[40].qe),
    .q      (reg2hw.intrpt_status[40].q ),
    .qs     (intrpt_status_1_intrpt_status_40_qs)
  );


  // F[intrpt_status_41]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_41 (
    .re     (intrpt_status_1_intrpt_status_41_re),
    .we     (intrpt_status_1_intrpt_status_41_we),
    .wd     (intrpt_status_1_intrpt_status_41_wd),
    .d      (hw2reg.intrpt_status[41].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[41].qe),
    .q      (reg2hw.intrpt_status[41].q ),
    .qs     (intrpt_status_1_intrpt_status_41_qs)
  );


  // F[intrpt_status_42]: 10:10
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_42 (
    .re     (intrpt_status_1_intrpt_status_42_re),
    .we     (intrpt_status_1_intrpt_status_42_we),
    .wd     (intrpt_status_1_intrpt_status_42_wd),
    .d      (hw2reg.intrpt_status[42].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[42].qe),
    .q      (reg2hw.intrpt_status[42].q ),
    .qs     (intrpt_status_1_intrpt_status_42_qs)
  );


  // F[intrpt_status_43]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_43 (
    .re     (intrpt_status_1_intrpt_status_43_re),
    .we     (intrpt_status_1_intrpt_status_43_we),
    .wd     (intrpt_status_1_intrpt_status_43_wd),
    .d      (hw2reg.intrpt_status[43].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[43].qe),
    .q      (reg2hw.intrpt_status[43].q ),
    .qs     (intrpt_status_1_intrpt_status_43_qs)
  );


  // F[intrpt_status_44]: 12:12
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_44 (
    .re     (intrpt_status_1_intrpt_status_44_re),
    .we     (intrpt_status_1_intrpt_status_44_we),
    .wd     (intrpt_status_1_intrpt_status_44_wd),
    .d      (hw2reg.intrpt_status[44].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[44].qe),
    .q      (reg2hw.intrpt_status[44].q ),
    .qs     (intrpt_status_1_intrpt_status_44_qs)
  );


  // F[intrpt_status_45]: 13:13
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_45 (
    .re     (intrpt_status_1_intrpt_status_45_re),
    .we     (intrpt_status_1_intrpt_status_45_we),
    .wd     (intrpt_status_1_intrpt_status_45_wd),
    .d      (hw2reg.intrpt_status[45].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[45].qe),
    .q      (reg2hw.intrpt_status[45].q ),
    .qs     (intrpt_status_1_intrpt_status_45_qs)
  );


  // F[intrpt_status_46]: 14:14
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_46 (
    .re     (intrpt_status_1_intrpt_status_46_re),
    .we     (intrpt_status_1_intrpt_status_46_we),
    .wd     (intrpt_status_1_intrpt_status_46_wd),
    .d      (hw2reg.intrpt_status[46].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[46].qe),
    .q      (reg2hw.intrpt_status[46].q ),
    .qs     (intrpt_status_1_intrpt_status_46_qs)
  );


  // F[intrpt_status_47]: 15:15
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_47 (
    .re     (intrpt_status_1_intrpt_status_47_re),
    .we     (intrpt_status_1_intrpt_status_47_we),
    .wd     (intrpt_status_1_intrpt_status_47_wd),
    .d      (hw2reg.intrpt_status[47].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[47].qe),
    .q      (reg2hw.intrpt_status[47].q ),
    .qs     (intrpt_status_1_intrpt_status_47_qs)
  );


  // F[intrpt_status_48]: 16:16
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_48 (
    .re     (intrpt_status_1_intrpt_status_48_re),
    .we     (intrpt_status_1_intrpt_status_48_we),
    .wd     (intrpt_status_1_intrpt_status_48_wd),
    .d      (hw2reg.intrpt_status[48].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[48].qe),
    .q      (reg2hw.intrpt_status[48].q ),
    .qs     (intrpt_status_1_intrpt_status_48_qs)
  );


  // F[intrpt_status_49]: 17:17
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_49 (
    .re     (intrpt_status_1_intrpt_status_49_re),
    .we     (intrpt_status_1_intrpt_status_49_we),
    .wd     (intrpt_status_1_intrpt_status_49_wd),
    .d      (hw2reg.intrpt_status[49].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[49].qe),
    .q      (reg2hw.intrpt_status[49].q ),
    .qs     (intrpt_status_1_intrpt_status_49_qs)
  );


  // F[intrpt_status_50]: 18:18
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_50 (
    .re     (intrpt_status_1_intrpt_status_50_re),
    .we     (intrpt_status_1_intrpt_status_50_we),
    .wd     (intrpt_status_1_intrpt_status_50_wd),
    .d      (hw2reg.intrpt_status[50].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[50].qe),
    .q      (reg2hw.intrpt_status[50].q ),
    .qs     (intrpt_status_1_intrpt_status_50_qs)
  );


  // F[intrpt_status_51]: 19:19
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_51 (
    .re     (intrpt_status_1_intrpt_status_51_re),
    .we     (intrpt_status_1_intrpt_status_51_we),
    .wd     (intrpt_status_1_intrpt_status_51_wd),
    .d      (hw2reg.intrpt_status[51].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[51].qe),
    .q      (reg2hw.intrpt_status[51].q ),
    .qs     (intrpt_status_1_intrpt_status_51_qs)
  );


  // F[intrpt_status_52]: 20:20
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_52 (
    .re     (intrpt_status_1_intrpt_status_52_re),
    .we     (intrpt_status_1_intrpt_status_52_we),
    .wd     (intrpt_status_1_intrpt_status_52_wd),
    .d      (hw2reg.intrpt_status[52].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[52].qe),
    .q      (reg2hw.intrpt_status[52].q ),
    .qs     (intrpt_status_1_intrpt_status_52_qs)
  );


  // F[intrpt_status_53]: 21:21
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_53 (
    .re     (intrpt_status_1_intrpt_status_53_re),
    .we     (intrpt_status_1_intrpt_status_53_we),
    .wd     (intrpt_status_1_intrpt_status_53_wd),
    .d      (hw2reg.intrpt_status[53].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[53].qe),
    .q      (reg2hw.intrpt_status[53].q ),
    .qs     (intrpt_status_1_intrpt_status_53_qs)
  );


  // F[intrpt_status_54]: 22:22
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_54 (
    .re     (intrpt_status_1_intrpt_status_54_re),
    .we     (intrpt_status_1_intrpt_status_54_we),
    .wd     (intrpt_status_1_intrpt_status_54_wd),
    .d      (hw2reg.intrpt_status[54].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[54].qe),
    .q      (reg2hw.intrpt_status[54].q ),
    .qs     (intrpt_status_1_intrpt_status_54_qs)
  );


  // F[intrpt_status_55]: 23:23
  prim_subreg_ext #(
    .DW    (1)
  ) u_intrpt_status_1_intrpt_status_55 (
    .re     (intrpt_status_1_intrpt_status_55_re),
    .we     (intrpt_status_1_intrpt_status_55_we),
    .wd     (intrpt_status_1_intrpt_status_55_wd),
    .d      (hw2reg.intrpt_status[55].d),
    .qre    (),
    .qe     (reg2hw.intrpt_status[55].qe),
    .q      (reg2hw.intrpt_status[55].q ),
    .qs     (intrpt_status_1_intrpt_status_55_qs)
  );




  // Subregister 0 of Multireg intrpt_rise_status
  // R[intrpt_rise_status_0]: V(False)

  // F[intrpt_rise_status_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_0_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_0_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[0].de),
    .d      (hw2reg.intrpt_rise_status[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[0].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_0_qs)
  );


  // F[intrpt_rise_status_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_1_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_1_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[1].de),
    .d      (hw2reg.intrpt_rise_status[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[1].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_1_qs)
  );


  // F[intrpt_rise_status_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_2_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_2_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[2].de),
    .d      (hw2reg.intrpt_rise_status[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[2].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_2_qs)
  );


  // F[intrpt_rise_status_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_3_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_3_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[3].de),
    .d      (hw2reg.intrpt_rise_status[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[3].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_3_qs)
  );


  // F[intrpt_rise_status_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_4_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_4_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[4].de),
    .d      (hw2reg.intrpt_rise_status[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[4].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_4_qs)
  );


  // F[intrpt_rise_status_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_5_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_5_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[5].de),
    .d      (hw2reg.intrpt_rise_status[5].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[5].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_5_qs)
  );


  // F[intrpt_rise_status_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_6_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_6_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[6].de),
    .d      (hw2reg.intrpt_rise_status[6].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[6].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_6_qs)
  );


  // F[intrpt_rise_status_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_7_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_7_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[7].de),
    .d      (hw2reg.intrpt_rise_status[7].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[7].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_7_qs)
  );


  // F[intrpt_rise_status_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_8_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_8_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[8].de),
    .d      (hw2reg.intrpt_rise_status[8].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[8].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_8_qs)
  );


  // F[intrpt_rise_status_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_9_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_9_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[9].de),
    .d      (hw2reg.intrpt_rise_status[9].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[9].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_9_qs)
  );


  // F[intrpt_rise_status_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_10_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_10_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[10].de),
    .d      (hw2reg.intrpt_rise_status[10].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[10].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_10_qs)
  );


  // F[intrpt_rise_status_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_11_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_11_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[11].de),
    .d      (hw2reg.intrpt_rise_status[11].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[11].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_11_qs)
  );


  // F[intrpt_rise_status_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_12_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_12_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[12].de),
    .d      (hw2reg.intrpt_rise_status[12].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[12].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_12_qs)
  );


  // F[intrpt_rise_status_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_13_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_13_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[13].de),
    .d      (hw2reg.intrpt_rise_status[13].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[13].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_13_qs)
  );


  // F[intrpt_rise_status_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_14_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_14_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[14].de),
    .d      (hw2reg.intrpt_rise_status[14].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[14].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_14_qs)
  );


  // F[intrpt_rise_status_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_15_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_15_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[15].de),
    .d      (hw2reg.intrpt_rise_status[15].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[15].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_15_qs)
  );


  // F[intrpt_rise_status_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_16_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_16_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[16].de),
    .d      (hw2reg.intrpt_rise_status[16].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[16].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_16_qs)
  );


  // F[intrpt_rise_status_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_17_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_17_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[17].de),
    .d      (hw2reg.intrpt_rise_status[17].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[17].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_17_qs)
  );


  // F[intrpt_rise_status_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_18_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_18_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[18].de),
    .d      (hw2reg.intrpt_rise_status[18].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[18].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_18_qs)
  );


  // F[intrpt_rise_status_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_19_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_19_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[19].de),
    .d      (hw2reg.intrpt_rise_status[19].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[19].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_19_qs)
  );


  // F[intrpt_rise_status_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_20_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_20_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[20].de),
    .d      (hw2reg.intrpt_rise_status[20].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[20].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_20_qs)
  );


  // F[intrpt_rise_status_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_21_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_21_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[21].de),
    .d      (hw2reg.intrpt_rise_status[21].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[21].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_21_qs)
  );


  // F[intrpt_rise_status_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_22_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_22_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[22].de),
    .d      (hw2reg.intrpt_rise_status[22].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[22].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_22_qs)
  );


  // F[intrpt_rise_status_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_23_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_23_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[23].de),
    .d      (hw2reg.intrpt_rise_status[23].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[23].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_23_qs)
  );


  // F[intrpt_rise_status_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_24_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_24_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[24].de),
    .d      (hw2reg.intrpt_rise_status[24].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[24].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_24_qs)
  );


  // F[intrpt_rise_status_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_25_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_25_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[25].de),
    .d      (hw2reg.intrpt_rise_status[25].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[25].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_25_qs)
  );


  // F[intrpt_rise_status_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_26_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_26_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[26].de),
    .d      (hw2reg.intrpt_rise_status[26].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[26].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_26_qs)
  );


  // F[intrpt_rise_status_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_27_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_27_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[27].de),
    .d      (hw2reg.intrpt_rise_status[27].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[27].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_27_qs)
  );


  // F[intrpt_rise_status_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_28_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_28_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[28].de),
    .d      (hw2reg.intrpt_rise_status[28].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[28].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_28_qs)
  );


  // F[intrpt_rise_status_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_29_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_29_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[29].de),
    .d      (hw2reg.intrpt_rise_status[29].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[29].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_29_qs)
  );


  // F[intrpt_rise_status_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_30_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_30_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[30].de),
    .d      (hw2reg.intrpt_rise_status[30].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[30].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_30_qs)
  );


  // F[intrpt_rise_status_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_0_intrpt_rise_status_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_0_intrpt_rise_status_31_we),
    .wd     (intrpt_rise_status_0_intrpt_rise_status_31_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[31].de),
    .d      (hw2reg.intrpt_rise_status[31].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[31].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_0_intrpt_rise_status_31_qs)
  );


  // Subregister 32 of Multireg intrpt_rise_status
  // R[intrpt_rise_status_1]: V(False)

  // F[intrpt_rise_status_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_32_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_32_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[32].de),
    .d      (hw2reg.intrpt_rise_status[32].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[32].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_32_qs)
  );


  // F[intrpt_rise_status_33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_33_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_33_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[33].de),
    .d      (hw2reg.intrpt_rise_status[33].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[33].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_33_qs)
  );


  // F[intrpt_rise_status_34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_34_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_34_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[34].de),
    .d      (hw2reg.intrpt_rise_status[34].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[34].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_34_qs)
  );


  // F[intrpt_rise_status_35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_35_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_35_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[35].de),
    .d      (hw2reg.intrpt_rise_status[35].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[35].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_35_qs)
  );


  // F[intrpt_rise_status_36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_36_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_36_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[36].de),
    .d      (hw2reg.intrpt_rise_status[36].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[36].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_36_qs)
  );


  // F[intrpt_rise_status_37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_37_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_37_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[37].de),
    .d      (hw2reg.intrpt_rise_status[37].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[37].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_37_qs)
  );


  // F[intrpt_rise_status_38]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_38_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_38_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[38].de),
    .d      (hw2reg.intrpt_rise_status[38].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[38].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_38_qs)
  );


  // F[intrpt_rise_status_39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_39_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_39_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[39].de),
    .d      (hw2reg.intrpt_rise_status[39].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[39].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_39_qs)
  );


  // F[intrpt_rise_status_40]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_40_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_40_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[40].de),
    .d      (hw2reg.intrpt_rise_status[40].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[40].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_40_qs)
  );


  // F[intrpt_rise_status_41]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_41_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_41_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[41].de),
    .d      (hw2reg.intrpt_rise_status[41].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[41].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_41_qs)
  );


  // F[intrpt_rise_status_42]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_42_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_42_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[42].de),
    .d      (hw2reg.intrpt_rise_status[42].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[42].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_42_qs)
  );


  // F[intrpt_rise_status_43]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_43_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_43_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[43].de),
    .d      (hw2reg.intrpt_rise_status[43].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[43].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_43_qs)
  );


  // F[intrpt_rise_status_44]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_44_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_44_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[44].de),
    .d      (hw2reg.intrpt_rise_status[44].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[44].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_44_qs)
  );


  // F[intrpt_rise_status_45]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_45_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_45_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[45].de),
    .d      (hw2reg.intrpt_rise_status[45].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[45].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_45_qs)
  );


  // F[intrpt_rise_status_46]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_46_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_46_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[46].de),
    .d      (hw2reg.intrpt_rise_status[46].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[46].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_46_qs)
  );


  // F[intrpt_rise_status_47]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_47_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_47_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[47].de),
    .d      (hw2reg.intrpt_rise_status[47].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[47].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_47_qs)
  );


  // F[intrpt_rise_status_48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_48_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_48_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[48].de),
    .d      (hw2reg.intrpt_rise_status[48].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[48].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_48_qs)
  );


  // F[intrpt_rise_status_49]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_49_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_49_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[49].de),
    .d      (hw2reg.intrpt_rise_status[49].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[49].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_49_qs)
  );


  // F[intrpt_rise_status_50]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_50_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_50_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[50].de),
    .d      (hw2reg.intrpt_rise_status[50].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[50].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_50_qs)
  );


  // F[intrpt_rise_status_51]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_51_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_51_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[51].de),
    .d      (hw2reg.intrpt_rise_status[51].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[51].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_51_qs)
  );


  // F[intrpt_rise_status_52]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_52_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_52_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[52].de),
    .d      (hw2reg.intrpt_rise_status[52].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[52].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_52_qs)
  );


  // F[intrpt_rise_status_53]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_53_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_53_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[53].de),
    .d      (hw2reg.intrpt_rise_status[53].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[53].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_53_qs)
  );


  // F[intrpt_rise_status_54]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_54_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_54_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[54].de),
    .d      (hw2reg.intrpt_rise_status[54].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[54].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_54_qs)
  );


  // F[intrpt_rise_status_55]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_rise_status_1_intrpt_rise_status_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_status_1_intrpt_rise_status_55_we),
    .wd     (intrpt_rise_status_1_intrpt_rise_status_55_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_rise_status[55].de),
    .d      (hw2reg.intrpt_rise_status[55].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_status[55].q ),

    // to register interface (read)
    .qs     (intrpt_rise_status_1_intrpt_rise_status_55_qs)
  );




  // Subregister 0 of Multireg intrpt_fall_status
  // R[intrpt_fall_status_0]: V(False)

  // F[intrpt_fall_status_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_0_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_0_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[0].de),
    .d      (hw2reg.intrpt_fall_status[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[0].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_0_qs)
  );


  // F[intrpt_fall_status_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_1_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_1_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[1].de),
    .d      (hw2reg.intrpt_fall_status[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[1].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_1_qs)
  );


  // F[intrpt_fall_status_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_2_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_2_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[2].de),
    .d      (hw2reg.intrpt_fall_status[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[2].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_2_qs)
  );


  // F[intrpt_fall_status_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_3_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_3_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[3].de),
    .d      (hw2reg.intrpt_fall_status[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[3].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_3_qs)
  );


  // F[intrpt_fall_status_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_4_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_4_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[4].de),
    .d      (hw2reg.intrpt_fall_status[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[4].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_4_qs)
  );


  // F[intrpt_fall_status_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_5_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_5_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[5].de),
    .d      (hw2reg.intrpt_fall_status[5].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[5].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_5_qs)
  );


  // F[intrpt_fall_status_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_6_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_6_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[6].de),
    .d      (hw2reg.intrpt_fall_status[6].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[6].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_6_qs)
  );


  // F[intrpt_fall_status_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_7_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_7_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[7].de),
    .d      (hw2reg.intrpt_fall_status[7].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[7].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_7_qs)
  );


  // F[intrpt_fall_status_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_8_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_8_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[8].de),
    .d      (hw2reg.intrpt_fall_status[8].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[8].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_8_qs)
  );


  // F[intrpt_fall_status_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_9_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_9_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[9].de),
    .d      (hw2reg.intrpt_fall_status[9].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[9].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_9_qs)
  );


  // F[intrpt_fall_status_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_10_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_10_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[10].de),
    .d      (hw2reg.intrpt_fall_status[10].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[10].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_10_qs)
  );


  // F[intrpt_fall_status_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_11_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_11_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[11].de),
    .d      (hw2reg.intrpt_fall_status[11].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[11].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_11_qs)
  );


  // F[intrpt_fall_status_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_12_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_12_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[12].de),
    .d      (hw2reg.intrpt_fall_status[12].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[12].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_12_qs)
  );


  // F[intrpt_fall_status_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_13_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_13_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[13].de),
    .d      (hw2reg.intrpt_fall_status[13].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[13].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_13_qs)
  );


  // F[intrpt_fall_status_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_14_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_14_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[14].de),
    .d      (hw2reg.intrpt_fall_status[14].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[14].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_14_qs)
  );


  // F[intrpt_fall_status_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_15_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_15_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[15].de),
    .d      (hw2reg.intrpt_fall_status[15].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[15].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_15_qs)
  );


  // F[intrpt_fall_status_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_16_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_16_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[16].de),
    .d      (hw2reg.intrpt_fall_status[16].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[16].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_16_qs)
  );


  // F[intrpt_fall_status_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_17_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_17_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[17].de),
    .d      (hw2reg.intrpt_fall_status[17].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[17].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_17_qs)
  );


  // F[intrpt_fall_status_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_18_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_18_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[18].de),
    .d      (hw2reg.intrpt_fall_status[18].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[18].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_18_qs)
  );


  // F[intrpt_fall_status_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_19_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_19_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[19].de),
    .d      (hw2reg.intrpt_fall_status[19].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[19].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_19_qs)
  );


  // F[intrpt_fall_status_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_20_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_20_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[20].de),
    .d      (hw2reg.intrpt_fall_status[20].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[20].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_20_qs)
  );


  // F[intrpt_fall_status_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_21_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_21_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[21].de),
    .d      (hw2reg.intrpt_fall_status[21].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[21].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_21_qs)
  );


  // F[intrpt_fall_status_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_22_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_22_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[22].de),
    .d      (hw2reg.intrpt_fall_status[22].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[22].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_22_qs)
  );


  // F[intrpt_fall_status_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_23_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_23_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[23].de),
    .d      (hw2reg.intrpt_fall_status[23].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[23].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_23_qs)
  );


  // F[intrpt_fall_status_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_24_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_24_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[24].de),
    .d      (hw2reg.intrpt_fall_status[24].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[24].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_24_qs)
  );


  // F[intrpt_fall_status_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_25_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_25_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[25].de),
    .d      (hw2reg.intrpt_fall_status[25].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[25].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_25_qs)
  );


  // F[intrpt_fall_status_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_26_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_26_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[26].de),
    .d      (hw2reg.intrpt_fall_status[26].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[26].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_26_qs)
  );


  // F[intrpt_fall_status_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_27_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_27_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[27].de),
    .d      (hw2reg.intrpt_fall_status[27].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[27].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_27_qs)
  );


  // F[intrpt_fall_status_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_28_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_28_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[28].de),
    .d      (hw2reg.intrpt_fall_status[28].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[28].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_28_qs)
  );


  // F[intrpt_fall_status_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_29_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_29_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[29].de),
    .d      (hw2reg.intrpt_fall_status[29].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[29].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_29_qs)
  );


  // F[intrpt_fall_status_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_30_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_30_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[30].de),
    .d      (hw2reg.intrpt_fall_status[30].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[30].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_30_qs)
  );


  // F[intrpt_fall_status_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_0_intrpt_fall_status_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_0_intrpt_fall_status_31_we),
    .wd     (intrpt_fall_status_0_intrpt_fall_status_31_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[31].de),
    .d      (hw2reg.intrpt_fall_status[31].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[31].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_0_intrpt_fall_status_31_qs)
  );


  // Subregister 32 of Multireg intrpt_fall_status
  // R[intrpt_fall_status_1]: V(False)

  // F[intrpt_fall_status_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_32_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_32_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[32].de),
    .d      (hw2reg.intrpt_fall_status[32].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[32].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_32_qs)
  );


  // F[intrpt_fall_status_33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_33_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_33_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[33].de),
    .d      (hw2reg.intrpt_fall_status[33].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[33].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_33_qs)
  );


  // F[intrpt_fall_status_34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_34_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_34_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[34].de),
    .d      (hw2reg.intrpt_fall_status[34].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[34].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_34_qs)
  );


  // F[intrpt_fall_status_35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_35_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_35_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[35].de),
    .d      (hw2reg.intrpt_fall_status[35].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[35].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_35_qs)
  );


  // F[intrpt_fall_status_36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_36_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_36_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[36].de),
    .d      (hw2reg.intrpt_fall_status[36].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[36].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_36_qs)
  );


  // F[intrpt_fall_status_37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_37_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_37_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[37].de),
    .d      (hw2reg.intrpt_fall_status[37].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[37].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_37_qs)
  );


  // F[intrpt_fall_status_38]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_38_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_38_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[38].de),
    .d      (hw2reg.intrpt_fall_status[38].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[38].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_38_qs)
  );


  // F[intrpt_fall_status_39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_39_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_39_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[39].de),
    .d      (hw2reg.intrpt_fall_status[39].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[39].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_39_qs)
  );


  // F[intrpt_fall_status_40]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_40_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_40_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[40].de),
    .d      (hw2reg.intrpt_fall_status[40].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[40].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_40_qs)
  );


  // F[intrpt_fall_status_41]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_41_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_41_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[41].de),
    .d      (hw2reg.intrpt_fall_status[41].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[41].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_41_qs)
  );


  // F[intrpt_fall_status_42]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_42_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_42_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[42].de),
    .d      (hw2reg.intrpt_fall_status[42].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[42].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_42_qs)
  );


  // F[intrpt_fall_status_43]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_43_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_43_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[43].de),
    .d      (hw2reg.intrpt_fall_status[43].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[43].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_43_qs)
  );


  // F[intrpt_fall_status_44]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_44_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_44_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[44].de),
    .d      (hw2reg.intrpt_fall_status[44].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[44].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_44_qs)
  );


  // F[intrpt_fall_status_45]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_45_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_45_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[45].de),
    .d      (hw2reg.intrpt_fall_status[45].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[45].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_45_qs)
  );


  // F[intrpt_fall_status_46]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_46_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_46_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[46].de),
    .d      (hw2reg.intrpt_fall_status[46].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[46].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_46_qs)
  );


  // F[intrpt_fall_status_47]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_47_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_47_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[47].de),
    .d      (hw2reg.intrpt_fall_status[47].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[47].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_47_qs)
  );


  // F[intrpt_fall_status_48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_48_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_48_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[48].de),
    .d      (hw2reg.intrpt_fall_status[48].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[48].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_48_qs)
  );


  // F[intrpt_fall_status_49]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_49_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_49_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[49].de),
    .d      (hw2reg.intrpt_fall_status[49].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[49].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_49_qs)
  );


  // F[intrpt_fall_status_50]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_50_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_50_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[50].de),
    .d      (hw2reg.intrpt_fall_status[50].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[50].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_50_qs)
  );


  // F[intrpt_fall_status_51]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_51_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_51_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[51].de),
    .d      (hw2reg.intrpt_fall_status[51].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[51].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_51_qs)
  );


  // F[intrpt_fall_status_52]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_52_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_52_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[52].de),
    .d      (hw2reg.intrpt_fall_status[52].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[52].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_52_qs)
  );


  // F[intrpt_fall_status_53]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_53_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_53_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[53].de),
    .d      (hw2reg.intrpt_fall_status[53].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[53].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_53_qs)
  );


  // F[intrpt_fall_status_54]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_54_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_54_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[54].de),
    .d      (hw2reg.intrpt_fall_status[54].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[54].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_54_qs)
  );


  // F[intrpt_fall_status_55]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_fall_status_1_intrpt_fall_status_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_status_1_intrpt_fall_status_55_we),
    .wd     (intrpt_fall_status_1_intrpt_fall_status_55_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_fall_status[55].de),
    .d      (hw2reg.intrpt_fall_status[55].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_status[55].q ),

    // to register interface (read)
    .qs     (intrpt_fall_status_1_intrpt_fall_status_55_qs)
  );




  // Subregister 0 of Multireg intrpt_lvl_high_status
  // R[intrpt_lvl_high_status_0]: V(False)

  // F[intrpt_lvl_high_status_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_0_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_0_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[0].de),
    .d      (hw2reg.intrpt_lvl_high_status[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[0].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_0_qs)
  );


  // F[intrpt_lvl_high_status_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_1_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_1_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[1].de),
    .d      (hw2reg.intrpt_lvl_high_status[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[1].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_1_qs)
  );


  // F[intrpt_lvl_high_status_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_2_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_2_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[2].de),
    .d      (hw2reg.intrpt_lvl_high_status[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[2].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_2_qs)
  );


  // F[intrpt_lvl_high_status_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_3_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_3_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[3].de),
    .d      (hw2reg.intrpt_lvl_high_status[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[3].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_3_qs)
  );


  // F[intrpt_lvl_high_status_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_4_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_4_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[4].de),
    .d      (hw2reg.intrpt_lvl_high_status[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[4].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_4_qs)
  );


  // F[intrpt_lvl_high_status_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_5_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_5_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[5].de),
    .d      (hw2reg.intrpt_lvl_high_status[5].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[5].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_5_qs)
  );


  // F[intrpt_lvl_high_status_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_6_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_6_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[6].de),
    .d      (hw2reg.intrpt_lvl_high_status[6].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[6].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_6_qs)
  );


  // F[intrpt_lvl_high_status_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_7_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_7_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[7].de),
    .d      (hw2reg.intrpt_lvl_high_status[7].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[7].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_7_qs)
  );


  // F[intrpt_lvl_high_status_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_8_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_8_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[8].de),
    .d      (hw2reg.intrpt_lvl_high_status[8].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[8].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_8_qs)
  );


  // F[intrpt_lvl_high_status_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_9_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_9_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[9].de),
    .d      (hw2reg.intrpt_lvl_high_status[9].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[9].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_9_qs)
  );


  // F[intrpt_lvl_high_status_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_10_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_10_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[10].de),
    .d      (hw2reg.intrpt_lvl_high_status[10].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[10].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_10_qs)
  );


  // F[intrpt_lvl_high_status_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_11_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_11_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[11].de),
    .d      (hw2reg.intrpt_lvl_high_status[11].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[11].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_11_qs)
  );


  // F[intrpt_lvl_high_status_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_12_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_12_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[12].de),
    .d      (hw2reg.intrpt_lvl_high_status[12].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[12].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_12_qs)
  );


  // F[intrpt_lvl_high_status_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_13_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_13_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[13].de),
    .d      (hw2reg.intrpt_lvl_high_status[13].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[13].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_13_qs)
  );


  // F[intrpt_lvl_high_status_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_14_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_14_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[14].de),
    .d      (hw2reg.intrpt_lvl_high_status[14].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[14].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_14_qs)
  );


  // F[intrpt_lvl_high_status_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_15_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_15_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[15].de),
    .d      (hw2reg.intrpt_lvl_high_status[15].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[15].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_15_qs)
  );


  // F[intrpt_lvl_high_status_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_16_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_16_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[16].de),
    .d      (hw2reg.intrpt_lvl_high_status[16].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[16].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_16_qs)
  );


  // F[intrpt_lvl_high_status_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_17_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_17_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[17].de),
    .d      (hw2reg.intrpt_lvl_high_status[17].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[17].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_17_qs)
  );


  // F[intrpt_lvl_high_status_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_18_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_18_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[18].de),
    .d      (hw2reg.intrpt_lvl_high_status[18].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[18].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_18_qs)
  );


  // F[intrpt_lvl_high_status_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_19_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_19_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[19].de),
    .d      (hw2reg.intrpt_lvl_high_status[19].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[19].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_19_qs)
  );


  // F[intrpt_lvl_high_status_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_20_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_20_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[20].de),
    .d      (hw2reg.intrpt_lvl_high_status[20].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[20].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_20_qs)
  );


  // F[intrpt_lvl_high_status_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_21_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_21_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[21].de),
    .d      (hw2reg.intrpt_lvl_high_status[21].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[21].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_21_qs)
  );


  // F[intrpt_lvl_high_status_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_22_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_22_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[22].de),
    .d      (hw2reg.intrpt_lvl_high_status[22].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[22].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_22_qs)
  );


  // F[intrpt_lvl_high_status_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_23_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_23_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[23].de),
    .d      (hw2reg.intrpt_lvl_high_status[23].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[23].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_23_qs)
  );


  // F[intrpt_lvl_high_status_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_24_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_24_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[24].de),
    .d      (hw2reg.intrpt_lvl_high_status[24].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[24].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_24_qs)
  );


  // F[intrpt_lvl_high_status_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_25_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_25_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[25].de),
    .d      (hw2reg.intrpt_lvl_high_status[25].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[25].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_25_qs)
  );


  // F[intrpt_lvl_high_status_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_26_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_26_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[26].de),
    .d      (hw2reg.intrpt_lvl_high_status[26].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[26].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_26_qs)
  );


  // F[intrpt_lvl_high_status_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_27_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_27_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[27].de),
    .d      (hw2reg.intrpt_lvl_high_status[27].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[27].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_27_qs)
  );


  // F[intrpt_lvl_high_status_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_28_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_28_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[28].de),
    .d      (hw2reg.intrpt_lvl_high_status[28].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[28].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_28_qs)
  );


  // F[intrpt_lvl_high_status_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_29_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_29_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[29].de),
    .d      (hw2reg.intrpt_lvl_high_status[29].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[29].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_29_qs)
  );


  // F[intrpt_lvl_high_status_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_30_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_30_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[30].de),
    .d      (hw2reg.intrpt_lvl_high_status[30].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[30].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_30_qs)
  );


  // F[intrpt_lvl_high_status_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_0_intrpt_lvl_high_status_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_31_we),
    .wd     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_31_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[31].de),
    .d      (hw2reg.intrpt_lvl_high_status[31].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[31].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_0_intrpt_lvl_high_status_31_qs)
  );


  // Subregister 32 of Multireg intrpt_lvl_high_status
  // R[intrpt_lvl_high_status_1]: V(False)

  // F[intrpt_lvl_high_status_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_32_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_32_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[32].de),
    .d      (hw2reg.intrpt_lvl_high_status[32].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[32].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_32_qs)
  );


  // F[intrpt_lvl_high_status_33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_33_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_33_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[33].de),
    .d      (hw2reg.intrpt_lvl_high_status[33].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[33].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_33_qs)
  );


  // F[intrpt_lvl_high_status_34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_34_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_34_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[34].de),
    .d      (hw2reg.intrpt_lvl_high_status[34].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[34].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_34_qs)
  );


  // F[intrpt_lvl_high_status_35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_35_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_35_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[35].de),
    .d      (hw2reg.intrpt_lvl_high_status[35].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[35].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_35_qs)
  );


  // F[intrpt_lvl_high_status_36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_36_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_36_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[36].de),
    .d      (hw2reg.intrpt_lvl_high_status[36].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[36].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_36_qs)
  );


  // F[intrpt_lvl_high_status_37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_37_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_37_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[37].de),
    .d      (hw2reg.intrpt_lvl_high_status[37].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[37].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_37_qs)
  );


  // F[intrpt_lvl_high_status_38]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_38_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_38_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[38].de),
    .d      (hw2reg.intrpt_lvl_high_status[38].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[38].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_38_qs)
  );


  // F[intrpt_lvl_high_status_39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_39_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_39_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[39].de),
    .d      (hw2reg.intrpt_lvl_high_status[39].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[39].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_39_qs)
  );


  // F[intrpt_lvl_high_status_40]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_40_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_40_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[40].de),
    .d      (hw2reg.intrpt_lvl_high_status[40].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[40].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_40_qs)
  );


  // F[intrpt_lvl_high_status_41]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_41_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_41_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[41].de),
    .d      (hw2reg.intrpt_lvl_high_status[41].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[41].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_41_qs)
  );


  // F[intrpt_lvl_high_status_42]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_42_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_42_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[42].de),
    .d      (hw2reg.intrpt_lvl_high_status[42].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[42].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_42_qs)
  );


  // F[intrpt_lvl_high_status_43]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_43_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_43_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[43].de),
    .d      (hw2reg.intrpt_lvl_high_status[43].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[43].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_43_qs)
  );


  // F[intrpt_lvl_high_status_44]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_44_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_44_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[44].de),
    .d      (hw2reg.intrpt_lvl_high_status[44].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[44].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_44_qs)
  );


  // F[intrpt_lvl_high_status_45]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_45_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_45_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[45].de),
    .d      (hw2reg.intrpt_lvl_high_status[45].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[45].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_45_qs)
  );


  // F[intrpt_lvl_high_status_46]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_46_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_46_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[46].de),
    .d      (hw2reg.intrpt_lvl_high_status[46].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[46].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_46_qs)
  );


  // F[intrpt_lvl_high_status_47]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_47_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_47_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[47].de),
    .d      (hw2reg.intrpt_lvl_high_status[47].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[47].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_47_qs)
  );


  // F[intrpt_lvl_high_status_48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_48_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_48_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[48].de),
    .d      (hw2reg.intrpt_lvl_high_status[48].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[48].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_48_qs)
  );


  // F[intrpt_lvl_high_status_49]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_49_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_49_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[49].de),
    .d      (hw2reg.intrpt_lvl_high_status[49].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[49].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_49_qs)
  );


  // F[intrpt_lvl_high_status_50]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_50_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_50_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[50].de),
    .d      (hw2reg.intrpt_lvl_high_status[50].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[50].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_50_qs)
  );


  // F[intrpt_lvl_high_status_51]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_51_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_51_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[51].de),
    .d      (hw2reg.intrpt_lvl_high_status[51].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[51].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_51_qs)
  );


  // F[intrpt_lvl_high_status_52]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_52_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_52_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[52].de),
    .d      (hw2reg.intrpt_lvl_high_status[52].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[52].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_52_qs)
  );


  // F[intrpt_lvl_high_status_53]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_53_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_53_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[53].de),
    .d      (hw2reg.intrpt_lvl_high_status[53].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[53].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_53_qs)
  );


  // F[intrpt_lvl_high_status_54]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_54_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_54_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[54].de),
    .d      (hw2reg.intrpt_lvl_high_status[54].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[54].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_54_qs)
  );


  // F[intrpt_lvl_high_status_55]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_high_status_1_intrpt_lvl_high_status_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_55_we),
    .wd     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_55_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_high_status[55].de),
    .d      (hw2reg.intrpt_lvl_high_status[55].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_high_status[55].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_high_status_1_intrpt_lvl_high_status_55_qs)
  );




  // Subregister 0 of Multireg intrpt_lvl_low_status
  // R[intrpt_lvl_low_status_0]: V(False)

  // F[intrpt_lvl_low_status_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_0_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_0_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[0].de),
    .d      (hw2reg.intrpt_lvl_low_status[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[0].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_0_qs)
  );


  // F[intrpt_lvl_low_status_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_1_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_1_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[1].de),
    .d      (hw2reg.intrpt_lvl_low_status[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[1].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_1_qs)
  );


  // F[intrpt_lvl_low_status_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_2_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_2_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[2].de),
    .d      (hw2reg.intrpt_lvl_low_status[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[2].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_2_qs)
  );


  // F[intrpt_lvl_low_status_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_3_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_3_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[3].de),
    .d      (hw2reg.intrpt_lvl_low_status[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[3].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_3_qs)
  );


  // F[intrpt_lvl_low_status_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_4_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_4_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[4].de),
    .d      (hw2reg.intrpt_lvl_low_status[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[4].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_4_qs)
  );


  // F[intrpt_lvl_low_status_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_5_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_5_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[5].de),
    .d      (hw2reg.intrpt_lvl_low_status[5].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[5].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_5_qs)
  );


  // F[intrpt_lvl_low_status_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_6_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_6_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[6].de),
    .d      (hw2reg.intrpt_lvl_low_status[6].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[6].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_6_qs)
  );


  // F[intrpt_lvl_low_status_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_7_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_7_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[7].de),
    .d      (hw2reg.intrpt_lvl_low_status[7].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[7].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_7_qs)
  );


  // F[intrpt_lvl_low_status_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_8_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_8_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[8].de),
    .d      (hw2reg.intrpt_lvl_low_status[8].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[8].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_8_qs)
  );


  // F[intrpt_lvl_low_status_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_9_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_9_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[9].de),
    .d      (hw2reg.intrpt_lvl_low_status[9].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[9].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_9_qs)
  );


  // F[intrpt_lvl_low_status_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_10_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_10_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[10].de),
    .d      (hw2reg.intrpt_lvl_low_status[10].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[10].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_10_qs)
  );


  // F[intrpt_lvl_low_status_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_11_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_11_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[11].de),
    .d      (hw2reg.intrpt_lvl_low_status[11].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[11].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_11_qs)
  );


  // F[intrpt_lvl_low_status_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_12_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_12_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[12].de),
    .d      (hw2reg.intrpt_lvl_low_status[12].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[12].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_12_qs)
  );


  // F[intrpt_lvl_low_status_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_13_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_13_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[13].de),
    .d      (hw2reg.intrpt_lvl_low_status[13].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[13].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_13_qs)
  );


  // F[intrpt_lvl_low_status_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_14_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_14_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[14].de),
    .d      (hw2reg.intrpt_lvl_low_status[14].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[14].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_14_qs)
  );


  // F[intrpt_lvl_low_status_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_15_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_15_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[15].de),
    .d      (hw2reg.intrpt_lvl_low_status[15].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[15].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_15_qs)
  );


  // F[intrpt_lvl_low_status_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_16_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_16_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[16].de),
    .d      (hw2reg.intrpt_lvl_low_status[16].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[16].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_16_qs)
  );


  // F[intrpt_lvl_low_status_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_17_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_17_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[17].de),
    .d      (hw2reg.intrpt_lvl_low_status[17].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[17].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_17_qs)
  );


  // F[intrpt_lvl_low_status_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_18_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_18_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[18].de),
    .d      (hw2reg.intrpt_lvl_low_status[18].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[18].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_18_qs)
  );


  // F[intrpt_lvl_low_status_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_19_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_19_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[19].de),
    .d      (hw2reg.intrpt_lvl_low_status[19].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[19].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_19_qs)
  );


  // F[intrpt_lvl_low_status_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_20_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_20_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[20].de),
    .d      (hw2reg.intrpt_lvl_low_status[20].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[20].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_20_qs)
  );


  // F[intrpt_lvl_low_status_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_21_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_21_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[21].de),
    .d      (hw2reg.intrpt_lvl_low_status[21].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[21].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_21_qs)
  );


  // F[intrpt_lvl_low_status_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_22_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_22_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[22].de),
    .d      (hw2reg.intrpt_lvl_low_status[22].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[22].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_22_qs)
  );


  // F[intrpt_lvl_low_status_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_23_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_23_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[23].de),
    .d      (hw2reg.intrpt_lvl_low_status[23].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[23].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_23_qs)
  );


  // F[intrpt_lvl_low_status_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_24_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_24_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[24].de),
    .d      (hw2reg.intrpt_lvl_low_status[24].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[24].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_24_qs)
  );


  // F[intrpt_lvl_low_status_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_25_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_25_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[25].de),
    .d      (hw2reg.intrpt_lvl_low_status[25].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[25].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_25_qs)
  );


  // F[intrpt_lvl_low_status_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_26_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_26_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[26].de),
    .d      (hw2reg.intrpt_lvl_low_status[26].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[26].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_26_qs)
  );


  // F[intrpt_lvl_low_status_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_27_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_27_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[27].de),
    .d      (hw2reg.intrpt_lvl_low_status[27].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[27].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_27_qs)
  );


  // F[intrpt_lvl_low_status_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_28_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_28_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[28].de),
    .d      (hw2reg.intrpt_lvl_low_status[28].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[28].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_28_qs)
  );


  // F[intrpt_lvl_low_status_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_29_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_29_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[29].de),
    .d      (hw2reg.intrpt_lvl_low_status[29].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[29].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_29_qs)
  );


  // F[intrpt_lvl_low_status_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_30_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_30_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[30].de),
    .d      (hw2reg.intrpt_lvl_low_status[30].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[30].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_30_qs)
  );


  // F[intrpt_lvl_low_status_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_0_intrpt_lvl_low_status_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_31_we),
    .wd     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_31_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[31].de),
    .d      (hw2reg.intrpt_lvl_low_status[31].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[31].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_0_intrpt_lvl_low_status_31_qs)
  );


  // Subregister 32 of Multireg intrpt_lvl_low_status
  // R[intrpt_lvl_low_status_1]: V(False)

  // F[intrpt_lvl_low_status_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_32_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_32_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[32].de),
    .d      (hw2reg.intrpt_lvl_low_status[32].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[32].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_32_qs)
  );


  // F[intrpt_lvl_low_status_33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_33_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_33_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[33].de),
    .d      (hw2reg.intrpt_lvl_low_status[33].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[33].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_33_qs)
  );


  // F[intrpt_lvl_low_status_34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_34_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_34_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[34].de),
    .d      (hw2reg.intrpt_lvl_low_status[34].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[34].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_34_qs)
  );


  // F[intrpt_lvl_low_status_35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_35_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_35_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[35].de),
    .d      (hw2reg.intrpt_lvl_low_status[35].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[35].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_35_qs)
  );


  // F[intrpt_lvl_low_status_36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_36_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_36_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[36].de),
    .d      (hw2reg.intrpt_lvl_low_status[36].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[36].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_36_qs)
  );


  // F[intrpt_lvl_low_status_37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_37_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_37_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[37].de),
    .d      (hw2reg.intrpt_lvl_low_status[37].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[37].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_37_qs)
  );


  // F[intrpt_lvl_low_status_38]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_38_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_38_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[38].de),
    .d      (hw2reg.intrpt_lvl_low_status[38].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[38].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_38_qs)
  );


  // F[intrpt_lvl_low_status_39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_39_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_39_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[39].de),
    .d      (hw2reg.intrpt_lvl_low_status[39].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[39].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_39_qs)
  );


  // F[intrpt_lvl_low_status_40]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_40_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_40_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[40].de),
    .d      (hw2reg.intrpt_lvl_low_status[40].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[40].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_40_qs)
  );


  // F[intrpt_lvl_low_status_41]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_41_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_41_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[41].de),
    .d      (hw2reg.intrpt_lvl_low_status[41].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[41].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_41_qs)
  );


  // F[intrpt_lvl_low_status_42]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_42_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_42_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[42].de),
    .d      (hw2reg.intrpt_lvl_low_status[42].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[42].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_42_qs)
  );


  // F[intrpt_lvl_low_status_43]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_43_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_43_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[43].de),
    .d      (hw2reg.intrpt_lvl_low_status[43].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[43].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_43_qs)
  );


  // F[intrpt_lvl_low_status_44]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_44_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_44_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[44].de),
    .d      (hw2reg.intrpt_lvl_low_status[44].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[44].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_44_qs)
  );


  // F[intrpt_lvl_low_status_45]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_45_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_45_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[45].de),
    .d      (hw2reg.intrpt_lvl_low_status[45].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[45].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_45_qs)
  );


  // F[intrpt_lvl_low_status_46]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_46_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_46_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[46].de),
    .d      (hw2reg.intrpt_lvl_low_status[46].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[46].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_46_qs)
  );


  // F[intrpt_lvl_low_status_47]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_47_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_47_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[47].de),
    .d      (hw2reg.intrpt_lvl_low_status[47].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[47].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_47_qs)
  );


  // F[intrpt_lvl_low_status_48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_48_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_48_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[48].de),
    .d      (hw2reg.intrpt_lvl_low_status[48].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[48].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_48_qs)
  );


  // F[intrpt_lvl_low_status_49]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_49_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_49_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[49].de),
    .d      (hw2reg.intrpt_lvl_low_status[49].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[49].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_49_qs)
  );


  // F[intrpt_lvl_low_status_50]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_50_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_50_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[50].de),
    .d      (hw2reg.intrpt_lvl_low_status[50].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[50].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_50_qs)
  );


  // F[intrpt_lvl_low_status_51]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_51_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_51_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[51].de),
    .d      (hw2reg.intrpt_lvl_low_status[51].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[51].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_51_qs)
  );


  // F[intrpt_lvl_low_status_52]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_52_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_52_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[52].de),
    .d      (hw2reg.intrpt_lvl_low_status[52].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[52].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_52_qs)
  );


  // F[intrpt_lvl_low_status_53]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_53_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_53_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[53].de),
    .d      (hw2reg.intrpt_lvl_low_status[53].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[53].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_53_qs)
  );


  // F[intrpt_lvl_low_status_54]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_54_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_54_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[54].de),
    .d      (hw2reg.intrpt_lvl_low_status[54].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[54].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_54_qs)
  );


  // F[intrpt_lvl_low_status_55]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intrpt_lvl_low_status_1_intrpt_lvl_low_status_55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_55_we),
    .wd     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_55_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_lvl_low_status[55].de),
    .d      (hw2reg.intrpt_lvl_low_status[55].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_lvl_low_status[55].q ),

    // to register interface (read)
    .qs     (intrpt_lvl_low_status_1_intrpt_lvl_low_status_55_qs)
  );





  logic [35:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == GPIO_INFO_OFFSET);
    addr_hit[ 1] = (reg_addr == GPIO_CFG_OFFSET);
    addr_hit[ 2] = (reg_addr == GPIO_GPIO_MODE_0_OFFSET);
    addr_hit[ 3] = (reg_addr == GPIO_GPIO_MODE_1_OFFSET);
    addr_hit[ 4] = (reg_addr == GPIO_GPIO_MODE_2_OFFSET);
    addr_hit[ 5] = (reg_addr == GPIO_GPIO_MODE_3_OFFSET);
    addr_hit[ 6] = (reg_addr == GPIO_GPIO_EN_0_OFFSET);
    addr_hit[ 7] = (reg_addr == GPIO_GPIO_EN_1_OFFSET);
    addr_hit[ 8] = (reg_addr == GPIO_GPIO_IN_0_OFFSET);
    addr_hit[ 9] = (reg_addr == GPIO_GPIO_IN_1_OFFSET);
    addr_hit[10] = (reg_addr == GPIO_GPIO_OUT_0_OFFSET);
    addr_hit[11] = (reg_addr == GPIO_GPIO_OUT_1_OFFSET);
    addr_hit[12] = (reg_addr == GPIO_GPIO_SET_0_OFFSET);
    addr_hit[13] = (reg_addr == GPIO_GPIO_SET_1_OFFSET);
    addr_hit[14] = (reg_addr == GPIO_GPIO_CLEAR_0_OFFSET);
    addr_hit[15] = (reg_addr == GPIO_GPIO_CLEAR_1_OFFSET);
    addr_hit[16] = (reg_addr == GPIO_GPIO_TOGGLE_0_OFFSET);
    addr_hit[17] = (reg_addr == GPIO_GPIO_TOGGLE_1_OFFSET);
    addr_hit[18] = (reg_addr == GPIO_INTRPT_RISE_EN_0_OFFSET);
    addr_hit[19] = (reg_addr == GPIO_INTRPT_RISE_EN_1_OFFSET);
    addr_hit[20] = (reg_addr == GPIO_INTRPT_FALL_EN_0_OFFSET);
    addr_hit[21] = (reg_addr == GPIO_INTRPT_FALL_EN_1_OFFSET);
    addr_hit[22] = (reg_addr == GPIO_INTRPT_LVL_HIGH_EN_0_OFFSET);
    addr_hit[23] = (reg_addr == GPIO_INTRPT_LVL_HIGH_EN_1_OFFSET);
    addr_hit[24] = (reg_addr == GPIO_INTRPT_LVL_LOW_EN_0_OFFSET);
    addr_hit[25] = (reg_addr == GPIO_INTRPT_LVL_LOW_EN_1_OFFSET);
    addr_hit[26] = (reg_addr == GPIO_INTRPT_STATUS_0_OFFSET);
    addr_hit[27] = (reg_addr == GPIO_INTRPT_STATUS_1_OFFSET);
    addr_hit[28] = (reg_addr == GPIO_INTRPT_RISE_STATUS_0_OFFSET);
    addr_hit[29] = (reg_addr == GPIO_INTRPT_RISE_STATUS_1_OFFSET);
    addr_hit[30] = (reg_addr == GPIO_INTRPT_FALL_STATUS_0_OFFSET);
    addr_hit[31] = (reg_addr == GPIO_INTRPT_FALL_STATUS_1_OFFSET);
    addr_hit[32] = (reg_addr == GPIO_INTRPT_LVL_HIGH_STATUS_0_OFFSET);
    addr_hit[33] = (reg_addr == GPIO_INTRPT_LVL_HIGH_STATUS_1_OFFSET);
    addr_hit[34] = (reg_addr == GPIO_INTRPT_LVL_LOW_STATUS_0_OFFSET);
    addr_hit[35] = (reg_addr == GPIO_INTRPT_LVL_LOW_STATUS_1_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(GPIO_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(GPIO_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(GPIO_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(GPIO_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(GPIO_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(GPIO_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(GPIO_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(GPIO_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(GPIO_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(GPIO_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(GPIO_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(GPIO_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(GPIO_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(GPIO_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(GPIO_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(GPIO_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(GPIO_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(GPIO_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(GPIO_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(GPIO_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(GPIO_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(GPIO_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(GPIO_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(GPIO_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(GPIO_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(GPIO_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(GPIO_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(GPIO_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(GPIO_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(GPIO_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(GPIO_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(GPIO_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(GPIO_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(GPIO_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(GPIO_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(GPIO_PERMIT[35] & ~reg_be)))));
  end

  assign info_gpio_cnt_re = addr_hit[0] & reg_re & !reg_error;

  assign info_version_re = addr_hit[0] & reg_re & !reg_error;

  assign cfg_intrpt_mode_we = addr_hit[1] & reg_we & !reg_error;
  assign cfg_intrpt_mode_wd = reg_wdata[0];

  assign cfg_reserved_we = addr_hit[1] & reg_we & !reg_error;
  assign cfg_reserved_wd = reg_wdata[1];

  assign gpio_mode_0_mode_0_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_0_wd = reg_wdata[1:0];

  assign gpio_mode_0_mode_1_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_1_wd = reg_wdata[3:2];

  assign gpio_mode_0_mode_2_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_2_wd = reg_wdata[5:4];

  assign gpio_mode_0_mode_3_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_3_wd = reg_wdata[7:6];

  assign gpio_mode_0_mode_4_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_4_wd = reg_wdata[9:8];

  assign gpio_mode_0_mode_5_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_5_wd = reg_wdata[11:10];

  assign gpio_mode_0_mode_6_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_6_wd = reg_wdata[13:12];

  assign gpio_mode_0_mode_7_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_7_wd = reg_wdata[15:14];

  assign gpio_mode_0_mode_8_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_8_wd = reg_wdata[17:16];

  assign gpio_mode_0_mode_9_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_9_wd = reg_wdata[19:18];

  assign gpio_mode_0_mode_10_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_10_wd = reg_wdata[21:20];

  assign gpio_mode_0_mode_11_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_11_wd = reg_wdata[23:22];

  assign gpio_mode_0_mode_12_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_12_wd = reg_wdata[25:24];

  assign gpio_mode_0_mode_13_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_13_wd = reg_wdata[27:26];

  assign gpio_mode_0_mode_14_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_14_wd = reg_wdata[29:28];

  assign gpio_mode_0_mode_15_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_mode_0_mode_15_wd = reg_wdata[31:30];

  assign gpio_mode_1_mode_16_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_16_wd = reg_wdata[1:0];

  assign gpio_mode_1_mode_17_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_17_wd = reg_wdata[3:2];

  assign gpio_mode_1_mode_18_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_18_wd = reg_wdata[5:4];

  assign gpio_mode_1_mode_19_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_19_wd = reg_wdata[7:6];

  assign gpio_mode_1_mode_20_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_20_wd = reg_wdata[9:8];

  assign gpio_mode_1_mode_21_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_21_wd = reg_wdata[11:10];

  assign gpio_mode_1_mode_22_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_22_wd = reg_wdata[13:12];

  assign gpio_mode_1_mode_23_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_23_wd = reg_wdata[15:14];

  assign gpio_mode_1_mode_24_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_24_wd = reg_wdata[17:16];

  assign gpio_mode_1_mode_25_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_25_wd = reg_wdata[19:18];

  assign gpio_mode_1_mode_26_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_26_wd = reg_wdata[21:20];

  assign gpio_mode_1_mode_27_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_27_wd = reg_wdata[23:22];

  assign gpio_mode_1_mode_28_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_28_wd = reg_wdata[25:24];

  assign gpio_mode_1_mode_29_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_29_wd = reg_wdata[27:26];

  assign gpio_mode_1_mode_30_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_30_wd = reg_wdata[29:28];

  assign gpio_mode_1_mode_31_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_mode_1_mode_31_wd = reg_wdata[31:30];

  assign gpio_mode_2_mode_32_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_32_wd = reg_wdata[1:0];

  assign gpio_mode_2_mode_33_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_33_wd = reg_wdata[3:2];

  assign gpio_mode_2_mode_34_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_34_wd = reg_wdata[5:4];

  assign gpio_mode_2_mode_35_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_35_wd = reg_wdata[7:6];

  assign gpio_mode_2_mode_36_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_36_wd = reg_wdata[9:8];

  assign gpio_mode_2_mode_37_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_37_wd = reg_wdata[11:10];

  assign gpio_mode_2_mode_38_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_38_wd = reg_wdata[13:12];

  assign gpio_mode_2_mode_39_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_39_wd = reg_wdata[15:14];

  assign gpio_mode_2_mode_40_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_40_wd = reg_wdata[17:16];

  assign gpio_mode_2_mode_41_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_41_wd = reg_wdata[19:18];

  assign gpio_mode_2_mode_42_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_42_wd = reg_wdata[21:20];

  assign gpio_mode_2_mode_43_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_43_wd = reg_wdata[23:22];

  assign gpio_mode_2_mode_44_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_44_wd = reg_wdata[25:24];

  assign gpio_mode_2_mode_45_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_45_wd = reg_wdata[27:26];

  assign gpio_mode_2_mode_46_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_46_wd = reg_wdata[29:28];

  assign gpio_mode_2_mode_47_we = addr_hit[4] & reg_we & !reg_error;
  assign gpio_mode_2_mode_47_wd = reg_wdata[31:30];

  assign gpio_mode_3_mode_48_we = addr_hit[5] & reg_we & !reg_error;
  assign gpio_mode_3_mode_48_wd = reg_wdata[1:0];

  assign gpio_mode_3_mode_49_we = addr_hit[5] & reg_we & !reg_error;
  assign gpio_mode_3_mode_49_wd = reg_wdata[3:2];

  assign gpio_mode_3_mode_50_we = addr_hit[5] & reg_we & !reg_error;
  assign gpio_mode_3_mode_50_wd = reg_wdata[5:4];

  assign gpio_mode_3_mode_51_we = addr_hit[5] & reg_we & !reg_error;
  assign gpio_mode_3_mode_51_wd = reg_wdata[7:6];

  assign gpio_mode_3_mode_52_we = addr_hit[5] & reg_we & !reg_error;
  assign gpio_mode_3_mode_52_wd = reg_wdata[9:8];

  assign gpio_mode_3_mode_53_we = addr_hit[5] & reg_we & !reg_error;
  assign gpio_mode_3_mode_53_wd = reg_wdata[11:10];

  assign gpio_mode_3_mode_54_we = addr_hit[5] & reg_we & !reg_error;
  assign gpio_mode_3_mode_54_wd = reg_wdata[13:12];

  assign gpio_mode_3_mode_55_we = addr_hit[5] & reg_we & !reg_error;
  assign gpio_mode_3_mode_55_wd = reg_wdata[15:14];

  assign gpio_en_0_gpio_en_0_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_0_wd = reg_wdata[0];

  assign gpio_en_0_gpio_en_1_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_1_wd = reg_wdata[1];

  assign gpio_en_0_gpio_en_2_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_2_wd = reg_wdata[2];

  assign gpio_en_0_gpio_en_3_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_3_wd = reg_wdata[3];

  assign gpio_en_0_gpio_en_4_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_4_wd = reg_wdata[4];

  assign gpio_en_0_gpio_en_5_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_5_wd = reg_wdata[5];

  assign gpio_en_0_gpio_en_6_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_6_wd = reg_wdata[6];

  assign gpio_en_0_gpio_en_7_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_7_wd = reg_wdata[7];

  assign gpio_en_0_gpio_en_8_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_8_wd = reg_wdata[8];

  assign gpio_en_0_gpio_en_9_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_9_wd = reg_wdata[9];

  assign gpio_en_0_gpio_en_10_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_10_wd = reg_wdata[10];

  assign gpio_en_0_gpio_en_11_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_11_wd = reg_wdata[11];

  assign gpio_en_0_gpio_en_12_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_12_wd = reg_wdata[12];

  assign gpio_en_0_gpio_en_13_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_13_wd = reg_wdata[13];

  assign gpio_en_0_gpio_en_14_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_14_wd = reg_wdata[14];

  assign gpio_en_0_gpio_en_15_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_15_wd = reg_wdata[15];

  assign gpio_en_0_gpio_en_16_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_16_wd = reg_wdata[16];

  assign gpio_en_0_gpio_en_17_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_17_wd = reg_wdata[17];

  assign gpio_en_0_gpio_en_18_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_18_wd = reg_wdata[18];

  assign gpio_en_0_gpio_en_19_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_19_wd = reg_wdata[19];

  assign gpio_en_0_gpio_en_20_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_20_wd = reg_wdata[20];

  assign gpio_en_0_gpio_en_21_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_21_wd = reg_wdata[21];

  assign gpio_en_0_gpio_en_22_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_22_wd = reg_wdata[22];

  assign gpio_en_0_gpio_en_23_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_23_wd = reg_wdata[23];

  assign gpio_en_0_gpio_en_24_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_24_wd = reg_wdata[24];

  assign gpio_en_0_gpio_en_25_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_25_wd = reg_wdata[25];

  assign gpio_en_0_gpio_en_26_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_26_wd = reg_wdata[26];

  assign gpio_en_0_gpio_en_27_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_27_wd = reg_wdata[27];

  assign gpio_en_0_gpio_en_28_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_28_wd = reg_wdata[28];

  assign gpio_en_0_gpio_en_29_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_29_wd = reg_wdata[29];

  assign gpio_en_0_gpio_en_30_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_30_wd = reg_wdata[30];

  assign gpio_en_0_gpio_en_31_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_en_0_gpio_en_31_wd = reg_wdata[31];

  assign gpio_en_1_gpio_en_32_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_32_wd = reg_wdata[0];

  assign gpio_en_1_gpio_en_33_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_33_wd = reg_wdata[1];

  assign gpio_en_1_gpio_en_34_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_34_wd = reg_wdata[2];

  assign gpio_en_1_gpio_en_35_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_35_wd = reg_wdata[3];

  assign gpio_en_1_gpio_en_36_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_36_wd = reg_wdata[4];

  assign gpio_en_1_gpio_en_37_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_37_wd = reg_wdata[5];

  assign gpio_en_1_gpio_en_38_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_38_wd = reg_wdata[6];

  assign gpio_en_1_gpio_en_39_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_39_wd = reg_wdata[7];

  assign gpio_en_1_gpio_en_40_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_40_wd = reg_wdata[8];

  assign gpio_en_1_gpio_en_41_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_41_wd = reg_wdata[9];

  assign gpio_en_1_gpio_en_42_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_42_wd = reg_wdata[10];

  assign gpio_en_1_gpio_en_43_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_43_wd = reg_wdata[11];

  assign gpio_en_1_gpio_en_44_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_44_wd = reg_wdata[12];

  assign gpio_en_1_gpio_en_45_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_45_wd = reg_wdata[13];

  assign gpio_en_1_gpio_en_46_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_46_wd = reg_wdata[14];

  assign gpio_en_1_gpio_en_47_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_47_wd = reg_wdata[15];

  assign gpio_en_1_gpio_en_48_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_48_wd = reg_wdata[16];

  assign gpio_en_1_gpio_en_49_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_49_wd = reg_wdata[17];

  assign gpio_en_1_gpio_en_50_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_50_wd = reg_wdata[18];

  assign gpio_en_1_gpio_en_51_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_51_wd = reg_wdata[19];

  assign gpio_en_1_gpio_en_52_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_52_wd = reg_wdata[20];

  assign gpio_en_1_gpio_en_53_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_53_wd = reg_wdata[21];

  assign gpio_en_1_gpio_en_54_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_54_wd = reg_wdata[22];

  assign gpio_en_1_gpio_en_55_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_en_1_gpio_en_55_wd = reg_wdata[23];

  assign gpio_in_0_gpio_in_0_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_1_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_2_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_3_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_4_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_5_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_6_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_7_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_8_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_9_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_10_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_11_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_12_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_13_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_14_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_15_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_16_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_17_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_18_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_19_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_20_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_21_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_22_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_23_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_24_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_25_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_26_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_27_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_28_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_29_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_30_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_0_gpio_in_31_re = addr_hit[8] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_32_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_33_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_34_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_35_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_36_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_37_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_38_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_39_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_40_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_41_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_42_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_43_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_44_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_45_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_46_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_47_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_48_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_49_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_50_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_51_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_52_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_53_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_54_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_in_1_gpio_in_55_re = addr_hit[9] & reg_re & !reg_error;

  assign gpio_out_0_gpio_out_0_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_0_wd = reg_wdata[0];

  assign gpio_out_0_gpio_out_1_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_1_wd = reg_wdata[1];

  assign gpio_out_0_gpio_out_2_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_2_wd = reg_wdata[2];

  assign gpio_out_0_gpio_out_3_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_3_wd = reg_wdata[3];

  assign gpio_out_0_gpio_out_4_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_4_wd = reg_wdata[4];

  assign gpio_out_0_gpio_out_5_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_5_wd = reg_wdata[5];

  assign gpio_out_0_gpio_out_6_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_6_wd = reg_wdata[6];

  assign gpio_out_0_gpio_out_7_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_7_wd = reg_wdata[7];

  assign gpio_out_0_gpio_out_8_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_8_wd = reg_wdata[8];

  assign gpio_out_0_gpio_out_9_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_9_wd = reg_wdata[9];

  assign gpio_out_0_gpio_out_10_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_10_wd = reg_wdata[10];

  assign gpio_out_0_gpio_out_11_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_11_wd = reg_wdata[11];

  assign gpio_out_0_gpio_out_12_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_12_wd = reg_wdata[12];

  assign gpio_out_0_gpio_out_13_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_13_wd = reg_wdata[13];

  assign gpio_out_0_gpio_out_14_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_14_wd = reg_wdata[14];

  assign gpio_out_0_gpio_out_15_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_15_wd = reg_wdata[15];

  assign gpio_out_0_gpio_out_16_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_16_wd = reg_wdata[16];

  assign gpio_out_0_gpio_out_17_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_17_wd = reg_wdata[17];

  assign gpio_out_0_gpio_out_18_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_18_wd = reg_wdata[18];

  assign gpio_out_0_gpio_out_19_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_19_wd = reg_wdata[19];

  assign gpio_out_0_gpio_out_20_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_20_wd = reg_wdata[20];

  assign gpio_out_0_gpio_out_21_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_21_wd = reg_wdata[21];

  assign gpio_out_0_gpio_out_22_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_22_wd = reg_wdata[22];

  assign gpio_out_0_gpio_out_23_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_23_wd = reg_wdata[23];

  assign gpio_out_0_gpio_out_24_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_24_wd = reg_wdata[24];

  assign gpio_out_0_gpio_out_25_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_25_wd = reg_wdata[25];

  assign gpio_out_0_gpio_out_26_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_26_wd = reg_wdata[26];

  assign gpio_out_0_gpio_out_27_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_27_wd = reg_wdata[27];

  assign gpio_out_0_gpio_out_28_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_28_wd = reg_wdata[28];

  assign gpio_out_0_gpio_out_29_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_29_wd = reg_wdata[29];

  assign gpio_out_0_gpio_out_30_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_30_wd = reg_wdata[30];

  assign gpio_out_0_gpio_out_31_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_out_0_gpio_out_31_wd = reg_wdata[31];

  assign gpio_out_1_gpio_out_32_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_32_wd = reg_wdata[0];

  assign gpio_out_1_gpio_out_33_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_33_wd = reg_wdata[1];

  assign gpio_out_1_gpio_out_34_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_34_wd = reg_wdata[2];

  assign gpio_out_1_gpio_out_35_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_35_wd = reg_wdata[3];

  assign gpio_out_1_gpio_out_36_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_36_wd = reg_wdata[4];

  assign gpio_out_1_gpio_out_37_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_37_wd = reg_wdata[5];

  assign gpio_out_1_gpio_out_38_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_38_wd = reg_wdata[6];

  assign gpio_out_1_gpio_out_39_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_39_wd = reg_wdata[7];

  assign gpio_out_1_gpio_out_40_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_40_wd = reg_wdata[8];

  assign gpio_out_1_gpio_out_41_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_41_wd = reg_wdata[9];

  assign gpio_out_1_gpio_out_42_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_42_wd = reg_wdata[10];

  assign gpio_out_1_gpio_out_43_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_43_wd = reg_wdata[11];

  assign gpio_out_1_gpio_out_44_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_44_wd = reg_wdata[12];

  assign gpio_out_1_gpio_out_45_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_45_wd = reg_wdata[13];

  assign gpio_out_1_gpio_out_46_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_46_wd = reg_wdata[14];

  assign gpio_out_1_gpio_out_47_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_47_wd = reg_wdata[15];

  assign gpio_out_1_gpio_out_48_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_48_wd = reg_wdata[16];

  assign gpio_out_1_gpio_out_49_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_49_wd = reg_wdata[17];

  assign gpio_out_1_gpio_out_50_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_50_wd = reg_wdata[18];

  assign gpio_out_1_gpio_out_51_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_51_wd = reg_wdata[19];

  assign gpio_out_1_gpio_out_52_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_52_wd = reg_wdata[20];

  assign gpio_out_1_gpio_out_53_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_53_wd = reg_wdata[21];

  assign gpio_out_1_gpio_out_54_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_54_wd = reg_wdata[22];

  assign gpio_out_1_gpio_out_55_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_out_1_gpio_out_55_wd = reg_wdata[23];

  assign gpio_set_0_gpio_set_0_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_0_wd = reg_wdata[0];

  assign gpio_set_0_gpio_set_1_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_1_wd = reg_wdata[1];

  assign gpio_set_0_gpio_set_2_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_2_wd = reg_wdata[2];

  assign gpio_set_0_gpio_set_3_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_3_wd = reg_wdata[3];

  assign gpio_set_0_gpio_set_4_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_4_wd = reg_wdata[4];

  assign gpio_set_0_gpio_set_5_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_5_wd = reg_wdata[5];

  assign gpio_set_0_gpio_set_6_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_6_wd = reg_wdata[6];

  assign gpio_set_0_gpio_set_7_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_7_wd = reg_wdata[7];

  assign gpio_set_0_gpio_set_8_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_8_wd = reg_wdata[8];

  assign gpio_set_0_gpio_set_9_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_9_wd = reg_wdata[9];

  assign gpio_set_0_gpio_set_10_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_10_wd = reg_wdata[10];

  assign gpio_set_0_gpio_set_11_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_11_wd = reg_wdata[11];

  assign gpio_set_0_gpio_set_12_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_12_wd = reg_wdata[12];

  assign gpio_set_0_gpio_set_13_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_13_wd = reg_wdata[13];

  assign gpio_set_0_gpio_set_14_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_14_wd = reg_wdata[14];

  assign gpio_set_0_gpio_set_15_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_15_wd = reg_wdata[15];

  assign gpio_set_0_gpio_set_16_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_16_wd = reg_wdata[16];

  assign gpio_set_0_gpio_set_17_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_17_wd = reg_wdata[17];

  assign gpio_set_0_gpio_set_18_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_18_wd = reg_wdata[18];

  assign gpio_set_0_gpio_set_19_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_19_wd = reg_wdata[19];

  assign gpio_set_0_gpio_set_20_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_20_wd = reg_wdata[20];

  assign gpio_set_0_gpio_set_21_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_21_wd = reg_wdata[21];

  assign gpio_set_0_gpio_set_22_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_22_wd = reg_wdata[22];

  assign gpio_set_0_gpio_set_23_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_23_wd = reg_wdata[23];

  assign gpio_set_0_gpio_set_24_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_24_wd = reg_wdata[24];

  assign gpio_set_0_gpio_set_25_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_25_wd = reg_wdata[25];

  assign gpio_set_0_gpio_set_26_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_26_wd = reg_wdata[26];

  assign gpio_set_0_gpio_set_27_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_27_wd = reg_wdata[27];

  assign gpio_set_0_gpio_set_28_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_28_wd = reg_wdata[28];

  assign gpio_set_0_gpio_set_29_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_29_wd = reg_wdata[29];

  assign gpio_set_0_gpio_set_30_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_30_wd = reg_wdata[30];

  assign gpio_set_0_gpio_set_31_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_set_0_gpio_set_31_wd = reg_wdata[31];

  assign gpio_set_1_gpio_set_32_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_32_wd = reg_wdata[0];

  assign gpio_set_1_gpio_set_33_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_33_wd = reg_wdata[1];

  assign gpio_set_1_gpio_set_34_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_34_wd = reg_wdata[2];

  assign gpio_set_1_gpio_set_35_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_35_wd = reg_wdata[3];

  assign gpio_set_1_gpio_set_36_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_36_wd = reg_wdata[4];

  assign gpio_set_1_gpio_set_37_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_37_wd = reg_wdata[5];

  assign gpio_set_1_gpio_set_38_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_38_wd = reg_wdata[6];

  assign gpio_set_1_gpio_set_39_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_39_wd = reg_wdata[7];

  assign gpio_set_1_gpio_set_40_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_40_wd = reg_wdata[8];

  assign gpio_set_1_gpio_set_41_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_41_wd = reg_wdata[9];

  assign gpio_set_1_gpio_set_42_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_42_wd = reg_wdata[10];

  assign gpio_set_1_gpio_set_43_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_43_wd = reg_wdata[11];

  assign gpio_set_1_gpio_set_44_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_44_wd = reg_wdata[12];

  assign gpio_set_1_gpio_set_45_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_45_wd = reg_wdata[13];

  assign gpio_set_1_gpio_set_46_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_46_wd = reg_wdata[14];

  assign gpio_set_1_gpio_set_47_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_47_wd = reg_wdata[15];

  assign gpio_set_1_gpio_set_48_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_48_wd = reg_wdata[16];

  assign gpio_set_1_gpio_set_49_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_49_wd = reg_wdata[17];

  assign gpio_set_1_gpio_set_50_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_50_wd = reg_wdata[18];

  assign gpio_set_1_gpio_set_51_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_51_wd = reg_wdata[19];

  assign gpio_set_1_gpio_set_52_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_52_wd = reg_wdata[20];

  assign gpio_set_1_gpio_set_53_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_53_wd = reg_wdata[21];

  assign gpio_set_1_gpio_set_54_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_54_wd = reg_wdata[22];

  assign gpio_set_1_gpio_set_55_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_set_1_gpio_set_55_wd = reg_wdata[23];

  assign gpio_clear_0_gpio_clear_0_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_0_wd = reg_wdata[0];

  assign gpio_clear_0_gpio_clear_1_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_1_wd = reg_wdata[1];

  assign gpio_clear_0_gpio_clear_2_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_2_wd = reg_wdata[2];

  assign gpio_clear_0_gpio_clear_3_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_3_wd = reg_wdata[3];

  assign gpio_clear_0_gpio_clear_4_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_4_wd = reg_wdata[4];

  assign gpio_clear_0_gpio_clear_5_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_5_wd = reg_wdata[5];

  assign gpio_clear_0_gpio_clear_6_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_6_wd = reg_wdata[6];

  assign gpio_clear_0_gpio_clear_7_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_7_wd = reg_wdata[7];

  assign gpio_clear_0_gpio_clear_8_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_8_wd = reg_wdata[8];

  assign gpio_clear_0_gpio_clear_9_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_9_wd = reg_wdata[9];

  assign gpio_clear_0_gpio_clear_10_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_10_wd = reg_wdata[10];

  assign gpio_clear_0_gpio_clear_11_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_11_wd = reg_wdata[11];

  assign gpio_clear_0_gpio_clear_12_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_12_wd = reg_wdata[12];

  assign gpio_clear_0_gpio_clear_13_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_13_wd = reg_wdata[13];

  assign gpio_clear_0_gpio_clear_14_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_14_wd = reg_wdata[14];

  assign gpio_clear_0_gpio_clear_15_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_15_wd = reg_wdata[15];

  assign gpio_clear_0_gpio_clear_16_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_16_wd = reg_wdata[16];

  assign gpio_clear_0_gpio_clear_17_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_17_wd = reg_wdata[17];

  assign gpio_clear_0_gpio_clear_18_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_18_wd = reg_wdata[18];

  assign gpio_clear_0_gpio_clear_19_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_19_wd = reg_wdata[19];

  assign gpio_clear_0_gpio_clear_20_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_20_wd = reg_wdata[20];

  assign gpio_clear_0_gpio_clear_21_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_21_wd = reg_wdata[21];

  assign gpio_clear_0_gpio_clear_22_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_22_wd = reg_wdata[22];

  assign gpio_clear_0_gpio_clear_23_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_23_wd = reg_wdata[23];

  assign gpio_clear_0_gpio_clear_24_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_24_wd = reg_wdata[24];

  assign gpio_clear_0_gpio_clear_25_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_25_wd = reg_wdata[25];

  assign gpio_clear_0_gpio_clear_26_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_26_wd = reg_wdata[26];

  assign gpio_clear_0_gpio_clear_27_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_27_wd = reg_wdata[27];

  assign gpio_clear_0_gpio_clear_28_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_28_wd = reg_wdata[28];

  assign gpio_clear_0_gpio_clear_29_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_29_wd = reg_wdata[29];

  assign gpio_clear_0_gpio_clear_30_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_30_wd = reg_wdata[30];

  assign gpio_clear_0_gpio_clear_31_we = addr_hit[14] & reg_we & !reg_error;
  assign gpio_clear_0_gpio_clear_31_wd = reg_wdata[31];

  assign gpio_clear_1_gpio_clear_32_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_32_wd = reg_wdata[0];

  assign gpio_clear_1_gpio_clear_33_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_33_wd = reg_wdata[1];

  assign gpio_clear_1_gpio_clear_34_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_34_wd = reg_wdata[2];

  assign gpio_clear_1_gpio_clear_35_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_35_wd = reg_wdata[3];

  assign gpio_clear_1_gpio_clear_36_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_36_wd = reg_wdata[4];

  assign gpio_clear_1_gpio_clear_37_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_37_wd = reg_wdata[5];

  assign gpio_clear_1_gpio_clear_38_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_38_wd = reg_wdata[6];

  assign gpio_clear_1_gpio_clear_39_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_39_wd = reg_wdata[7];

  assign gpio_clear_1_gpio_clear_40_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_40_wd = reg_wdata[8];

  assign gpio_clear_1_gpio_clear_41_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_41_wd = reg_wdata[9];

  assign gpio_clear_1_gpio_clear_42_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_42_wd = reg_wdata[10];

  assign gpio_clear_1_gpio_clear_43_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_43_wd = reg_wdata[11];

  assign gpio_clear_1_gpio_clear_44_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_44_wd = reg_wdata[12];

  assign gpio_clear_1_gpio_clear_45_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_45_wd = reg_wdata[13];

  assign gpio_clear_1_gpio_clear_46_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_46_wd = reg_wdata[14];

  assign gpio_clear_1_gpio_clear_47_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_47_wd = reg_wdata[15];

  assign gpio_clear_1_gpio_clear_48_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_48_wd = reg_wdata[16];

  assign gpio_clear_1_gpio_clear_49_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_49_wd = reg_wdata[17];

  assign gpio_clear_1_gpio_clear_50_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_50_wd = reg_wdata[18];

  assign gpio_clear_1_gpio_clear_51_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_51_wd = reg_wdata[19];

  assign gpio_clear_1_gpio_clear_52_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_52_wd = reg_wdata[20];

  assign gpio_clear_1_gpio_clear_53_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_53_wd = reg_wdata[21];

  assign gpio_clear_1_gpio_clear_54_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_54_wd = reg_wdata[22];

  assign gpio_clear_1_gpio_clear_55_we = addr_hit[15] & reg_we & !reg_error;
  assign gpio_clear_1_gpio_clear_55_wd = reg_wdata[23];

  assign gpio_toggle_0_gpio_toggle_0_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_0_wd = reg_wdata[0];

  assign gpio_toggle_0_gpio_toggle_1_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_1_wd = reg_wdata[1];

  assign gpio_toggle_0_gpio_toggle_2_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_2_wd = reg_wdata[2];

  assign gpio_toggle_0_gpio_toggle_3_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_3_wd = reg_wdata[3];

  assign gpio_toggle_0_gpio_toggle_4_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_4_wd = reg_wdata[4];

  assign gpio_toggle_0_gpio_toggle_5_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_5_wd = reg_wdata[5];

  assign gpio_toggle_0_gpio_toggle_6_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_6_wd = reg_wdata[6];

  assign gpio_toggle_0_gpio_toggle_7_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_7_wd = reg_wdata[7];

  assign gpio_toggle_0_gpio_toggle_8_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_8_wd = reg_wdata[8];

  assign gpio_toggle_0_gpio_toggle_9_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_9_wd = reg_wdata[9];

  assign gpio_toggle_0_gpio_toggle_10_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_10_wd = reg_wdata[10];

  assign gpio_toggle_0_gpio_toggle_11_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_11_wd = reg_wdata[11];

  assign gpio_toggle_0_gpio_toggle_12_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_12_wd = reg_wdata[12];

  assign gpio_toggle_0_gpio_toggle_13_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_13_wd = reg_wdata[13];

  assign gpio_toggle_0_gpio_toggle_14_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_14_wd = reg_wdata[14];

  assign gpio_toggle_0_gpio_toggle_15_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_15_wd = reg_wdata[15];

  assign gpio_toggle_0_gpio_toggle_16_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_16_wd = reg_wdata[16];

  assign gpio_toggle_0_gpio_toggle_17_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_17_wd = reg_wdata[17];

  assign gpio_toggle_0_gpio_toggle_18_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_18_wd = reg_wdata[18];

  assign gpio_toggle_0_gpio_toggle_19_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_19_wd = reg_wdata[19];

  assign gpio_toggle_0_gpio_toggle_20_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_20_wd = reg_wdata[20];

  assign gpio_toggle_0_gpio_toggle_21_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_21_wd = reg_wdata[21];

  assign gpio_toggle_0_gpio_toggle_22_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_22_wd = reg_wdata[22];

  assign gpio_toggle_0_gpio_toggle_23_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_23_wd = reg_wdata[23];

  assign gpio_toggle_0_gpio_toggle_24_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_24_wd = reg_wdata[24];

  assign gpio_toggle_0_gpio_toggle_25_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_25_wd = reg_wdata[25];

  assign gpio_toggle_0_gpio_toggle_26_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_26_wd = reg_wdata[26];

  assign gpio_toggle_0_gpio_toggle_27_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_27_wd = reg_wdata[27];

  assign gpio_toggle_0_gpio_toggle_28_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_28_wd = reg_wdata[28];

  assign gpio_toggle_0_gpio_toggle_29_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_29_wd = reg_wdata[29];

  assign gpio_toggle_0_gpio_toggle_30_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_30_wd = reg_wdata[30];

  assign gpio_toggle_0_gpio_toggle_31_we = addr_hit[16] & reg_we & !reg_error;
  assign gpio_toggle_0_gpio_toggle_31_wd = reg_wdata[31];

  assign gpio_toggle_1_gpio_toggle_32_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_32_wd = reg_wdata[0];

  assign gpio_toggle_1_gpio_toggle_33_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_33_wd = reg_wdata[1];

  assign gpio_toggle_1_gpio_toggle_34_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_34_wd = reg_wdata[2];

  assign gpio_toggle_1_gpio_toggle_35_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_35_wd = reg_wdata[3];

  assign gpio_toggle_1_gpio_toggle_36_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_36_wd = reg_wdata[4];

  assign gpio_toggle_1_gpio_toggle_37_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_37_wd = reg_wdata[5];

  assign gpio_toggle_1_gpio_toggle_38_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_38_wd = reg_wdata[6];

  assign gpio_toggle_1_gpio_toggle_39_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_39_wd = reg_wdata[7];

  assign gpio_toggle_1_gpio_toggle_40_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_40_wd = reg_wdata[8];

  assign gpio_toggle_1_gpio_toggle_41_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_41_wd = reg_wdata[9];

  assign gpio_toggle_1_gpio_toggle_42_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_42_wd = reg_wdata[10];

  assign gpio_toggle_1_gpio_toggle_43_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_43_wd = reg_wdata[11];

  assign gpio_toggle_1_gpio_toggle_44_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_44_wd = reg_wdata[12];

  assign gpio_toggle_1_gpio_toggle_45_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_45_wd = reg_wdata[13];

  assign gpio_toggle_1_gpio_toggle_46_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_46_wd = reg_wdata[14];

  assign gpio_toggle_1_gpio_toggle_47_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_47_wd = reg_wdata[15];

  assign gpio_toggle_1_gpio_toggle_48_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_48_wd = reg_wdata[16];

  assign gpio_toggle_1_gpio_toggle_49_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_49_wd = reg_wdata[17];

  assign gpio_toggle_1_gpio_toggle_50_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_50_wd = reg_wdata[18];

  assign gpio_toggle_1_gpio_toggle_51_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_51_wd = reg_wdata[19];

  assign gpio_toggle_1_gpio_toggle_52_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_52_wd = reg_wdata[20];

  assign gpio_toggle_1_gpio_toggle_53_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_53_wd = reg_wdata[21];

  assign gpio_toggle_1_gpio_toggle_54_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_54_wd = reg_wdata[22];

  assign gpio_toggle_1_gpio_toggle_55_we = addr_hit[17] & reg_we & !reg_error;
  assign gpio_toggle_1_gpio_toggle_55_wd = reg_wdata[23];

  assign intrpt_rise_en_0_intrpt_rise_en_0_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_0_wd = reg_wdata[0];

  assign intrpt_rise_en_0_intrpt_rise_en_1_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_1_wd = reg_wdata[1];

  assign intrpt_rise_en_0_intrpt_rise_en_2_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_2_wd = reg_wdata[2];

  assign intrpt_rise_en_0_intrpt_rise_en_3_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_3_wd = reg_wdata[3];

  assign intrpt_rise_en_0_intrpt_rise_en_4_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_4_wd = reg_wdata[4];

  assign intrpt_rise_en_0_intrpt_rise_en_5_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_5_wd = reg_wdata[5];

  assign intrpt_rise_en_0_intrpt_rise_en_6_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_6_wd = reg_wdata[6];

  assign intrpt_rise_en_0_intrpt_rise_en_7_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_7_wd = reg_wdata[7];

  assign intrpt_rise_en_0_intrpt_rise_en_8_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_8_wd = reg_wdata[8];

  assign intrpt_rise_en_0_intrpt_rise_en_9_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_9_wd = reg_wdata[9];

  assign intrpt_rise_en_0_intrpt_rise_en_10_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_10_wd = reg_wdata[10];

  assign intrpt_rise_en_0_intrpt_rise_en_11_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_11_wd = reg_wdata[11];

  assign intrpt_rise_en_0_intrpt_rise_en_12_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_12_wd = reg_wdata[12];

  assign intrpt_rise_en_0_intrpt_rise_en_13_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_13_wd = reg_wdata[13];

  assign intrpt_rise_en_0_intrpt_rise_en_14_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_14_wd = reg_wdata[14];

  assign intrpt_rise_en_0_intrpt_rise_en_15_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_15_wd = reg_wdata[15];

  assign intrpt_rise_en_0_intrpt_rise_en_16_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_16_wd = reg_wdata[16];

  assign intrpt_rise_en_0_intrpt_rise_en_17_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_17_wd = reg_wdata[17];

  assign intrpt_rise_en_0_intrpt_rise_en_18_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_18_wd = reg_wdata[18];

  assign intrpt_rise_en_0_intrpt_rise_en_19_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_19_wd = reg_wdata[19];

  assign intrpt_rise_en_0_intrpt_rise_en_20_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_20_wd = reg_wdata[20];

  assign intrpt_rise_en_0_intrpt_rise_en_21_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_21_wd = reg_wdata[21];

  assign intrpt_rise_en_0_intrpt_rise_en_22_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_22_wd = reg_wdata[22];

  assign intrpt_rise_en_0_intrpt_rise_en_23_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_23_wd = reg_wdata[23];

  assign intrpt_rise_en_0_intrpt_rise_en_24_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_24_wd = reg_wdata[24];

  assign intrpt_rise_en_0_intrpt_rise_en_25_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_25_wd = reg_wdata[25];

  assign intrpt_rise_en_0_intrpt_rise_en_26_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_26_wd = reg_wdata[26];

  assign intrpt_rise_en_0_intrpt_rise_en_27_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_27_wd = reg_wdata[27];

  assign intrpt_rise_en_0_intrpt_rise_en_28_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_28_wd = reg_wdata[28];

  assign intrpt_rise_en_0_intrpt_rise_en_29_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_29_wd = reg_wdata[29];

  assign intrpt_rise_en_0_intrpt_rise_en_30_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_30_wd = reg_wdata[30];

  assign intrpt_rise_en_0_intrpt_rise_en_31_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_rise_en_0_intrpt_rise_en_31_wd = reg_wdata[31];

  assign intrpt_rise_en_1_intrpt_rise_en_32_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_32_wd = reg_wdata[0];

  assign intrpt_rise_en_1_intrpt_rise_en_33_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_33_wd = reg_wdata[1];

  assign intrpt_rise_en_1_intrpt_rise_en_34_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_34_wd = reg_wdata[2];

  assign intrpt_rise_en_1_intrpt_rise_en_35_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_35_wd = reg_wdata[3];

  assign intrpt_rise_en_1_intrpt_rise_en_36_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_36_wd = reg_wdata[4];

  assign intrpt_rise_en_1_intrpt_rise_en_37_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_37_wd = reg_wdata[5];

  assign intrpt_rise_en_1_intrpt_rise_en_38_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_38_wd = reg_wdata[6];

  assign intrpt_rise_en_1_intrpt_rise_en_39_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_39_wd = reg_wdata[7];

  assign intrpt_rise_en_1_intrpt_rise_en_40_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_40_wd = reg_wdata[8];

  assign intrpt_rise_en_1_intrpt_rise_en_41_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_41_wd = reg_wdata[9];

  assign intrpt_rise_en_1_intrpt_rise_en_42_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_42_wd = reg_wdata[10];

  assign intrpt_rise_en_1_intrpt_rise_en_43_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_43_wd = reg_wdata[11];

  assign intrpt_rise_en_1_intrpt_rise_en_44_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_44_wd = reg_wdata[12];

  assign intrpt_rise_en_1_intrpt_rise_en_45_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_45_wd = reg_wdata[13];

  assign intrpt_rise_en_1_intrpt_rise_en_46_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_46_wd = reg_wdata[14];

  assign intrpt_rise_en_1_intrpt_rise_en_47_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_47_wd = reg_wdata[15];

  assign intrpt_rise_en_1_intrpt_rise_en_48_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_48_wd = reg_wdata[16];

  assign intrpt_rise_en_1_intrpt_rise_en_49_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_49_wd = reg_wdata[17];

  assign intrpt_rise_en_1_intrpt_rise_en_50_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_50_wd = reg_wdata[18];

  assign intrpt_rise_en_1_intrpt_rise_en_51_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_51_wd = reg_wdata[19];

  assign intrpt_rise_en_1_intrpt_rise_en_52_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_52_wd = reg_wdata[20];

  assign intrpt_rise_en_1_intrpt_rise_en_53_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_53_wd = reg_wdata[21];

  assign intrpt_rise_en_1_intrpt_rise_en_54_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_54_wd = reg_wdata[22];

  assign intrpt_rise_en_1_intrpt_rise_en_55_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_rise_en_1_intrpt_rise_en_55_wd = reg_wdata[23];

  assign intrpt_fall_en_0_intrpt_fall_en_0_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_0_wd = reg_wdata[0];

  assign intrpt_fall_en_0_intrpt_fall_en_1_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_1_wd = reg_wdata[1];

  assign intrpt_fall_en_0_intrpt_fall_en_2_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_2_wd = reg_wdata[2];

  assign intrpt_fall_en_0_intrpt_fall_en_3_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_3_wd = reg_wdata[3];

  assign intrpt_fall_en_0_intrpt_fall_en_4_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_4_wd = reg_wdata[4];

  assign intrpt_fall_en_0_intrpt_fall_en_5_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_5_wd = reg_wdata[5];

  assign intrpt_fall_en_0_intrpt_fall_en_6_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_6_wd = reg_wdata[6];

  assign intrpt_fall_en_0_intrpt_fall_en_7_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_7_wd = reg_wdata[7];

  assign intrpt_fall_en_0_intrpt_fall_en_8_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_8_wd = reg_wdata[8];

  assign intrpt_fall_en_0_intrpt_fall_en_9_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_9_wd = reg_wdata[9];

  assign intrpt_fall_en_0_intrpt_fall_en_10_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_10_wd = reg_wdata[10];

  assign intrpt_fall_en_0_intrpt_fall_en_11_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_11_wd = reg_wdata[11];

  assign intrpt_fall_en_0_intrpt_fall_en_12_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_12_wd = reg_wdata[12];

  assign intrpt_fall_en_0_intrpt_fall_en_13_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_13_wd = reg_wdata[13];

  assign intrpt_fall_en_0_intrpt_fall_en_14_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_14_wd = reg_wdata[14];

  assign intrpt_fall_en_0_intrpt_fall_en_15_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_15_wd = reg_wdata[15];

  assign intrpt_fall_en_0_intrpt_fall_en_16_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_16_wd = reg_wdata[16];

  assign intrpt_fall_en_0_intrpt_fall_en_17_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_17_wd = reg_wdata[17];

  assign intrpt_fall_en_0_intrpt_fall_en_18_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_18_wd = reg_wdata[18];

  assign intrpt_fall_en_0_intrpt_fall_en_19_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_19_wd = reg_wdata[19];

  assign intrpt_fall_en_0_intrpt_fall_en_20_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_20_wd = reg_wdata[20];

  assign intrpt_fall_en_0_intrpt_fall_en_21_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_21_wd = reg_wdata[21];

  assign intrpt_fall_en_0_intrpt_fall_en_22_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_22_wd = reg_wdata[22];

  assign intrpt_fall_en_0_intrpt_fall_en_23_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_23_wd = reg_wdata[23];

  assign intrpt_fall_en_0_intrpt_fall_en_24_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_24_wd = reg_wdata[24];

  assign intrpt_fall_en_0_intrpt_fall_en_25_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_25_wd = reg_wdata[25];

  assign intrpt_fall_en_0_intrpt_fall_en_26_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_26_wd = reg_wdata[26];

  assign intrpt_fall_en_0_intrpt_fall_en_27_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_27_wd = reg_wdata[27];

  assign intrpt_fall_en_0_intrpt_fall_en_28_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_28_wd = reg_wdata[28];

  assign intrpt_fall_en_0_intrpt_fall_en_29_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_29_wd = reg_wdata[29];

  assign intrpt_fall_en_0_intrpt_fall_en_30_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_30_wd = reg_wdata[30];

  assign intrpt_fall_en_0_intrpt_fall_en_31_we = addr_hit[20] & reg_we & !reg_error;
  assign intrpt_fall_en_0_intrpt_fall_en_31_wd = reg_wdata[31];

  assign intrpt_fall_en_1_intrpt_fall_en_32_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_32_wd = reg_wdata[0];

  assign intrpt_fall_en_1_intrpt_fall_en_33_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_33_wd = reg_wdata[1];

  assign intrpt_fall_en_1_intrpt_fall_en_34_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_34_wd = reg_wdata[2];

  assign intrpt_fall_en_1_intrpt_fall_en_35_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_35_wd = reg_wdata[3];

  assign intrpt_fall_en_1_intrpt_fall_en_36_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_36_wd = reg_wdata[4];

  assign intrpt_fall_en_1_intrpt_fall_en_37_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_37_wd = reg_wdata[5];

  assign intrpt_fall_en_1_intrpt_fall_en_38_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_38_wd = reg_wdata[6];

  assign intrpt_fall_en_1_intrpt_fall_en_39_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_39_wd = reg_wdata[7];

  assign intrpt_fall_en_1_intrpt_fall_en_40_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_40_wd = reg_wdata[8];

  assign intrpt_fall_en_1_intrpt_fall_en_41_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_41_wd = reg_wdata[9];

  assign intrpt_fall_en_1_intrpt_fall_en_42_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_42_wd = reg_wdata[10];

  assign intrpt_fall_en_1_intrpt_fall_en_43_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_43_wd = reg_wdata[11];

  assign intrpt_fall_en_1_intrpt_fall_en_44_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_44_wd = reg_wdata[12];

  assign intrpt_fall_en_1_intrpt_fall_en_45_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_45_wd = reg_wdata[13];

  assign intrpt_fall_en_1_intrpt_fall_en_46_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_46_wd = reg_wdata[14];

  assign intrpt_fall_en_1_intrpt_fall_en_47_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_47_wd = reg_wdata[15];

  assign intrpt_fall_en_1_intrpt_fall_en_48_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_48_wd = reg_wdata[16];

  assign intrpt_fall_en_1_intrpt_fall_en_49_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_49_wd = reg_wdata[17];

  assign intrpt_fall_en_1_intrpt_fall_en_50_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_50_wd = reg_wdata[18];

  assign intrpt_fall_en_1_intrpt_fall_en_51_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_51_wd = reg_wdata[19];

  assign intrpt_fall_en_1_intrpt_fall_en_52_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_52_wd = reg_wdata[20];

  assign intrpt_fall_en_1_intrpt_fall_en_53_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_53_wd = reg_wdata[21];

  assign intrpt_fall_en_1_intrpt_fall_en_54_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_54_wd = reg_wdata[22];

  assign intrpt_fall_en_1_intrpt_fall_en_55_we = addr_hit[21] & reg_we & !reg_error;
  assign intrpt_fall_en_1_intrpt_fall_en_55_wd = reg_wdata[23];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_0_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_0_wd = reg_wdata[0];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_1_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_1_wd = reg_wdata[1];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_2_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_2_wd = reg_wdata[2];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_3_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_3_wd = reg_wdata[3];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_4_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_4_wd = reg_wdata[4];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_5_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_5_wd = reg_wdata[5];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_6_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_6_wd = reg_wdata[6];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_7_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_7_wd = reg_wdata[7];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_8_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_8_wd = reg_wdata[8];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_9_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_9_wd = reg_wdata[9];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_10_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_10_wd = reg_wdata[10];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_11_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_11_wd = reg_wdata[11];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_12_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_12_wd = reg_wdata[12];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_13_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_13_wd = reg_wdata[13];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_14_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_14_wd = reg_wdata[14];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_15_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_15_wd = reg_wdata[15];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_16_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_16_wd = reg_wdata[16];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_17_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_17_wd = reg_wdata[17];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_18_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_18_wd = reg_wdata[18];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_19_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_19_wd = reg_wdata[19];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_20_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_20_wd = reg_wdata[20];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_21_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_21_wd = reg_wdata[21];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_22_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_22_wd = reg_wdata[22];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_23_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_23_wd = reg_wdata[23];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_24_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_24_wd = reg_wdata[24];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_25_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_25_wd = reg_wdata[25];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_26_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_26_wd = reg_wdata[26];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_27_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_27_wd = reg_wdata[27];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_28_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_28_wd = reg_wdata[28];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_29_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_29_wd = reg_wdata[29];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_30_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_30_wd = reg_wdata[30];

  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_31_we = addr_hit[22] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_0_intrpt_lvl_high_en_31_wd = reg_wdata[31];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_32_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_32_wd = reg_wdata[0];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_33_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_33_wd = reg_wdata[1];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_34_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_34_wd = reg_wdata[2];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_35_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_35_wd = reg_wdata[3];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_36_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_36_wd = reg_wdata[4];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_37_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_37_wd = reg_wdata[5];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_38_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_38_wd = reg_wdata[6];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_39_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_39_wd = reg_wdata[7];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_40_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_40_wd = reg_wdata[8];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_41_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_41_wd = reg_wdata[9];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_42_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_42_wd = reg_wdata[10];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_43_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_43_wd = reg_wdata[11];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_44_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_44_wd = reg_wdata[12];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_45_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_45_wd = reg_wdata[13];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_46_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_46_wd = reg_wdata[14];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_47_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_47_wd = reg_wdata[15];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_48_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_48_wd = reg_wdata[16];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_49_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_49_wd = reg_wdata[17];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_50_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_50_wd = reg_wdata[18];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_51_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_51_wd = reg_wdata[19];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_52_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_52_wd = reg_wdata[20];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_53_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_53_wd = reg_wdata[21];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_54_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_54_wd = reg_wdata[22];

  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_55_we = addr_hit[23] & reg_we & !reg_error;
  assign intrpt_lvl_high_en_1_intrpt_lvl_high_en_55_wd = reg_wdata[23];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_0_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_0_wd = reg_wdata[0];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_1_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_1_wd = reg_wdata[1];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_2_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_2_wd = reg_wdata[2];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_3_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_3_wd = reg_wdata[3];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_4_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_4_wd = reg_wdata[4];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_5_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_5_wd = reg_wdata[5];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_6_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_6_wd = reg_wdata[6];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_7_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_7_wd = reg_wdata[7];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_8_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_8_wd = reg_wdata[8];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_9_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_9_wd = reg_wdata[9];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_10_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_10_wd = reg_wdata[10];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_11_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_11_wd = reg_wdata[11];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_12_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_12_wd = reg_wdata[12];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_13_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_13_wd = reg_wdata[13];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_14_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_14_wd = reg_wdata[14];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_15_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_15_wd = reg_wdata[15];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_16_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_16_wd = reg_wdata[16];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_17_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_17_wd = reg_wdata[17];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_18_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_18_wd = reg_wdata[18];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_19_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_19_wd = reg_wdata[19];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_20_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_20_wd = reg_wdata[20];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_21_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_21_wd = reg_wdata[21];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_22_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_22_wd = reg_wdata[22];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_23_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_23_wd = reg_wdata[23];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_24_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_24_wd = reg_wdata[24];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_25_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_25_wd = reg_wdata[25];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_26_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_26_wd = reg_wdata[26];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_27_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_27_wd = reg_wdata[27];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_28_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_28_wd = reg_wdata[28];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_29_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_29_wd = reg_wdata[29];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_30_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_30_wd = reg_wdata[30];

  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_31_we = addr_hit[24] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_0_intrpt_lvl_low_en_31_wd = reg_wdata[31];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_32_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_32_wd = reg_wdata[0];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_33_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_33_wd = reg_wdata[1];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_34_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_34_wd = reg_wdata[2];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_35_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_35_wd = reg_wdata[3];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_36_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_36_wd = reg_wdata[4];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_37_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_37_wd = reg_wdata[5];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_38_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_38_wd = reg_wdata[6];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_39_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_39_wd = reg_wdata[7];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_40_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_40_wd = reg_wdata[8];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_41_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_41_wd = reg_wdata[9];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_42_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_42_wd = reg_wdata[10];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_43_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_43_wd = reg_wdata[11];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_44_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_44_wd = reg_wdata[12];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_45_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_45_wd = reg_wdata[13];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_46_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_46_wd = reg_wdata[14];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_47_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_47_wd = reg_wdata[15];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_48_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_48_wd = reg_wdata[16];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_49_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_49_wd = reg_wdata[17];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_50_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_50_wd = reg_wdata[18];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_51_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_51_wd = reg_wdata[19];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_52_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_52_wd = reg_wdata[20];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_53_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_53_wd = reg_wdata[21];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_54_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_54_wd = reg_wdata[22];

  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_55_we = addr_hit[25] & reg_we & !reg_error;
  assign intrpt_lvl_low_en_1_intrpt_lvl_low_en_55_wd = reg_wdata[23];

  assign intrpt_status_0_intrpt_status_0_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_0_wd = reg_wdata[0];
  assign intrpt_status_0_intrpt_status_0_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_1_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_1_wd = reg_wdata[1];
  assign intrpt_status_0_intrpt_status_1_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_2_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_2_wd = reg_wdata[2];
  assign intrpt_status_0_intrpt_status_2_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_3_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_3_wd = reg_wdata[3];
  assign intrpt_status_0_intrpt_status_3_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_4_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_4_wd = reg_wdata[4];
  assign intrpt_status_0_intrpt_status_4_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_5_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_5_wd = reg_wdata[5];
  assign intrpt_status_0_intrpt_status_5_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_6_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_6_wd = reg_wdata[6];
  assign intrpt_status_0_intrpt_status_6_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_7_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_7_wd = reg_wdata[7];
  assign intrpt_status_0_intrpt_status_7_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_8_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_8_wd = reg_wdata[8];
  assign intrpt_status_0_intrpt_status_8_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_9_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_9_wd = reg_wdata[9];
  assign intrpt_status_0_intrpt_status_9_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_10_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_10_wd = reg_wdata[10];
  assign intrpt_status_0_intrpt_status_10_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_11_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_11_wd = reg_wdata[11];
  assign intrpt_status_0_intrpt_status_11_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_12_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_12_wd = reg_wdata[12];
  assign intrpt_status_0_intrpt_status_12_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_13_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_13_wd = reg_wdata[13];
  assign intrpt_status_0_intrpt_status_13_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_14_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_14_wd = reg_wdata[14];
  assign intrpt_status_0_intrpt_status_14_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_15_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_15_wd = reg_wdata[15];
  assign intrpt_status_0_intrpt_status_15_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_16_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_16_wd = reg_wdata[16];
  assign intrpt_status_0_intrpt_status_16_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_17_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_17_wd = reg_wdata[17];
  assign intrpt_status_0_intrpt_status_17_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_18_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_18_wd = reg_wdata[18];
  assign intrpt_status_0_intrpt_status_18_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_19_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_19_wd = reg_wdata[19];
  assign intrpt_status_0_intrpt_status_19_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_20_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_20_wd = reg_wdata[20];
  assign intrpt_status_0_intrpt_status_20_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_21_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_21_wd = reg_wdata[21];
  assign intrpt_status_0_intrpt_status_21_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_22_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_22_wd = reg_wdata[22];
  assign intrpt_status_0_intrpt_status_22_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_23_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_23_wd = reg_wdata[23];
  assign intrpt_status_0_intrpt_status_23_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_24_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_24_wd = reg_wdata[24];
  assign intrpt_status_0_intrpt_status_24_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_25_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_25_wd = reg_wdata[25];
  assign intrpt_status_0_intrpt_status_25_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_26_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_26_wd = reg_wdata[26];
  assign intrpt_status_0_intrpt_status_26_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_27_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_27_wd = reg_wdata[27];
  assign intrpt_status_0_intrpt_status_27_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_28_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_28_wd = reg_wdata[28];
  assign intrpt_status_0_intrpt_status_28_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_29_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_29_wd = reg_wdata[29];
  assign intrpt_status_0_intrpt_status_29_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_30_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_30_wd = reg_wdata[30];
  assign intrpt_status_0_intrpt_status_30_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_0_intrpt_status_31_we = addr_hit[26] & reg_we & !reg_error;
  assign intrpt_status_0_intrpt_status_31_wd = reg_wdata[31];
  assign intrpt_status_0_intrpt_status_31_re = addr_hit[26] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_32_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_32_wd = reg_wdata[0];
  assign intrpt_status_1_intrpt_status_32_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_33_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_33_wd = reg_wdata[1];
  assign intrpt_status_1_intrpt_status_33_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_34_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_34_wd = reg_wdata[2];
  assign intrpt_status_1_intrpt_status_34_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_35_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_35_wd = reg_wdata[3];
  assign intrpt_status_1_intrpt_status_35_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_36_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_36_wd = reg_wdata[4];
  assign intrpt_status_1_intrpt_status_36_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_37_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_37_wd = reg_wdata[5];
  assign intrpt_status_1_intrpt_status_37_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_38_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_38_wd = reg_wdata[6];
  assign intrpt_status_1_intrpt_status_38_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_39_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_39_wd = reg_wdata[7];
  assign intrpt_status_1_intrpt_status_39_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_40_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_40_wd = reg_wdata[8];
  assign intrpt_status_1_intrpt_status_40_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_41_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_41_wd = reg_wdata[9];
  assign intrpt_status_1_intrpt_status_41_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_42_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_42_wd = reg_wdata[10];
  assign intrpt_status_1_intrpt_status_42_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_43_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_43_wd = reg_wdata[11];
  assign intrpt_status_1_intrpt_status_43_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_44_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_44_wd = reg_wdata[12];
  assign intrpt_status_1_intrpt_status_44_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_45_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_45_wd = reg_wdata[13];
  assign intrpt_status_1_intrpt_status_45_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_46_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_46_wd = reg_wdata[14];
  assign intrpt_status_1_intrpt_status_46_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_47_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_47_wd = reg_wdata[15];
  assign intrpt_status_1_intrpt_status_47_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_48_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_48_wd = reg_wdata[16];
  assign intrpt_status_1_intrpt_status_48_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_49_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_49_wd = reg_wdata[17];
  assign intrpt_status_1_intrpt_status_49_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_50_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_50_wd = reg_wdata[18];
  assign intrpt_status_1_intrpt_status_50_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_51_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_51_wd = reg_wdata[19];
  assign intrpt_status_1_intrpt_status_51_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_52_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_52_wd = reg_wdata[20];
  assign intrpt_status_1_intrpt_status_52_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_53_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_53_wd = reg_wdata[21];
  assign intrpt_status_1_intrpt_status_53_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_54_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_54_wd = reg_wdata[22];
  assign intrpt_status_1_intrpt_status_54_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_status_1_intrpt_status_55_we = addr_hit[27] & reg_we & !reg_error;
  assign intrpt_status_1_intrpt_status_55_wd = reg_wdata[23];
  assign intrpt_status_1_intrpt_status_55_re = addr_hit[27] & reg_re & !reg_error;

  assign intrpt_rise_status_0_intrpt_rise_status_0_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_0_wd = reg_wdata[0];

  assign intrpt_rise_status_0_intrpt_rise_status_1_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_1_wd = reg_wdata[1];

  assign intrpt_rise_status_0_intrpt_rise_status_2_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_2_wd = reg_wdata[2];

  assign intrpt_rise_status_0_intrpt_rise_status_3_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_3_wd = reg_wdata[3];

  assign intrpt_rise_status_0_intrpt_rise_status_4_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_4_wd = reg_wdata[4];

  assign intrpt_rise_status_0_intrpt_rise_status_5_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_5_wd = reg_wdata[5];

  assign intrpt_rise_status_0_intrpt_rise_status_6_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_6_wd = reg_wdata[6];

  assign intrpt_rise_status_0_intrpt_rise_status_7_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_7_wd = reg_wdata[7];

  assign intrpt_rise_status_0_intrpt_rise_status_8_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_8_wd = reg_wdata[8];

  assign intrpt_rise_status_0_intrpt_rise_status_9_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_9_wd = reg_wdata[9];

  assign intrpt_rise_status_0_intrpt_rise_status_10_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_10_wd = reg_wdata[10];

  assign intrpt_rise_status_0_intrpt_rise_status_11_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_11_wd = reg_wdata[11];

  assign intrpt_rise_status_0_intrpt_rise_status_12_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_12_wd = reg_wdata[12];

  assign intrpt_rise_status_0_intrpt_rise_status_13_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_13_wd = reg_wdata[13];

  assign intrpt_rise_status_0_intrpt_rise_status_14_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_14_wd = reg_wdata[14];

  assign intrpt_rise_status_0_intrpt_rise_status_15_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_15_wd = reg_wdata[15];

  assign intrpt_rise_status_0_intrpt_rise_status_16_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_16_wd = reg_wdata[16];

  assign intrpt_rise_status_0_intrpt_rise_status_17_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_17_wd = reg_wdata[17];

  assign intrpt_rise_status_0_intrpt_rise_status_18_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_18_wd = reg_wdata[18];

  assign intrpt_rise_status_0_intrpt_rise_status_19_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_19_wd = reg_wdata[19];

  assign intrpt_rise_status_0_intrpt_rise_status_20_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_20_wd = reg_wdata[20];

  assign intrpt_rise_status_0_intrpt_rise_status_21_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_21_wd = reg_wdata[21];

  assign intrpt_rise_status_0_intrpt_rise_status_22_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_22_wd = reg_wdata[22];

  assign intrpt_rise_status_0_intrpt_rise_status_23_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_23_wd = reg_wdata[23];

  assign intrpt_rise_status_0_intrpt_rise_status_24_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_24_wd = reg_wdata[24];

  assign intrpt_rise_status_0_intrpt_rise_status_25_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_25_wd = reg_wdata[25];

  assign intrpt_rise_status_0_intrpt_rise_status_26_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_26_wd = reg_wdata[26];

  assign intrpt_rise_status_0_intrpt_rise_status_27_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_27_wd = reg_wdata[27];

  assign intrpt_rise_status_0_intrpt_rise_status_28_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_28_wd = reg_wdata[28];

  assign intrpt_rise_status_0_intrpt_rise_status_29_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_29_wd = reg_wdata[29];

  assign intrpt_rise_status_0_intrpt_rise_status_30_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_30_wd = reg_wdata[30];

  assign intrpt_rise_status_0_intrpt_rise_status_31_we = addr_hit[28] & reg_we & !reg_error;
  assign intrpt_rise_status_0_intrpt_rise_status_31_wd = reg_wdata[31];

  assign intrpt_rise_status_1_intrpt_rise_status_32_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_32_wd = reg_wdata[0];

  assign intrpt_rise_status_1_intrpt_rise_status_33_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_33_wd = reg_wdata[1];

  assign intrpt_rise_status_1_intrpt_rise_status_34_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_34_wd = reg_wdata[2];

  assign intrpt_rise_status_1_intrpt_rise_status_35_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_35_wd = reg_wdata[3];

  assign intrpt_rise_status_1_intrpt_rise_status_36_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_36_wd = reg_wdata[4];

  assign intrpt_rise_status_1_intrpt_rise_status_37_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_37_wd = reg_wdata[5];

  assign intrpt_rise_status_1_intrpt_rise_status_38_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_38_wd = reg_wdata[6];

  assign intrpt_rise_status_1_intrpt_rise_status_39_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_39_wd = reg_wdata[7];

  assign intrpt_rise_status_1_intrpt_rise_status_40_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_40_wd = reg_wdata[8];

  assign intrpt_rise_status_1_intrpt_rise_status_41_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_41_wd = reg_wdata[9];

  assign intrpt_rise_status_1_intrpt_rise_status_42_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_42_wd = reg_wdata[10];

  assign intrpt_rise_status_1_intrpt_rise_status_43_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_43_wd = reg_wdata[11];

  assign intrpt_rise_status_1_intrpt_rise_status_44_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_44_wd = reg_wdata[12];

  assign intrpt_rise_status_1_intrpt_rise_status_45_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_45_wd = reg_wdata[13];

  assign intrpt_rise_status_1_intrpt_rise_status_46_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_46_wd = reg_wdata[14];

  assign intrpt_rise_status_1_intrpt_rise_status_47_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_47_wd = reg_wdata[15];

  assign intrpt_rise_status_1_intrpt_rise_status_48_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_48_wd = reg_wdata[16];

  assign intrpt_rise_status_1_intrpt_rise_status_49_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_49_wd = reg_wdata[17];

  assign intrpt_rise_status_1_intrpt_rise_status_50_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_50_wd = reg_wdata[18];

  assign intrpt_rise_status_1_intrpt_rise_status_51_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_51_wd = reg_wdata[19];

  assign intrpt_rise_status_1_intrpt_rise_status_52_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_52_wd = reg_wdata[20];

  assign intrpt_rise_status_1_intrpt_rise_status_53_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_53_wd = reg_wdata[21];

  assign intrpt_rise_status_1_intrpt_rise_status_54_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_54_wd = reg_wdata[22];

  assign intrpt_rise_status_1_intrpt_rise_status_55_we = addr_hit[29] & reg_we & !reg_error;
  assign intrpt_rise_status_1_intrpt_rise_status_55_wd = reg_wdata[23];

  assign intrpt_fall_status_0_intrpt_fall_status_0_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_0_wd = reg_wdata[0];

  assign intrpt_fall_status_0_intrpt_fall_status_1_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_1_wd = reg_wdata[1];

  assign intrpt_fall_status_0_intrpt_fall_status_2_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_2_wd = reg_wdata[2];

  assign intrpt_fall_status_0_intrpt_fall_status_3_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_3_wd = reg_wdata[3];

  assign intrpt_fall_status_0_intrpt_fall_status_4_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_4_wd = reg_wdata[4];

  assign intrpt_fall_status_0_intrpt_fall_status_5_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_5_wd = reg_wdata[5];

  assign intrpt_fall_status_0_intrpt_fall_status_6_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_6_wd = reg_wdata[6];

  assign intrpt_fall_status_0_intrpt_fall_status_7_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_7_wd = reg_wdata[7];

  assign intrpt_fall_status_0_intrpt_fall_status_8_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_8_wd = reg_wdata[8];

  assign intrpt_fall_status_0_intrpt_fall_status_9_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_9_wd = reg_wdata[9];

  assign intrpt_fall_status_0_intrpt_fall_status_10_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_10_wd = reg_wdata[10];

  assign intrpt_fall_status_0_intrpt_fall_status_11_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_11_wd = reg_wdata[11];

  assign intrpt_fall_status_0_intrpt_fall_status_12_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_12_wd = reg_wdata[12];

  assign intrpt_fall_status_0_intrpt_fall_status_13_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_13_wd = reg_wdata[13];

  assign intrpt_fall_status_0_intrpt_fall_status_14_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_14_wd = reg_wdata[14];

  assign intrpt_fall_status_0_intrpt_fall_status_15_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_15_wd = reg_wdata[15];

  assign intrpt_fall_status_0_intrpt_fall_status_16_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_16_wd = reg_wdata[16];

  assign intrpt_fall_status_0_intrpt_fall_status_17_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_17_wd = reg_wdata[17];

  assign intrpt_fall_status_0_intrpt_fall_status_18_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_18_wd = reg_wdata[18];

  assign intrpt_fall_status_0_intrpt_fall_status_19_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_19_wd = reg_wdata[19];

  assign intrpt_fall_status_0_intrpt_fall_status_20_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_20_wd = reg_wdata[20];

  assign intrpt_fall_status_0_intrpt_fall_status_21_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_21_wd = reg_wdata[21];

  assign intrpt_fall_status_0_intrpt_fall_status_22_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_22_wd = reg_wdata[22];

  assign intrpt_fall_status_0_intrpt_fall_status_23_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_23_wd = reg_wdata[23];

  assign intrpt_fall_status_0_intrpt_fall_status_24_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_24_wd = reg_wdata[24];

  assign intrpt_fall_status_0_intrpt_fall_status_25_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_25_wd = reg_wdata[25];

  assign intrpt_fall_status_0_intrpt_fall_status_26_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_26_wd = reg_wdata[26];

  assign intrpt_fall_status_0_intrpt_fall_status_27_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_27_wd = reg_wdata[27];

  assign intrpt_fall_status_0_intrpt_fall_status_28_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_28_wd = reg_wdata[28];

  assign intrpt_fall_status_0_intrpt_fall_status_29_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_29_wd = reg_wdata[29];

  assign intrpt_fall_status_0_intrpt_fall_status_30_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_30_wd = reg_wdata[30];

  assign intrpt_fall_status_0_intrpt_fall_status_31_we = addr_hit[30] & reg_we & !reg_error;
  assign intrpt_fall_status_0_intrpt_fall_status_31_wd = reg_wdata[31];

  assign intrpt_fall_status_1_intrpt_fall_status_32_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_32_wd = reg_wdata[0];

  assign intrpt_fall_status_1_intrpt_fall_status_33_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_33_wd = reg_wdata[1];

  assign intrpt_fall_status_1_intrpt_fall_status_34_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_34_wd = reg_wdata[2];

  assign intrpt_fall_status_1_intrpt_fall_status_35_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_35_wd = reg_wdata[3];

  assign intrpt_fall_status_1_intrpt_fall_status_36_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_36_wd = reg_wdata[4];

  assign intrpt_fall_status_1_intrpt_fall_status_37_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_37_wd = reg_wdata[5];

  assign intrpt_fall_status_1_intrpt_fall_status_38_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_38_wd = reg_wdata[6];

  assign intrpt_fall_status_1_intrpt_fall_status_39_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_39_wd = reg_wdata[7];

  assign intrpt_fall_status_1_intrpt_fall_status_40_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_40_wd = reg_wdata[8];

  assign intrpt_fall_status_1_intrpt_fall_status_41_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_41_wd = reg_wdata[9];

  assign intrpt_fall_status_1_intrpt_fall_status_42_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_42_wd = reg_wdata[10];

  assign intrpt_fall_status_1_intrpt_fall_status_43_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_43_wd = reg_wdata[11];

  assign intrpt_fall_status_1_intrpt_fall_status_44_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_44_wd = reg_wdata[12];

  assign intrpt_fall_status_1_intrpt_fall_status_45_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_45_wd = reg_wdata[13];

  assign intrpt_fall_status_1_intrpt_fall_status_46_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_46_wd = reg_wdata[14];

  assign intrpt_fall_status_1_intrpt_fall_status_47_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_47_wd = reg_wdata[15];

  assign intrpt_fall_status_1_intrpt_fall_status_48_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_48_wd = reg_wdata[16];

  assign intrpt_fall_status_1_intrpt_fall_status_49_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_49_wd = reg_wdata[17];

  assign intrpt_fall_status_1_intrpt_fall_status_50_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_50_wd = reg_wdata[18];

  assign intrpt_fall_status_1_intrpt_fall_status_51_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_51_wd = reg_wdata[19];

  assign intrpt_fall_status_1_intrpt_fall_status_52_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_52_wd = reg_wdata[20];

  assign intrpt_fall_status_1_intrpt_fall_status_53_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_53_wd = reg_wdata[21];

  assign intrpt_fall_status_1_intrpt_fall_status_54_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_54_wd = reg_wdata[22];

  assign intrpt_fall_status_1_intrpt_fall_status_55_we = addr_hit[31] & reg_we & !reg_error;
  assign intrpt_fall_status_1_intrpt_fall_status_55_wd = reg_wdata[23];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_0_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_0_wd = reg_wdata[0];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_1_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_1_wd = reg_wdata[1];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_2_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_2_wd = reg_wdata[2];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_3_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_3_wd = reg_wdata[3];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_4_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_4_wd = reg_wdata[4];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_5_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_5_wd = reg_wdata[5];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_6_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_6_wd = reg_wdata[6];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_7_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_7_wd = reg_wdata[7];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_8_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_8_wd = reg_wdata[8];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_9_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_9_wd = reg_wdata[9];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_10_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_10_wd = reg_wdata[10];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_11_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_11_wd = reg_wdata[11];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_12_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_12_wd = reg_wdata[12];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_13_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_13_wd = reg_wdata[13];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_14_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_14_wd = reg_wdata[14];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_15_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_15_wd = reg_wdata[15];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_16_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_16_wd = reg_wdata[16];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_17_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_17_wd = reg_wdata[17];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_18_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_18_wd = reg_wdata[18];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_19_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_19_wd = reg_wdata[19];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_20_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_20_wd = reg_wdata[20];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_21_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_21_wd = reg_wdata[21];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_22_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_22_wd = reg_wdata[22];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_23_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_23_wd = reg_wdata[23];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_24_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_24_wd = reg_wdata[24];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_25_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_25_wd = reg_wdata[25];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_26_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_26_wd = reg_wdata[26];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_27_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_27_wd = reg_wdata[27];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_28_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_28_wd = reg_wdata[28];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_29_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_29_wd = reg_wdata[29];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_30_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_30_wd = reg_wdata[30];

  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_31_we = addr_hit[32] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_0_intrpt_lvl_high_status_31_wd = reg_wdata[31];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_32_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_32_wd = reg_wdata[0];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_33_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_33_wd = reg_wdata[1];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_34_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_34_wd = reg_wdata[2];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_35_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_35_wd = reg_wdata[3];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_36_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_36_wd = reg_wdata[4];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_37_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_37_wd = reg_wdata[5];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_38_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_38_wd = reg_wdata[6];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_39_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_39_wd = reg_wdata[7];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_40_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_40_wd = reg_wdata[8];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_41_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_41_wd = reg_wdata[9];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_42_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_42_wd = reg_wdata[10];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_43_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_43_wd = reg_wdata[11];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_44_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_44_wd = reg_wdata[12];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_45_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_45_wd = reg_wdata[13];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_46_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_46_wd = reg_wdata[14];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_47_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_47_wd = reg_wdata[15];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_48_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_48_wd = reg_wdata[16];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_49_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_49_wd = reg_wdata[17];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_50_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_50_wd = reg_wdata[18];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_51_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_51_wd = reg_wdata[19];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_52_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_52_wd = reg_wdata[20];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_53_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_53_wd = reg_wdata[21];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_54_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_54_wd = reg_wdata[22];

  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_55_we = addr_hit[33] & reg_we & !reg_error;
  assign intrpt_lvl_high_status_1_intrpt_lvl_high_status_55_wd = reg_wdata[23];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_0_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_0_wd = reg_wdata[0];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_1_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_1_wd = reg_wdata[1];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_2_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_2_wd = reg_wdata[2];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_3_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_3_wd = reg_wdata[3];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_4_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_4_wd = reg_wdata[4];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_5_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_5_wd = reg_wdata[5];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_6_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_6_wd = reg_wdata[6];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_7_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_7_wd = reg_wdata[7];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_8_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_8_wd = reg_wdata[8];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_9_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_9_wd = reg_wdata[9];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_10_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_10_wd = reg_wdata[10];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_11_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_11_wd = reg_wdata[11];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_12_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_12_wd = reg_wdata[12];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_13_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_13_wd = reg_wdata[13];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_14_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_14_wd = reg_wdata[14];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_15_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_15_wd = reg_wdata[15];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_16_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_16_wd = reg_wdata[16];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_17_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_17_wd = reg_wdata[17];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_18_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_18_wd = reg_wdata[18];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_19_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_19_wd = reg_wdata[19];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_20_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_20_wd = reg_wdata[20];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_21_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_21_wd = reg_wdata[21];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_22_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_22_wd = reg_wdata[22];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_23_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_23_wd = reg_wdata[23];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_24_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_24_wd = reg_wdata[24];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_25_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_25_wd = reg_wdata[25];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_26_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_26_wd = reg_wdata[26];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_27_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_27_wd = reg_wdata[27];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_28_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_28_wd = reg_wdata[28];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_29_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_29_wd = reg_wdata[29];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_30_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_30_wd = reg_wdata[30];

  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_31_we = addr_hit[34] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_0_intrpt_lvl_low_status_31_wd = reg_wdata[31];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_32_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_32_wd = reg_wdata[0];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_33_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_33_wd = reg_wdata[1];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_34_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_34_wd = reg_wdata[2];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_35_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_35_wd = reg_wdata[3];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_36_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_36_wd = reg_wdata[4];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_37_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_37_wd = reg_wdata[5];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_38_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_38_wd = reg_wdata[6];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_39_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_39_wd = reg_wdata[7];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_40_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_40_wd = reg_wdata[8];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_41_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_41_wd = reg_wdata[9];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_42_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_42_wd = reg_wdata[10];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_43_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_43_wd = reg_wdata[11];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_44_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_44_wd = reg_wdata[12];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_45_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_45_wd = reg_wdata[13];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_46_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_46_wd = reg_wdata[14];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_47_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_47_wd = reg_wdata[15];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_48_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_48_wd = reg_wdata[16];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_49_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_49_wd = reg_wdata[17];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_50_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_50_wd = reg_wdata[18];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_51_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_51_wd = reg_wdata[19];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_52_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_52_wd = reg_wdata[20];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_53_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_53_wd = reg_wdata[21];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_54_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_54_wd = reg_wdata[22];

  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_55_we = addr_hit[35] & reg_we & !reg_error;
  assign intrpt_lvl_low_status_1_intrpt_lvl_low_status_55_wd = reg_wdata[23];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[9:0] = info_gpio_cnt_qs;
        reg_rdata_next[19:10] = info_version_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = cfg_intrpt_mode_qs;
        reg_rdata_next[1] = cfg_reserved_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[1:0] = gpio_mode_0_mode_0_qs;
        reg_rdata_next[3:2] = gpio_mode_0_mode_1_qs;
        reg_rdata_next[5:4] = gpio_mode_0_mode_2_qs;
        reg_rdata_next[7:6] = gpio_mode_0_mode_3_qs;
        reg_rdata_next[9:8] = gpio_mode_0_mode_4_qs;
        reg_rdata_next[11:10] = gpio_mode_0_mode_5_qs;
        reg_rdata_next[13:12] = gpio_mode_0_mode_6_qs;
        reg_rdata_next[15:14] = gpio_mode_0_mode_7_qs;
        reg_rdata_next[17:16] = gpio_mode_0_mode_8_qs;
        reg_rdata_next[19:18] = gpio_mode_0_mode_9_qs;
        reg_rdata_next[21:20] = gpio_mode_0_mode_10_qs;
        reg_rdata_next[23:22] = gpio_mode_0_mode_11_qs;
        reg_rdata_next[25:24] = gpio_mode_0_mode_12_qs;
        reg_rdata_next[27:26] = gpio_mode_0_mode_13_qs;
        reg_rdata_next[29:28] = gpio_mode_0_mode_14_qs;
        reg_rdata_next[31:30] = gpio_mode_0_mode_15_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[1:0] = gpio_mode_1_mode_16_qs;
        reg_rdata_next[3:2] = gpio_mode_1_mode_17_qs;
        reg_rdata_next[5:4] = gpio_mode_1_mode_18_qs;
        reg_rdata_next[7:6] = gpio_mode_1_mode_19_qs;
        reg_rdata_next[9:8] = gpio_mode_1_mode_20_qs;
        reg_rdata_next[11:10] = gpio_mode_1_mode_21_qs;
        reg_rdata_next[13:12] = gpio_mode_1_mode_22_qs;
        reg_rdata_next[15:14] = gpio_mode_1_mode_23_qs;
        reg_rdata_next[17:16] = gpio_mode_1_mode_24_qs;
        reg_rdata_next[19:18] = gpio_mode_1_mode_25_qs;
        reg_rdata_next[21:20] = gpio_mode_1_mode_26_qs;
        reg_rdata_next[23:22] = gpio_mode_1_mode_27_qs;
        reg_rdata_next[25:24] = gpio_mode_1_mode_28_qs;
        reg_rdata_next[27:26] = gpio_mode_1_mode_29_qs;
        reg_rdata_next[29:28] = gpio_mode_1_mode_30_qs;
        reg_rdata_next[31:30] = gpio_mode_1_mode_31_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[1:0] = gpio_mode_2_mode_32_qs;
        reg_rdata_next[3:2] = gpio_mode_2_mode_33_qs;
        reg_rdata_next[5:4] = gpio_mode_2_mode_34_qs;
        reg_rdata_next[7:6] = gpio_mode_2_mode_35_qs;
        reg_rdata_next[9:8] = gpio_mode_2_mode_36_qs;
        reg_rdata_next[11:10] = gpio_mode_2_mode_37_qs;
        reg_rdata_next[13:12] = gpio_mode_2_mode_38_qs;
        reg_rdata_next[15:14] = gpio_mode_2_mode_39_qs;
        reg_rdata_next[17:16] = gpio_mode_2_mode_40_qs;
        reg_rdata_next[19:18] = gpio_mode_2_mode_41_qs;
        reg_rdata_next[21:20] = gpio_mode_2_mode_42_qs;
        reg_rdata_next[23:22] = gpio_mode_2_mode_43_qs;
        reg_rdata_next[25:24] = gpio_mode_2_mode_44_qs;
        reg_rdata_next[27:26] = gpio_mode_2_mode_45_qs;
        reg_rdata_next[29:28] = gpio_mode_2_mode_46_qs;
        reg_rdata_next[31:30] = gpio_mode_2_mode_47_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[1:0] = gpio_mode_3_mode_48_qs;
        reg_rdata_next[3:2] = gpio_mode_3_mode_49_qs;
        reg_rdata_next[5:4] = gpio_mode_3_mode_50_qs;
        reg_rdata_next[7:6] = gpio_mode_3_mode_51_qs;
        reg_rdata_next[9:8] = gpio_mode_3_mode_52_qs;
        reg_rdata_next[11:10] = gpio_mode_3_mode_53_qs;
        reg_rdata_next[13:12] = gpio_mode_3_mode_54_qs;
        reg_rdata_next[15:14] = gpio_mode_3_mode_55_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = gpio_en_0_gpio_en_0_qs;
        reg_rdata_next[1] = gpio_en_0_gpio_en_1_qs;
        reg_rdata_next[2] = gpio_en_0_gpio_en_2_qs;
        reg_rdata_next[3] = gpio_en_0_gpio_en_3_qs;
        reg_rdata_next[4] = gpio_en_0_gpio_en_4_qs;
        reg_rdata_next[5] = gpio_en_0_gpio_en_5_qs;
        reg_rdata_next[6] = gpio_en_0_gpio_en_6_qs;
        reg_rdata_next[7] = gpio_en_0_gpio_en_7_qs;
        reg_rdata_next[8] = gpio_en_0_gpio_en_8_qs;
        reg_rdata_next[9] = gpio_en_0_gpio_en_9_qs;
        reg_rdata_next[10] = gpio_en_0_gpio_en_10_qs;
        reg_rdata_next[11] = gpio_en_0_gpio_en_11_qs;
        reg_rdata_next[12] = gpio_en_0_gpio_en_12_qs;
        reg_rdata_next[13] = gpio_en_0_gpio_en_13_qs;
        reg_rdata_next[14] = gpio_en_0_gpio_en_14_qs;
        reg_rdata_next[15] = gpio_en_0_gpio_en_15_qs;
        reg_rdata_next[16] = gpio_en_0_gpio_en_16_qs;
        reg_rdata_next[17] = gpio_en_0_gpio_en_17_qs;
        reg_rdata_next[18] = gpio_en_0_gpio_en_18_qs;
        reg_rdata_next[19] = gpio_en_0_gpio_en_19_qs;
        reg_rdata_next[20] = gpio_en_0_gpio_en_20_qs;
        reg_rdata_next[21] = gpio_en_0_gpio_en_21_qs;
        reg_rdata_next[22] = gpio_en_0_gpio_en_22_qs;
        reg_rdata_next[23] = gpio_en_0_gpio_en_23_qs;
        reg_rdata_next[24] = gpio_en_0_gpio_en_24_qs;
        reg_rdata_next[25] = gpio_en_0_gpio_en_25_qs;
        reg_rdata_next[26] = gpio_en_0_gpio_en_26_qs;
        reg_rdata_next[27] = gpio_en_0_gpio_en_27_qs;
        reg_rdata_next[28] = gpio_en_0_gpio_en_28_qs;
        reg_rdata_next[29] = gpio_en_0_gpio_en_29_qs;
        reg_rdata_next[30] = gpio_en_0_gpio_en_30_qs;
        reg_rdata_next[31] = gpio_en_0_gpio_en_31_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = gpio_en_1_gpio_en_32_qs;
        reg_rdata_next[1] = gpio_en_1_gpio_en_33_qs;
        reg_rdata_next[2] = gpio_en_1_gpio_en_34_qs;
        reg_rdata_next[3] = gpio_en_1_gpio_en_35_qs;
        reg_rdata_next[4] = gpio_en_1_gpio_en_36_qs;
        reg_rdata_next[5] = gpio_en_1_gpio_en_37_qs;
        reg_rdata_next[6] = gpio_en_1_gpio_en_38_qs;
        reg_rdata_next[7] = gpio_en_1_gpio_en_39_qs;
        reg_rdata_next[8] = gpio_en_1_gpio_en_40_qs;
        reg_rdata_next[9] = gpio_en_1_gpio_en_41_qs;
        reg_rdata_next[10] = gpio_en_1_gpio_en_42_qs;
        reg_rdata_next[11] = gpio_en_1_gpio_en_43_qs;
        reg_rdata_next[12] = gpio_en_1_gpio_en_44_qs;
        reg_rdata_next[13] = gpio_en_1_gpio_en_45_qs;
        reg_rdata_next[14] = gpio_en_1_gpio_en_46_qs;
        reg_rdata_next[15] = gpio_en_1_gpio_en_47_qs;
        reg_rdata_next[16] = gpio_en_1_gpio_en_48_qs;
        reg_rdata_next[17] = gpio_en_1_gpio_en_49_qs;
        reg_rdata_next[18] = gpio_en_1_gpio_en_50_qs;
        reg_rdata_next[19] = gpio_en_1_gpio_en_51_qs;
        reg_rdata_next[20] = gpio_en_1_gpio_en_52_qs;
        reg_rdata_next[21] = gpio_en_1_gpio_en_53_qs;
        reg_rdata_next[22] = gpio_en_1_gpio_en_54_qs;
        reg_rdata_next[23] = gpio_en_1_gpio_en_55_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = gpio_in_0_gpio_in_0_qs;
        reg_rdata_next[1] = gpio_in_0_gpio_in_1_qs;
        reg_rdata_next[2] = gpio_in_0_gpio_in_2_qs;
        reg_rdata_next[3] = gpio_in_0_gpio_in_3_qs;
        reg_rdata_next[4] = gpio_in_0_gpio_in_4_qs;
        reg_rdata_next[5] = gpio_in_0_gpio_in_5_qs;
        reg_rdata_next[6] = gpio_in_0_gpio_in_6_qs;
        reg_rdata_next[7] = gpio_in_0_gpio_in_7_qs;
        reg_rdata_next[8] = gpio_in_0_gpio_in_8_qs;
        reg_rdata_next[9] = gpio_in_0_gpio_in_9_qs;
        reg_rdata_next[10] = gpio_in_0_gpio_in_10_qs;
        reg_rdata_next[11] = gpio_in_0_gpio_in_11_qs;
        reg_rdata_next[12] = gpio_in_0_gpio_in_12_qs;
        reg_rdata_next[13] = gpio_in_0_gpio_in_13_qs;
        reg_rdata_next[14] = gpio_in_0_gpio_in_14_qs;
        reg_rdata_next[15] = gpio_in_0_gpio_in_15_qs;
        reg_rdata_next[16] = gpio_in_0_gpio_in_16_qs;
        reg_rdata_next[17] = gpio_in_0_gpio_in_17_qs;
        reg_rdata_next[18] = gpio_in_0_gpio_in_18_qs;
        reg_rdata_next[19] = gpio_in_0_gpio_in_19_qs;
        reg_rdata_next[20] = gpio_in_0_gpio_in_20_qs;
        reg_rdata_next[21] = gpio_in_0_gpio_in_21_qs;
        reg_rdata_next[22] = gpio_in_0_gpio_in_22_qs;
        reg_rdata_next[23] = gpio_in_0_gpio_in_23_qs;
        reg_rdata_next[24] = gpio_in_0_gpio_in_24_qs;
        reg_rdata_next[25] = gpio_in_0_gpio_in_25_qs;
        reg_rdata_next[26] = gpio_in_0_gpio_in_26_qs;
        reg_rdata_next[27] = gpio_in_0_gpio_in_27_qs;
        reg_rdata_next[28] = gpio_in_0_gpio_in_28_qs;
        reg_rdata_next[29] = gpio_in_0_gpio_in_29_qs;
        reg_rdata_next[30] = gpio_in_0_gpio_in_30_qs;
        reg_rdata_next[31] = gpio_in_0_gpio_in_31_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = gpio_in_1_gpio_in_32_qs;
        reg_rdata_next[1] = gpio_in_1_gpio_in_33_qs;
        reg_rdata_next[2] = gpio_in_1_gpio_in_34_qs;
        reg_rdata_next[3] = gpio_in_1_gpio_in_35_qs;
        reg_rdata_next[4] = gpio_in_1_gpio_in_36_qs;
        reg_rdata_next[5] = gpio_in_1_gpio_in_37_qs;
        reg_rdata_next[6] = gpio_in_1_gpio_in_38_qs;
        reg_rdata_next[7] = gpio_in_1_gpio_in_39_qs;
        reg_rdata_next[8] = gpio_in_1_gpio_in_40_qs;
        reg_rdata_next[9] = gpio_in_1_gpio_in_41_qs;
        reg_rdata_next[10] = gpio_in_1_gpio_in_42_qs;
        reg_rdata_next[11] = gpio_in_1_gpio_in_43_qs;
        reg_rdata_next[12] = gpio_in_1_gpio_in_44_qs;
        reg_rdata_next[13] = gpio_in_1_gpio_in_45_qs;
        reg_rdata_next[14] = gpio_in_1_gpio_in_46_qs;
        reg_rdata_next[15] = gpio_in_1_gpio_in_47_qs;
        reg_rdata_next[16] = gpio_in_1_gpio_in_48_qs;
        reg_rdata_next[17] = gpio_in_1_gpio_in_49_qs;
        reg_rdata_next[18] = gpio_in_1_gpio_in_50_qs;
        reg_rdata_next[19] = gpio_in_1_gpio_in_51_qs;
        reg_rdata_next[20] = gpio_in_1_gpio_in_52_qs;
        reg_rdata_next[21] = gpio_in_1_gpio_in_53_qs;
        reg_rdata_next[22] = gpio_in_1_gpio_in_54_qs;
        reg_rdata_next[23] = gpio_in_1_gpio_in_55_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = gpio_out_0_gpio_out_0_qs;
        reg_rdata_next[1] = gpio_out_0_gpio_out_1_qs;
        reg_rdata_next[2] = gpio_out_0_gpio_out_2_qs;
        reg_rdata_next[3] = gpio_out_0_gpio_out_3_qs;
        reg_rdata_next[4] = gpio_out_0_gpio_out_4_qs;
        reg_rdata_next[5] = gpio_out_0_gpio_out_5_qs;
        reg_rdata_next[6] = gpio_out_0_gpio_out_6_qs;
        reg_rdata_next[7] = gpio_out_0_gpio_out_7_qs;
        reg_rdata_next[8] = gpio_out_0_gpio_out_8_qs;
        reg_rdata_next[9] = gpio_out_0_gpio_out_9_qs;
        reg_rdata_next[10] = gpio_out_0_gpio_out_10_qs;
        reg_rdata_next[11] = gpio_out_0_gpio_out_11_qs;
        reg_rdata_next[12] = gpio_out_0_gpio_out_12_qs;
        reg_rdata_next[13] = gpio_out_0_gpio_out_13_qs;
        reg_rdata_next[14] = gpio_out_0_gpio_out_14_qs;
        reg_rdata_next[15] = gpio_out_0_gpio_out_15_qs;
        reg_rdata_next[16] = gpio_out_0_gpio_out_16_qs;
        reg_rdata_next[17] = gpio_out_0_gpio_out_17_qs;
        reg_rdata_next[18] = gpio_out_0_gpio_out_18_qs;
        reg_rdata_next[19] = gpio_out_0_gpio_out_19_qs;
        reg_rdata_next[20] = gpio_out_0_gpio_out_20_qs;
        reg_rdata_next[21] = gpio_out_0_gpio_out_21_qs;
        reg_rdata_next[22] = gpio_out_0_gpio_out_22_qs;
        reg_rdata_next[23] = gpio_out_0_gpio_out_23_qs;
        reg_rdata_next[24] = gpio_out_0_gpio_out_24_qs;
        reg_rdata_next[25] = gpio_out_0_gpio_out_25_qs;
        reg_rdata_next[26] = gpio_out_0_gpio_out_26_qs;
        reg_rdata_next[27] = gpio_out_0_gpio_out_27_qs;
        reg_rdata_next[28] = gpio_out_0_gpio_out_28_qs;
        reg_rdata_next[29] = gpio_out_0_gpio_out_29_qs;
        reg_rdata_next[30] = gpio_out_0_gpio_out_30_qs;
        reg_rdata_next[31] = gpio_out_0_gpio_out_31_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = gpio_out_1_gpio_out_32_qs;
        reg_rdata_next[1] = gpio_out_1_gpio_out_33_qs;
        reg_rdata_next[2] = gpio_out_1_gpio_out_34_qs;
        reg_rdata_next[3] = gpio_out_1_gpio_out_35_qs;
        reg_rdata_next[4] = gpio_out_1_gpio_out_36_qs;
        reg_rdata_next[5] = gpio_out_1_gpio_out_37_qs;
        reg_rdata_next[6] = gpio_out_1_gpio_out_38_qs;
        reg_rdata_next[7] = gpio_out_1_gpio_out_39_qs;
        reg_rdata_next[8] = gpio_out_1_gpio_out_40_qs;
        reg_rdata_next[9] = gpio_out_1_gpio_out_41_qs;
        reg_rdata_next[10] = gpio_out_1_gpio_out_42_qs;
        reg_rdata_next[11] = gpio_out_1_gpio_out_43_qs;
        reg_rdata_next[12] = gpio_out_1_gpio_out_44_qs;
        reg_rdata_next[13] = gpio_out_1_gpio_out_45_qs;
        reg_rdata_next[14] = gpio_out_1_gpio_out_46_qs;
        reg_rdata_next[15] = gpio_out_1_gpio_out_47_qs;
        reg_rdata_next[16] = gpio_out_1_gpio_out_48_qs;
        reg_rdata_next[17] = gpio_out_1_gpio_out_49_qs;
        reg_rdata_next[18] = gpio_out_1_gpio_out_50_qs;
        reg_rdata_next[19] = gpio_out_1_gpio_out_51_qs;
        reg_rdata_next[20] = gpio_out_1_gpio_out_52_qs;
        reg_rdata_next[21] = gpio_out_1_gpio_out_53_qs;
        reg_rdata_next[22] = gpio_out_1_gpio_out_54_qs;
        reg_rdata_next[23] = gpio_out_1_gpio_out_55_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
        reg_rdata_next[6] = '0;
        reg_rdata_next[7] = '0;
        reg_rdata_next[8] = '0;
        reg_rdata_next[9] = '0;
        reg_rdata_next[10] = '0;
        reg_rdata_next[11] = '0;
        reg_rdata_next[12] = '0;
        reg_rdata_next[13] = '0;
        reg_rdata_next[14] = '0;
        reg_rdata_next[15] = '0;
        reg_rdata_next[16] = '0;
        reg_rdata_next[17] = '0;
        reg_rdata_next[18] = '0;
        reg_rdata_next[19] = '0;
        reg_rdata_next[20] = '0;
        reg_rdata_next[21] = '0;
        reg_rdata_next[22] = '0;
        reg_rdata_next[23] = '0;
        reg_rdata_next[24] = '0;
        reg_rdata_next[25] = '0;
        reg_rdata_next[26] = '0;
        reg_rdata_next[27] = '0;
        reg_rdata_next[28] = '0;
        reg_rdata_next[29] = '0;
        reg_rdata_next[30] = '0;
        reg_rdata_next[31] = '0;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
        reg_rdata_next[6] = '0;
        reg_rdata_next[7] = '0;
        reg_rdata_next[8] = '0;
        reg_rdata_next[9] = '0;
        reg_rdata_next[10] = '0;
        reg_rdata_next[11] = '0;
        reg_rdata_next[12] = '0;
        reg_rdata_next[13] = '0;
        reg_rdata_next[14] = '0;
        reg_rdata_next[15] = '0;
        reg_rdata_next[16] = '0;
        reg_rdata_next[17] = '0;
        reg_rdata_next[18] = '0;
        reg_rdata_next[19] = '0;
        reg_rdata_next[20] = '0;
        reg_rdata_next[21] = '0;
        reg_rdata_next[22] = '0;
        reg_rdata_next[23] = '0;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
        reg_rdata_next[6] = '0;
        reg_rdata_next[7] = '0;
        reg_rdata_next[8] = '0;
        reg_rdata_next[9] = '0;
        reg_rdata_next[10] = '0;
        reg_rdata_next[11] = '0;
        reg_rdata_next[12] = '0;
        reg_rdata_next[13] = '0;
        reg_rdata_next[14] = '0;
        reg_rdata_next[15] = '0;
        reg_rdata_next[16] = '0;
        reg_rdata_next[17] = '0;
        reg_rdata_next[18] = '0;
        reg_rdata_next[19] = '0;
        reg_rdata_next[20] = '0;
        reg_rdata_next[21] = '0;
        reg_rdata_next[22] = '0;
        reg_rdata_next[23] = '0;
        reg_rdata_next[24] = '0;
        reg_rdata_next[25] = '0;
        reg_rdata_next[26] = '0;
        reg_rdata_next[27] = '0;
        reg_rdata_next[28] = '0;
        reg_rdata_next[29] = '0;
        reg_rdata_next[30] = '0;
        reg_rdata_next[31] = '0;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
        reg_rdata_next[6] = '0;
        reg_rdata_next[7] = '0;
        reg_rdata_next[8] = '0;
        reg_rdata_next[9] = '0;
        reg_rdata_next[10] = '0;
        reg_rdata_next[11] = '0;
        reg_rdata_next[12] = '0;
        reg_rdata_next[13] = '0;
        reg_rdata_next[14] = '0;
        reg_rdata_next[15] = '0;
        reg_rdata_next[16] = '0;
        reg_rdata_next[17] = '0;
        reg_rdata_next[18] = '0;
        reg_rdata_next[19] = '0;
        reg_rdata_next[20] = '0;
        reg_rdata_next[21] = '0;
        reg_rdata_next[22] = '0;
        reg_rdata_next[23] = '0;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
        reg_rdata_next[6] = '0;
        reg_rdata_next[7] = '0;
        reg_rdata_next[8] = '0;
        reg_rdata_next[9] = '0;
        reg_rdata_next[10] = '0;
        reg_rdata_next[11] = '0;
        reg_rdata_next[12] = '0;
        reg_rdata_next[13] = '0;
        reg_rdata_next[14] = '0;
        reg_rdata_next[15] = '0;
        reg_rdata_next[16] = '0;
        reg_rdata_next[17] = '0;
        reg_rdata_next[18] = '0;
        reg_rdata_next[19] = '0;
        reg_rdata_next[20] = '0;
        reg_rdata_next[21] = '0;
        reg_rdata_next[22] = '0;
        reg_rdata_next[23] = '0;
        reg_rdata_next[24] = '0;
        reg_rdata_next[25] = '0;
        reg_rdata_next[26] = '0;
        reg_rdata_next[27] = '0;
        reg_rdata_next[28] = '0;
        reg_rdata_next[29] = '0;
        reg_rdata_next[30] = '0;
        reg_rdata_next[31] = '0;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
        reg_rdata_next[6] = '0;
        reg_rdata_next[7] = '0;
        reg_rdata_next[8] = '0;
        reg_rdata_next[9] = '0;
        reg_rdata_next[10] = '0;
        reg_rdata_next[11] = '0;
        reg_rdata_next[12] = '0;
        reg_rdata_next[13] = '0;
        reg_rdata_next[14] = '0;
        reg_rdata_next[15] = '0;
        reg_rdata_next[16] = '0;
        reg_rdata_next[17] = '0;
        reg_rdata_next[18] = '0;
        reg_rdata_next[19] = '0;
        reg_rdata_next[20] = '0;
        reg_rdata_next[21] = '0;
        reg_rdata_next[22] = '0;
        reg_rdata_next[23] = '0;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = intrpt_rise_en_0_intrpt_rise_en_0_qs;
        reg_rdata_next[1] = intrpt_rise_en_0_intrpt_rise_en_1_qs;
        reg_rdata_next[2] = intrpt_rise_en_0_intrpt_rise_en_2_qs;
        reg_rdata_next[3] = intrpt_rise_en_0_intrpt_rise_en_3_qs;
        reg_rdata_next[4] = intrpt_rise_en_0_intrpt_rise_en_4_qs;
        reg_rdata_next[5] = intrpt_rise_en_0_intrpt_rise_en_5_qs;
        reg_rdata_next[6] = intrpt_rise_en_0_intrpt_rise_en_6_qs;
        reg_rdata_next[7] = intrpt_rise_en_0_intrpt_rise_en_7_qs;
        reg_rdata_next[8] = intrpt_rise_en_0_intrpt_rise_en_8_qs;
        reg_rdata_next[9] = intrpt_rise_en_0_intrpt_rise_en_9_qs;
        reg_rdata_next[10] = intrpt_rise_en_0_intrpt_rise_en_10_qs;
        reg_rdata_next[11] = intrpt_rise_en_0_intrpt_rise_en_11_qs;
        reg_rdata_next[12] = intrpt_rise_en_0_intrpt_rise_en_12_qs;
        reg_rdata_next[13] = intrpt_rise_en_0_intrpt_rise_en_13_qs;
        reg_rdata_next[14] = intrpt_rise_en_0_intrpt_rise_en_14_qs;
        reg_rdata_next[15] = intrpt_rise_en_0_intrpt_rise_en_15_qs;
        reg_rdata_next[16] = intrpt_rise_en_0_intrpt_rise_en_16_qs;
        reg_rdata_next[17] = intrpt_rise_en_0_intrpt_rise_en_17_qs;
        reg_rdata_next[18] = intrpt_rise_en_0_intrpt_rise_en_18_qs;
        reg_rdata_next[19] = intrpt_rise_en_0_intrpt_rise_en_19_qs;
        reg_rdata_next[20] = intrpt_rise_en_0_intrpt_rise_en_20_qs;
        reg_rdata_next[21] = intrpt_rise_en_0_intrpt_rise_en_21_qs;
        reg_rdata_next[22] = intrpt_rise_en_0_intrpt_rise_en_22_qs;
        reg_rdata_next[23] = intrpt_rise_en_0_intrpt_rise_en_23_qs;
        reg_rdata_next[24] = intrpt_rise_en_0_intrpt_rise_en_24_qs;
        reg_rdata_next[25] = intrpt_rise_en_0_intrpt_rise_en_25_qs;
        reg_rdata_next[26] = intrpt_rise_en_0_intrpt_rise_en_26_qs;
        reg_rdata_next[27] = intrpt_rise_en_0_intrpt_rise_en_27_qs;
        reg_rdata_next[28] = intrpt_rise_en_0_intrpt_rise_en_28_qs;
        reg_rdata_next[29] = intrpt_rise_en_0_intrpt_rise_en_29_qs;
        reg_rdata_next[30] = intrpt_rise_en_0_intrpt_rise_en_30_qs;
        reg_rdata_next[31] = intrpt_rise_en_0_intrpt_rise_en_31_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = intrpt_rise_en_1_intrpt_rise_en_32_qs;
        reg_rdata_next[1] = intrpt_rise_en_1_intrpt_rise_en_33_qs;
        reg_rdata_next[2] = intrpt_rise_en_1_intrpt_rise_en_34_qs;
        reg_rdata_next[3] = intrpt_rise_en_1_intrpt_rise_en_35_qs;
        reg_rdata_next[4] = intrpt_rise_en_1_intrpt_rise_en_36_qs;
        reg_rdata_next[5] = intrpt_rise_en_1_intrpt_rise_en_37_qs;
        reg_rdata_next[6] = intrpt_rise_en_1_intrpt_rise_en_38_qs;
        reg_rdata_next[7] = intrpt_rise_en_1_intrpt_rise_en_39_qs;
        reg_rdata_next[8] = intrpt_rise_en_1_intrpt_rise_en_40_qs;
        reg_rdata_next[9] = intrpt_rise_en_1_intrpt_rise_en_41_qs;
        reg_rdata_next[10] = intrpt_rise_en_1_intrpt_rise_en_42_qs;
        reg_rdata_next[11] = intrpt_rise_en_1_intrpt_rise_en_43_qs;
        reg_rdata_next[12] = intrpt_rise_en_1_intrpt_rise_en_44_qs;
        reg_rdata_next[13] = intrpt_rise_en_1_intrpt_rise_en_45_qs;
        reg_rdata_next[14] = intrpt_rise_en_1_intrpt_rise_en_46_qs;
        reg_rdata_next[15] = intrpt_rise_en_1_intrpt_rise_en_47_qs;
        reg_rdata_next[16] = intrpt_rise_en_1_intrpt_rise_en_48_qs;
        reg_rdata_next[17] = intrpt_rise_en_1_intrpt_rise_en_49_qs;
        reg_rdata_next[18] = intrpt_rise_en_1_intrpt_rise_en_50_qs;
        reg_rdata_next[19] = intrpt_rise_en_1_intrpt_rise_en_51_qs;
        reg_rdata_next[20] = intrpt_rise_en_1_intrpt_rise_en_52_qs;
        reg_rdata_next[21] = intrpt_rise_en_1_intrpt_rise_en_53_qs;
        reg_rdata_next[22] = intrpt_rise_en_1_intrpt_rise_en_54_qs;
        reg_rdata_next[23] = intrpt_rise_en_1_intrpt_rise_en_55_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = intrpt_fall_en_0_intrpt_fall_en_0_qs;
        reg_rdata_next[1] = intrpt_fall_en_0_intrpt_fall_en_1_qs;
        reg_rdata_next[2] = intrpt_fall_en_0_intrpt_fall_en_2_qs;
        reg_rdata_next[3] = intrpt_fall_en_0_intrpt_fall_en_3_qs;
        reg_rdata_next[4] = intrpt_fall_en_0_intrpt_fall_en_4_qs;
        reg_rdata_next[5] = intrpt_fall_en_0_intrpt_fall_en_5_qs;
        reg_rdata_next[6] = intrpt_fall_en_0_intrpt_fall_en_6_qs;
        reg_rdata_next[7] = intrpt_fall_en_0_intrpt_fall_en_7_qs;
        reg_rdata_next[8] = intrpt_fall_en_0_intrpt_fall_en_8_qs;
        reg_rdata_next[9] = intrpt_fall_en_0_intrpt_fall_en_9_qs;
        reg_rdata_next[10] = intrpt_fall_en_0_intrpt_fall_en_10_qs;
        reg_rdata_next[11] = intrpt_fall_en_0_intrpt_fall_en_11_qs;
        reg_rdata_next[12] = intrpt_fall_en_0_intrpt_fall_en_12_qs;
        reg_rdata_next[13] = intrpt_fall_en_0_intrpt_fall_en_13_qs;
        reg_rdata_next[14] = intrpt_fall_en_0_intrpt_fall_en_14_qs;
        reg_rdata_next[15] = intrpt_fall_en_0_intrpt_fall_en_15_qs;
        reg_rdata_next[16] = intrpt_fall_en_0_intrpt_fall_en_16_qs;
        reg_rdata_next[17] = intrpt_fall_en_0_intrpt_fall_en_17_qs;
        reg_rdata_next[18] = intrpt_fall_en_0_intrpt_fall_en_18_qs;
        reg_rdata_next[19] = intrpt_fall_en_0_intrpt_fall_en_19_qs;
        reg_rdata_next[20] = intrpt_fall_en_0_intrpt_fall_en_20_qs;
        reg_rdata_next[21] = intrpt_fall_en_0_intrpt_fall_en_21_qs;
        reg_rdata_next[22] = intrpt_fall_en_0_intrpt_fall_en_22_qs;
        reg_rdata_next[23] = intrpt_fall_en_0_intrpt_fall_en_23_qs;
        reg_rdata_next[24] = intrpt_fall_en_0_intrpt_fall_en_24_qs;
        reg_rdata_next[25] = intrpt_fall_en_0_intrpt_fall_en_25_qs;
        reg_rdata_next[26] = intrpt_fall_en_0_intrpt_fall_en_26_qs;
        reg_rdata_next[27] = intrpt_fall_en_0_intrpt_fall_en_27_qs;
        reg_rdata_next[28] = intrpt_fall_en_0_intrpt_fall_en_28_qs;
        reg_rdata_next[29] = intrpt_fall_en_0_intrpt_fall_en_29_qs;
        reg_rdata_next[30] = intrpt_fall_en_0_intrpt_fall_en_30_qs;
        reg_rdata_next[31] = intrpt_fall_en_0_intrpt_fall_en_31_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = intrpt_fall_en_1_intrpt_fall_en_32_qs;
        reg_rdata_next[1] = intrpt_fall_en_1_intrpt_fall_en_33_qs;
        reg_rdata_next[2] = intrpt_fall_en_1_intrpt_fall_en_34_qs;
        reg_rdata_next[3] = intrpt_fall_en_1_intrpt_fall_en_35_qs;
        reg_rdata_next[4] = intrpt_fall_en_1_intrpt_fall_en_36_qs;
        reg_rdata_next[5] = intrpt_fall_en_1_intrpt_fall_en_37_qs;
        reg_rdata_next[6] = intrpt_fall_en_1_intrpt_fall_en_38_qs;
        reg_rdata_next[7] = intrpt_fall_en_1_intrpt_fall_en_39_qs;
        reg_rdata_next[8] = intrpt_fall_en_1_intrpt_fall_en_40_qs;
        reg_rdata_next[9] = intrpt_fall_en_1_intrpt_fall_en_41_qs;
        reg_rdata_next[10] = intrpt_fall_en_1_intrpt_fall_en_42_qs;
        reg_rdata_next[11] = intrpt_fall_en_1_intrpt_fall_en_43_qs;
        reg_rdata_next[12] = intrpt_fall_en_1_intrpt_fall_en_44_qs;
        reg_rdata_next[13] = intrpt_fall_en_1_intrpt_fall_en_45_qs;
        reg_rdata_next[14] = intrpt_fall_en_1_intrpt_fall_en_46_qs;
        reg_rdata_next[15] = intrpt_fall_en_1_intrpt_fall_en_47_qs;
        reg_rdata_next[16] = intrpt_fall_en_1_intrpt_fall_en_48_qs;
        reg_rdata_next[17] = intrpt_fall_en_1_intrpt_fall_en_49_qs;
        reg_rdata_next[18] = intrpt_fall_en_1_intrpt_fall_en_50_qs;
        reg_rdata_next[19] = intrpt_fall_en_1_intrpt_fall_en_51_qs;
        reg_rdata_next[20] = intrpt_fall_en_1_intrpt_fall_en_52_qs;
        reg_rdata_next[21] = intrpt_fall_en_1_intrpt_fall_en_53_qs;
        reg_rdata_next[22] = intrpt_fall_en_1_intrpt_fall_en_54_qs;
        reg_rdata_next[23] = intrpt_fall_en_1_intrpt_fall_en_55_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_0_qs;
        reg_rdata_next[1] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_1_qs;
        reg_rdata_next[2] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_2_qs;
        reg_rdata_next[3] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_3_qs;
        reg_rdata_next[4] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_4_qs;
        reg_rdata_next[5] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_5_qs;
        reg_rdata_next[6] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_6_qs;
        reg_rdata_next[7] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_7_qs;
        reg_rdata_next[8] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_8_qs;
        reg_rdata_next[9] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_9_qs;
        reg_rdata_next[10] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_10_qs;
        reg_rdata_next[11] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_11_qs;
        reg_rdata_next[12] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_12_qs;
        reg_rdata_next[13] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_13_qs;
        reg_rdata_next[14] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_14_qs;
        reg_rdata_next[15] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_15_qs;
        reg_rdata_next[16] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_16_qs;
        reg_rdata_next[17] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_17_qs;
        reg_rdata_next[18] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_18_qs;
        reg_rdata_next[19] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_19_qs;
        reg_rdata_next[20] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_20_qs;
        reg_rdata_next[21] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_21_qs;
        reg_rdata_next[22] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_22_qs;
        reg_rdata_next[23] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_23_qs;
        reg_rdata_next[24] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_24_qs;
        reg_rdata_next[25] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_25_qs;
        reg_rdata_next[26] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_26_qs;
        reg_rdata_next[27] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_27_qs;
        reg_rdata_next[28] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_28_qs;
        reg_rdata_next[29] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_29_qs;
        reg_rdata_next[30] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_30_qs;
        reg_rdata_next[31] = intrpt_lvl_high_en_0_intrpt_lvl_high_en_31_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[0] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_32_qs;
        reg_rdata_next[1] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_33_qs;
        reg_rdata_next[2] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_34_qs;
        reg_rdata_next[3] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_35_qs;
        reg_rdata_next[4] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_36_qs;
        reg_rdata_next[5] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_37_qs;
        reg_rdata_next[6] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_38_qs;
        reg_rdata_next[7] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_39_qs;
        reg_rdata_next[8] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_40_qs;
        reg_rdata_next[9] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_41_qs;
        reg_rdata_next[10] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_42_qs;
        reg_rdata_next[11] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_43_qs;
        reg_rdata_next[12] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_44_qs;
        reg_rdata_next[13] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_45_qs;
        reg_rdata_next[14] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_46_qs;
        reg_rdata_next[15] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_47_qs;
        reg_rdata_next[16] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_48_qs;
        reg_rdata_next[17] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_49_qs;
        reg_rdata_next[18] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_50_qs;
        reg_rdata_next[19] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_51_qs;
        reg_rdata_next[20] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_52_qs;
        reg_rdata_next[21] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_53_qs;
        reg_rdata_next[22] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_54_qs;
        reg_rdata_next[23] = intrpt_lvl_high_en_1_intrpt_lvl_high_en_55_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_0_qs;
        reg_rdata_next[1] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_1_qs;
        reg_rdata_next[2] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_2_qs;
        reg_rdata_next[3] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_3_qs;
        reg_rdata_next[4] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_4_qs;
        reg_rdata_next[5] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_5_qs;
        reg_rdata_next[6] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_6_qs;
        reg_rdata_next[7] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_7_qs;
        reg_rdata_next[8] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_8_qs;
        reg_rdata_next[9] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_9_qs;
        reg_rdata_next[10] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_10_qs;
        reg_rdata_next[11] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_11_qs;
        reg_rdata_next[12] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_12_qs;
        reg_rdata_next[13] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_13_qs;
        reg_rdata_next[14] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_14_qs;
        reg_rdata_next[15] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_15_qs;
        reg_rdata_next[16] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_16_qs;
        reg_rdata_next[17] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_17_qs;
        reg_rdata_next[18] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_18_qs;
        reg_rdata_next[19] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_19_qs;
        reg_rdata_next[20] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_20_qs;
        reg_rdata_next[21] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_21_qs;
        reg_rdata_next[22] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_22_qs;
        reg_rdata_next[23] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_23_qs;
        reg_rdata_next[24] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_24_qs;
        reg_rdata_next[25] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_25_qs;
        reg_rdata_next[26] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_26_qs;
        reg_rdata_next[27] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_27_qs;
        reg_rdata_next[28] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_28_qs;
        reg_rdata_next[29] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_29_qs;
        reg_rdata_next[30] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_30_qs;
        reg_rdata_next[31] = intrpt_lvl_low_en_0_intrpt_lvl_low_en_31_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[0] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_32_qs;
        reg_rdata_next[1] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_33_qs;
        reg_rdata_next[2] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_34_qs;
        reg_rdata_next[3] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_35_qs;
        reg_rdata_next[4] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_36_qs;
        reg_rdata_next[5] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_37_qs;
        reg_rdata_next[6] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_38_qs;
        reg_rdata_next[7] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_39_qs;
        reg_rdata_next[8] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_40_qs;
        reg_rdata_next[9] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_41_qs;
        reg_rdata_next[10] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_42_qs;
        reg_rdata_next[11] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_43_qs;
        reg_rdata_next[12] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_44_qs;
        reg_rdata_next[13] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_45_qs;
        reg_rdata_next[14] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_46_qs;
        reg_rdata_next[15] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_47_qs;
        reg_rdata_next[16] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_48_qs;
        reg_rdata_next[17] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_49_qs;
        reg_rdata_next[18] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_50_qs;
        reg_rdata_next[19] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_51_qs;
        reg_rdata_next[20] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_52_qs;
        reg_rdata_next[21] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_53_qs;
        reg_rdata_next[22] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_54_qs;
        reg_rdata_next[23] = intrpt_lvl_low_en_1_intrpt_lvl_low_en_55_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = intrpt_status_0_intrpt_status_0_qs;
        reg_rdata_next[1] = intrpt_status_0_intrpt_status_1_qs;
        reg_rdata_next[2] = intrpt_status_0_intrpt_status_2_qs;
        reg_rdata_next[3] = intrpt_status_0_intrpt_status_3_qs;
        reg_rdata_next[4] = intrpt_status_0_intrpt_status_4_qs;
        reg_rdata_next[5] = intrpt_status_0_intrpt_status_5_qs;
        reg_rdata_next[6] = intrpt_status_0_intrpt_status_6_qs;
        reg_rdata_next[7] = intrpt_status_0_intrpt_status_7_qs;
        reg_rdata_next[8] = intrpt_status_0_intrpt_status_8_qs;
        reg_rdata_next[9] = intrpt_status_0_intrpt_status_9_qs;
        reg_rdata_next[10] = intrpt_status_0_intrpt_status_10_qs;
        reg_rdata_next[11] = intrpt_status_0_intrpt_status_11_qs;
        reg_rdata_next[12] = intrpt_status_0_intrpt_status_12_qs;
        reg_rdata_next[13] = intrpt_status_0_intrpt_status_13_qs;
        reg_rdata_next[14] = intrpt_status_0_intrpt_status_14_qs;
        reg_rdata_next[15] = intrpt_status_0_intrpt_status_15_qs;
        reg_rdata_next[16] = intrpt_status_0_intrpt_status_16_qs;
        reg_rdata_next[17] = intrpt_status_0_intrpt_status_17_qs;
        reg_rdata_next[18] = intrpt_status_0_intrpt_status_18_qs;
        reg_rdata_next[19] = intrpt_status_0_intrpt_status_19_qs;
        reg_rdata_next[20] = intrpt_status_0_intrpt_status_20_qs;
        reg_rdata_next[21] = intrpt_status_0_intrpt_status_21_qs;
        reg_rdata_next[22] = intrpt_status_0_intrpt_status_22_qs;
        reg_rdata_next[23] = intrpt_status_0_intrpt_status_23_qs;
        reg_rdata_next[24] = intrpt_status_0_intrpt_status_24_qs;
        reg_rdata_next[25] = intrpt_status_0_intrpt_status_25_qs;
        reg_rdata_next[26] = intrpt_status_0_intrpt_status_26_qs;
        reg_rdata_next[27] = intrpt_status_0_intrpt_status_27_qs;
        reg_rdata_next[28] = intrpt_status_0_intrpt_status_28_qs;
        reg_rdata_next[29] = intrpt_status_0_intrpt_status_29_qs;
        reg_rdata_next[30] = intrpt_status_0_intrpt_status_30_qs;
        reg_rdata_next[31] = intrpt_status_0_intrpt_status_31_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[0] = intrpt_status_1_intrpt_status_32_qs;
        reg_rdata_next[1] = intrpt_status_1_intrpt_status_33_qs;
        reg_rdata_next[2] = intrpt_status_1_intrpt_status_34_qs;
        reg_rdata_next[3] = intrpt_status_1_intrpt_status_35_qs;
        reg_rdata_next[4] = intrpt_status_1_intrpt_status_36_qs;
        reg_rdata_next[5] = intrpt_status_1_intrpt_status_37_qs;
        reg_rdata_next[6] = intrpt_status_1_intrpt_status_38_qs;
        reg_rdata_next[7] = intrpt_status_1_intrpt_status_39_qs;
        reg_rdata_next[8] = intrpt_status_1_intrpt_status_40_qs;
        reg_rdata_next[9] = intrpt_status_1_intrpt_status_41_qs;
        reg_rdata_next[10] = intrpt_status_1_intrpt_status_42_qs;
        reg_rdata_next[11] = intrpt_status_1_intrpt_status_43_qs;
        reg_rdata_next[12] = intrpt_status_1_intrpt_status_44_qs;
        reg_rdata_next[13] = intrpt_status_1_intrpt_status_45_qs;
        reg_rdata_next[14] = intrpt_status_1_intrpt_status_46_qs;
        reg_rdata_next[15] = intrpt_status_1_intrpt_status_47_qs;
        reg_rdata_next[16] = intrpt_status_1_intrpt_status_48_qs;
        reg_rdata_next[17] = intrpt_status_1_intrpt_status_49_qs;
        reg_rdata_next[18] = intrpt_status_1_intrpt_status_50_qs;
        reg_rdata_next[19] = intrpt_status_1_intrpt_status_51_qs;
        reg_rdata_next[20] = intrpt_status_1_intrpt_status_52_qs;
        reg_rdata_next[21] = intrpt_status_1_intrpt_status_53_qs;
        reg_rdata_next[22] = intrpt_status_1_intrpt_status_54_qs;
        reg_rdata_next[23] = intrpt_status_1_intrpt_status_55_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = intrpt_rise_status_0_intrpt_rise_status_0_qs;
        reg_rdata_next[1] = intrpt_rise_status_0_intrpt_rise_status_1_qs;
        reg_rdata_next[2] = intrpt_rise_status_0_intrpt_rise_status_2_qs;
        reg_rdata_next[3] = intrpt_rise_status_0_intrpt_rise_status_3_qs;
        reg_rdata_next[4] = intrpt_rise_status_0_intrpt_rise_status_4_qs;
        reg_rdata_next[5] = intrpt_rise_status_0_intrpt_rise_status_5_qs;
        reg_rdata_next[6] = intrpt_rise_status_0_intrpt_rise_status_6_qs;
        reg_rdata_next[7] = intrpt_rise_status_0_intrpt_rise_status_7_qs;
        reg_rdata_next[8] = intrpt_rise_status_0_intrpt_rise_status_8_qs;
        reg_rdata_next[9] = intrpt_rise_status_0_intrpt_rise_status_9_qs;
        reg_rdata_next[10] = intrpt_rise_status_0_intrpt_rise_status_10_qs;
        reg_rdata_next[11] = intrpt_rise_status_0_intrpt_rise_status_11_qs;
        reg_rdata_next[12] = intrpt_rise_status_0_intrpt_rise_status_12_qs;
        reg_rdata_next[13] = intrpt_rise_status_0_intrpt_rise_status_13_qs;
        reg_rdata_next[14] = intrpt_rise_status_0_intrpt_rise_status_14_qs;
        reg_rdata_next[15] = intrpt_rise_status_0_intrpt_rise_status_15_qs;
        reg_rdata_next[16] = intrpt_rise_status_0_intrpt_rise_status_16_qs;
        reg_rdata_next[17] = intrpt_rise_status_0_intrpt_rise_status_17_qs;
        reg_rdata_next[18] = intrpt_rise_status_0_intrpt_rise_status_18_qs;
        reg_rdata_next[19] = intrpt_rise_status_0_intrpt_rise_status_19_qs;
        reg_rdata_next[20] = intrpt_rise_status_0_intrpt_rise_status_20_qs;
        reg_rdata_next[21] = intrpt_rise_status_0_intrpt_rise_status_21_qs;
        reg_rdata_next[22] = intrpt_rise_status_0_intrpt_rise_status_22_qs;
        reg_rdata_next[23] = intrpt_rise_status_0_intrpt_rise_status_23_qs;
        reg_rdata_next[24] = intrpt_rise_status_0_intrpt_rise_status_24_qs;
        reg_rdata_next[25] = intrpt_rise_status_0_intrpt_rise_status_25_qs;
        reg_rdata_next[26] = intrpt_rise_status_0_intrpt_rise_status_26_qs;
        reg_rdata_next[27] = intrpt_rise_status_0_intrpt_rise_status_27_qs;
        reg_rdata_next[28] = intrpt_rise_status_0_intrpt_rise_status_28_qs;
        reg_rdata_next[29] = intrpt_rise_status_0_intrpt_rise_status_29_qs;
        reg_rdata_next[30] = intrpt_rise_status_0_intrpt_rise_status_30_qs;
        reg_rdata_next[31] = intrpt_rise_status_0_intrpt_rise_status_31_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[0] = intrpt_rise_status_1_intrpt_rise_status_32_qs;
        reg_rdata_next[1] = intrpt_rise_status_1_intrpt_rise_status_33_qs;
        reg_rdata_next[2] = intrpt_rise_status_1_intrpt_rise_status_34_qs;
        reg_rdata_next[3] = intrpt_rise_status_1_intrpt_rise_status_35_qs;
        reg_rdata_next[4] = intrpt_rise_status_1_intrpt_rise_status_36_qs;
        reg_rdata_next[5] = intrpt_rise_status_1_intrpt_rise_status_37_qs;
        reg_rdata_next[6] = intrpt_rise_status_1_intrpt_rise_status_38_qs;
        reg_rdata_next[7] = intrpt_rise_status_1_intrpt_rise_status_39_qs;
        reg_rdata_next[8] = intrpt_rise_status_1_intrpt_rise_status_40_qs;
        reg_rdata_next[9] = intrpt_rise_status_1_intrpt_rise_status_41_qs;
        reg_rdata_next[10] = intrpt_rise_status_1_intrpt_rise_status_42_qs;
        reg_rdata_next[11] = intrpt_rise_status_1_intrpt_rise_status_43_qs;
        reg_rdata_next[12] = intrpt_rise_status_1_intrpt_rise_status_44_qs;
        reg_rdata_next[13] = intrpt_rise_status_1_intrpt_rise_status_45_qs;
        reg_rdata_next[14] = intrpt_rise_status_1_intrpt_rise_status_46_qs;
        reg_rdata_next[15] = intrpt_rise_status_1_intrpt_rise_status_47_qs;
        reg_rdata_next[16] = intrpt_rise_status_1_intrpt_rise_status_48_qs;
        reg_rdata_next[17] = intrpt_rise_status_1_intrpt_rise_status_49_qs;
        reg_rdata_next[18] = intrpt_rise_status_1_intrpt_rise_status_50_qs;
        reg_rdata_next[19] = intrpt_rise_status_1_intrpt_rise_status_51_qs;
        reg_rdata_next[20] = intrpt_rise_status_1_intrpt_rise_status_52_qs;
        reg_rdata_next[21] = intrpt_rise_status_1_intrpt_rise_status_53_qs;
        reg_rdata_next[22] = intrpt_rise_status_1_intrpt_rise_status_54_qs;
        reg_rdata_next[23] = intrpt_rise_status_1_intrpt_rise_status_55_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = intrpt_fall_status_0_intrpt_fall_status_0_qs;
        reg_rdata_next[1] = intrpt_fall_status_0_intrpt_fall_status_1_qs;
        reg_rdata_next[2] = intrpt_fall_status_0_intrpt_fall_status_2_qs;
        reg_rdata_next[3] = intrpt_fall_status_0_intrpt_fall_status_3_qs;
        reg_rdata_next[4] = intrpt_fall_status_0_intrpt_fall_status_4_qs;
        reg_rdata_next[5] = intrpt_fall_status_0_intrpt_fall_status_5_qs;
        reg_rdata_next[6] = intrpt_fall_status_0_intrpt_fall_status_6_qs;
        reg_rdata_next[7] = intrpt_fall_status_0_intrpt_fall_status_7_qs;
        reg_rdata_next[8] = intrpt_fall_status_0_intrpt_fall_status_8_qs;
        reg_rdata_next[9] = intrpt_fall_status_0_intrpt_fall_status_9_qs;
        reg_rdata_next[10] = intrpt_fall_status_0_intrpt_fall_status_10_qs;
        reg_rdata_next[11] = intrpt_fall_status_0_intrpt_fall_status_11_qs;
        reg_rdata_next[12] = intrpt_fall_status_0_intrpt_fall_status_12_qs;
        reg_rdata_next[13] = intrpt_fall_status_0_intrpt_fall_status_13_qs;
        reg_rdata_next[14] = intrpt_fall_status_0_intrpt_fall_status_14_qs;
        reg_rdata_next[15] = intrpt_fall_status_0_intrpt_fall_status_15_qs;
        reg_rdata_next[16] = intrpt_fall_status_0_intrpt_fall_status_16_qs;
        reg_rdata_next[17] = intrpt_fall_status_0_intrpt_fall_status_17_qs;
        reg_rdata_next[18] = intrpt_fall_status_0_intrpt_fall_status_18_qs;
        reg_rdata_next[19] = intrpt_fall_status_0_intrpt_fall_status_19_qs;
        reg_rdata_next[20] = intrpt_fall_status_0_intrpt_fall_status_20_qs;
        reg_rdata_next[21] = intrpt_fall_status_0_intrpt_fall_status_21_qs;
        reg_rdata_next[22] = intrpt_fall_status_0_intrpt_fall_status_22_qs;
        reg_rdata_next[23] = intrpt_fall_status_0_intrpt_fall_status_23_qs;
        reg_rdata_next[24] = intrpt_fall_status_0_intrpt_fall_status_24_qs;
        reg_rdata_next[25] = intrpt_fall_status_0_intrpt_fall_status_25_qs;
        reg_rdata_next[26] = intrpt_fall_status_0_intrpt_fall_status_26_qs;
        reg_rdata_next[27] = intrpt_fall_status_0_intrpt_fall_status_27_qs;
        reg_rdata_next[28] = intrpt_fall_status_0_intrpt_fall_status_28_qs;
        reg_rdata_next[29] = intrpt_fall_status_0_intrpt_fall_status_29_qs;
        reg_rdata_next[30] = intrpt_fall_status_0_intrpt_fall_status_30_qs;
        reg_rdata_next[31] = intrpt_fall_status_0_intrpt_fall_status_31_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[0] = intrpt_fall_status_1_intrpt_fall_status_32_qs;
        reg_rdata_next[1] = intrpt_fall_status_1_intrpt_fall_status_33_qs;
        reg_rdata_next[2] = intrpt_fall_status_1_intrpt_fall_status_34_qs;
        reg_rdata_next[3] = intrpt_fall_status_1_intrpt_fall_status_35_qs;
        reg_rdata_next[4] = intrpt_fall_status_1_intrpt_fall_status_36_qs;
        reg_rdata_next[5] = intrpt_fall_status_1_intrpt_fall_status_37_qs;
        reg_rdata_next[6] = intrpt_fall_status_1_intrpt_fall_status_38_qs;
        reg_rdata_next[7] = intrpt_fall_status_1_intrpt_fall_status_39_qs;
        reg_rdata_next[8] = intrpt_fall_status_1_intrpt_fall_status_40_qs;
        reg_rdata_next[9] = intrpt_fall_status_1_intrpt_fall_status_41_qs;
        reg_rdata_next[10] = intrpt_fall_status_1_intrpt_fall_status_42_qs;
        reg_rdata_next[11] = intrpt_fall_status_1_intrpt_fall_status_43_qs;
        reg_rdata_next[12] = intrpt_fall_status_1_intrpt_fall_status_44_qs;
        reg_rdata_next[13] = intrpt_fall_status_1_intrpt_fall_status_45_qs;
        reg_rdata_next[14] = intrpt_fall_status_1_intrpt_fall_status_46_qs;
        reg_rdata_next[15] = intrpt_fall_status_1_intrpt_fall_status_47_qs;
        reg_rdata_next[16] = intrpt_fall_status_1_intrpt_fall_status_48_qs;
        reg_rdata_next[17] = intrpt_fall_status_1_intrpt_fall_status_49_qs;
        reg_rdata_next[18] = intrpt_fall_status_1_intrpt_fall_status_50_qs;
        reg_rdata_next[19] = intrpt_fall_status_1_intrpt_fall_status_51_qs;
        reg_rdata_next[20] = intrpt_fall_status_1_intrpt_fall_status_52_qs;
        reg_rdata_next[21] = intrpt_fall_status_1_intrpt_fall_status_53_qs;
        reg_rdata_next[22] = intrpt_fall_status_1_intrpt_fall_status_54_qs;
        reg_rdata_next[23] = intrpt_fall_status_1_intrpt_fall_status_55_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[0] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_0_qs;
        reg_rdata_next[1] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_1_qs;
        reg_rdata_next[2] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_2_qs;
        reg_rdata_next[3] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_3_qs;
        reg_rdata_next[4] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_4_qs;
        reg_rdata_next[5] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_5_qs;
        reg_rdata_next[6] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_6_qs;
        reg_rdata_next[7] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_7_qs;
        reg_rdata_next[8] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_8_qs;
        reg_rdata_next[9] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_9_qs;
        reg_rdata_next[10] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_10_qs;
        reg_rdata_next[11] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_11_qs;
        reg_rdata_next[12] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_12_qs;
        reg_rdata_next[13] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_13_qs;
        reg_rdata_next[14] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_14_qs;
        reg_rdata_next[15] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_15_qs;
        reg_rdata_next[16] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_16_qs;
        reg_rdata_next[17] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_17_qs;
        reg_rdata_next[18] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_18_qs;
        reg_rdata_next[19] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_19_qs;
        reg_rdata_next[20] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_20_qs;
        reg_rdata_next[21] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_21_qs;
        reg_rdata_next[22] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_22_qs;
        reg_rdata_next[23] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_23_qs;
        reg_rdata_next[24] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_24_qs;
        reg_rdata_next[25] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_25_qs;
        reg_rdata_next[26] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_26_qs;
        reg_rdata_next[27] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_27_qs;
        reg_rdata_next[28] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_28_qs;
        reg_rdata_next[29] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_29_qs;
        reg_rdata_next[30] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_30_qs;
        reg_rdata_next[31] = intrpt_lvl_high_status_0_intrpt_lvl_high_status_31_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[0] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_32_qs;
        reg_rdata_next[1] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_33_qs;
        reg_rdata_next[2] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_34_qs;
        reg_rdata_next[3] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_35_qs;
        reg_rdata_next[4] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_36_qs;
        reg_rdata_next[5] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_37_qs;
        reg_rdata_next[6] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_38_qs;
        reg_rdata_next[7] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_39_qs;
        reg_rdata_next[8] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_40_qs;
        reg_rdata_next[9] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_41_qs;
        reg_rdata_next[10] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_42_qs;
        reg_rdata_next[11] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_43_qs;
        reg_rdata_next[12] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_44_qs;
        reg_rdata_next[13] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_45_qs;
        reg_rdata_next[14] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_46_qs;
        reg_rdata_next[15] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_47_qs;
        reg_rdata_next[16] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_48_qs;
        reg_rdata_next[17] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_49_qs;
        reg_rdata_next[18] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_50_qs;
        reg_rdata_next[19] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_51_qs;
        reg_rdata_next[20] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_52_qs;
        reg_rdata_next[21] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_53_qs;
        reg_rdata_next[22] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_54_qs;
        reg_rdata_next[23] = intrpt_lvl_high_status_1_intrpt_lvl_high_status_55_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[0] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_0_qs;
        reg_rdata_next[1] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_1_qs;
        reg_rdata_next[2] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_2_qs;
        reg_rdata_next[3] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_3_qs;
        reg_rdata_next[4] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_4_qs;
        reg_rdata_next[5] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_5_qs;
        reg_rdata_next[6] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_6_qs;
        reg_rdata_next[7] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_7_qs;
        reg_rdata_next[8] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_8_qs;
        reg_rdata_next[9] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_9_qs;
        reg_rdata_next[10] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_10_qs;
        reg_rdata_next[11] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_11_qs;
        reg_rdata_next[12] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_12_qs;
        reg_rdata_next[13] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_13_qs;
        reg_rdata_next[14] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_14_qs;
        reg_rdata_next[15] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_15_qs;
        reg_rdata_next[16] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_16_qs;
        reg_rdata_next[17] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_17_qs;
        reg_rdata_next[18] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_18_qs;
        reg_rdata_next[19] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_19_qs;
        reg_rdata_next[20] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_20_qs;
        reg_rdata_next[21] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_21_qs;
        reg_rdata_next[22] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_22_qs;
        reg_rdata_next[23] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_23_qs;
        reg_rdata_next[24] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_24_qs;
        reg_rdata_next[25] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_25_qs;
        reg_rdata_next[26] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_26_qs;
        reg_rdata_next[27] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_27_qs;
        reg_rdata_next[28] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_28_qs;
        reg_rdata_next[29] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_29_qs;
        reg_rdata_next[30] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_30_qs;
        reg_rdata_next[31] = intrpt_lvl_low_status_0_intrpt_lvl_low_status_31_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[0] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_32_qs;
        reg_rdata_next[1] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_33_qs;
        reg_rdata_next[2] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_34_qs;
        reg_rdata_next[3] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_35_qs;
        reg_rdata_next[4] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_36_qs;
        reg_rdata_next[5] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_37_qs;
        reg_rdata_next[6] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_38_qs;
        reg_rdata_next[7] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_39_qs;
        reg_rdata_next[8] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_40_qs;
        reg_rdata_next[9] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_41_qs;
        reg_rdata_next[10] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_42_qs;
        reg_rdata_next[11] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_43_qs;
        reg_rdata_next[12] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_44_qs;
        reg_rdata_next[13] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_45_qs;
        reg_rdata_next[14] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_46_qs;
        reg_rdata_next[15] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_47_qs;
        reg_rdata_next[16] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_48_qs;
        reg_rdata_next[17] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_49_qs;
        reg_rdata_next[18] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_50_qs;
        reg_rdata_next[19] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_51_qs;
        reg_rdata_next[20] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_52_qs;
        reg_rdata_next[21] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_53_qs;
        reg_rdata_next[22] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_54_qs;
        reg_rdata_next[23] = intrpt_lvl_low_status_1_intrpt_lvl_low_status_55_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
