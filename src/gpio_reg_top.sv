// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module gpio_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 11
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output gpio_reg_pkg::gpio_reg2hw_t reg2hw, // Write
  input  gpio_reg_pkg::gpio_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import gpio_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] gpio_dir_0_qs;
  logic [31:0] gpio_dir_0_wd;
  logic gpio_dir_0_we;
  logic [31:0] gpio_dir_1_qs;
  logic [31:0] gpio_dir_1_wd;
  logic gpio_dir_1_we;
  logic [31:0] gpio_en_0_qs;
  logic [31:0] gpio_en_0_wd;
  logic gpio_en_0_we;
  logic [31:0] gpio_en_1_qs;
  logic [31:0] gpio_en_1_wd;
  logic gpio_en_1_we;
  logic [31:0] gpio_in_0_qs;
  logic gpio_in_0_re;
  logic [31:0] gpio_in_1_qs;
  logic gpio_in_1_re;
  logic [31:0] gpio_out_0_qs;
  logic [31:0] gpio_out_0_wd;
  logic gpio_out_0_we;
  logic [31:0] gpio_out_1_qs;
  logic [31:0] gpio_out_1_wd;
  logic gpio_out_1_we;
  logic [31:0] gpio_set_0_wd;
  logic gpio_set_0_we;
  logic [31:0] gpio_set_1_wd;
  logic gpio_set_1_we;
  logic [31:0] gpio_clear_0_wd;
  logic gpio_clear_0_we;
  logic [31:0] gpio_clear_1_wd;
  logic gpio_clear_1_we;
  logic [31:0] gpio_toggle_0_wd;
  logic gpio_toggle_0_we;
  logic [31:0] gpio_toggle_1_wd;
  logic gpio_toggle_1_we;
  logic [31:0] intrpt_rise_en_0_qs;
  logic [31:0] intrpt_rise_en_0_wd;
  logic intrpt_rise_en_0_we;
  logic [31:0] intrpt_rise_en_1_qs;
  logic [31:0] intrpt_rise_en_1_wd;
  logic intrpt_rise_en_1_we;
  logic [31:0] intrpt_fall_en_0_qs;
  logic [31:0] intrpt_fall_en_0_wd;
  logic intrpt_fall_en_0_we;
  logic [31:0] intrpt_fall_en_1_qs;
  logic [31:0] intrpt_fall_en_1_wd;
  logic intrpt_fall_en_1_we;
  logic [31:0] intrpt_status_0_qs;
  logic [31:0] intrpt_status_0_wd;
  logic intrpt_status_0_we;
  logic [31:0] intrpt_status_1_qs;
  logic [31:0] intrpt_status_1_wd;
  logic intrpt_status_1_we;

  // Register instances

  // Subregister 0 of Multireg gpio_dir
  // R[gpio_dir_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_gpio_dir_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_dir_0_we),
    .wd     (gpio_dir_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_dir[0].q ),

    // to register interface (read)
    .qs     (gpio_dir_0_qs)
  );

  // Subregister 1 of Multireg gpio_dir
  // R[gpio_dir_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_gpio_dir_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_dir_1_we),
    .wd     (gpio_dir_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_dir[1].q ),

    // to register interface (read)
    .qs     (gpio_dir_1_qs)
  );



  // Subregister 0 of Multireg gpio_en
  // R[gpio_en_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_gpio_en_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_0_we),
    .wd     (gpio_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[0].q ),

    // to register interface (read)
    .qs     (gpio_en_0_qs)
  );

  // Subregister 1 of Multireg gpio_en
  // R[gpio_en_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_gpio_en_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_en_1_we),
    .wd     (gpio_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_en[1].q ),

    // to register interface (read)
    .qs     (gpio_en_1_qs)
  );



  // Subregister 0 of Multireg gpio_in
  // R[gpio_in_0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_gpio_in_0 (
    .re     (gpio_in_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_0_qs)
  );

  // Subregister 1 of Multireg gpio_in
  // R[gpio_in_1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_gpio_in_1 (
    .re     (gpio_in_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.gpio_in[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (gpio_in_1_qs)
  );



  // Subregister 0 of Multireg gpio_out
  // R[gpio_out_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_gpio_out_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_0_we),
    .wd     (gpio_out_0_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[0].de),
    .d      (hw2reg.gpio_out[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[0].q ),

    // to register interface (read)
    .qs     (gpio_out_0_qs)
  );

  // Subregister 1 of Multireg gpio_out
  // R[gpio_out_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_gpio_out_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gpio_out_1_we),
    .wd     (gpio_out_1_wd),

    // from internal hardware
    .de     (hw2reg.gpio_out[1].de),
    .d      (hw2reg.gpio_out[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gpio_out[1].q ),

    // to register interface (read)
    .qs     (gpio_out_1_qs)
  );



  // Subregister 0 of Multireg gpio_set
  // R[gpio_set_0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_gpio_set_0 (
    .re     (1'b0),
    .we     (gpio_set_0_we),
    .wd     (gpio_set_0_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[0].qe),
    .q      (reg2hw.gpio_set[0].q ),
    .qs     ()
  );

  // Subregister 1 of Multireg gpio_set
  // R[gpio_set_1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_gpio_set_1 (
    .re     (1'b0),
    .we     (gpio_set_1_we),
    .wd     (gpio_set_1_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_set[1].qe),
    .q      (reg2hw.gpio_set[1].q ),
    .qs     ()
  );



  // Subregister 0 of Multireg gpio_clear
  // R[gpio_clear_0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_gpio_clear_0 (
    .re     (1'b0),
    .we     (gpio_clear_0_we),
    .wd     (gpio_clear_0_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[0].qe),
    .q      (reg2hw.gpio_clear[0].q ),
    .qs     ()
  );

  // Subregister 1 of Multireg gpio_clear
  // R[gpio_clear_1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_gpio_clear_1 (
    .re     (1'b0),
    .we     (gpio_clear_1_we),
    .wd     (gpio_clear_1_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_clear[1].qe),
    .q      (reg2hw.gpio_clear[1].q ),
    .qs     ()
  );



  // Subregister 0 of Multireg gpio_toggle
  // R[gpio_toggle_0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_gpio_toggle_0 (
    .re     (1'b0),
    .we     (gpio_toggle_0_we),
    .wd     (gpio_toggle_0_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[0].qe),
    .q      (reg2hw.gpio_toggle[0].q ),
    .qs     ()
  );

  // Subregister 1 of Multireg gpio_toggle
  // R[gpio_toggle_1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_gpio_toggle_1 (
    .re     (1'b0),
    .we     (gpio_toggle_1_we),
    .wd     (gpio_toggle_1_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.gpio_toggle[1].qe),
    .q      (reg2hw.gpio_toggle[1].q ),
    .qs     ()
  );



  // Subregister 0 of Multireg intrpt_rise_en
  // R[intrpt_rise_en_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_intrpt_rise_en_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_0_we),
    .wd     (intrpt_rise_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[0].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_0_qs)
  );

  // Subregister 1 of Multireg intrpt_rise_en
  // R[intrpt_rise_en_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_intrpt_rise_en_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_rise_en_1_we),
    .wd     (intrpt_rise_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_rise_en[1].q ),

    // to register interface (read)
    .qs     (intrpt_rise_en_1_qs)
  );



  // Subregister 0 of Multireg intrpt_fall_en
  // R[intrpt_fall_en_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_intrpt_fall_en_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_0_we),
    .wd     (intrpt_fall_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[0].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_0_qs)
  );

  // Subregister 1 of Multireg intrpt_fall_en
  // R[intrpt_fall_en_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_intrpt_fall_en_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_fall_en_1_we),
    .wd     (intrpt_fall_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_fall_en[1].q ),

    // to register interface (read)
    .qs     (intrpt_fall_en_1_qs)
  );



  // Subregister 0 of Multireg intrpt_status
  // R[intrpt_status_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("W1C"),
    .RESVAL  (32'h0)
  ) u_intrpt_status_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_status_0_we),
    .wd     (intrpt_status_0_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_status[0].de),
    .d      (hw2reg.intrpt_status[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_status[0].q ),

    // to register interface (read)
    .qs     (intrpt_status_0_qs)
  );

  // Subregister 1 of Multireg intrpt_status
  // R[intrpt_status_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("W1C"),
    .RESVAL  (32'h0)
  ) u_intrpt_status_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intrpt_status_1_we),
    .wd     (intrpt_status_1_wd),

    // from internal hardware
    .de     (hw2reg.intrpt_status[1].de),
    .d      (hw2reg.intrpt_status[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intrpt_status[1].q ),

    // to register interface (read)
    .qs     (intrpt_status_1_qs)
  );




  logic [19:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == GPIO_GPIO_DIR_0_OFFSET);
    addr_hit[ 1] = (reg_addr == GPIO_GPIO_DIR_1_OFFSET);
    addr_hit[ 2] = (reg_addr == GPIO_GPIO_EN_0_OFFSET);
    addr_hit[ 3] = (reg_addr == GPIO_GPIO_EN_1_OFFSET);
    addr_hit[ 4] = (reg_addr == GPIO_GPIO_IN_0_OFFSET);
    addr_hit[ 5] = (reg_addr == GPIO_GPIO_IN_1_OFFSET);
    addr_hit[ 6] = (reg_addr == GPIO_GPIO_OUT_0_OFFSET);
    addr_hit[ 7] = (reg_addr == GPIO_GPIO_OUT_1_OFFSET);
    addr_hit[ 8] = (reg_addr == GPIO_GPIO_SET_0_OFFSET);
    addr_hit[ 9] = (reg_addr == GPIO_GPIO_SET_1_OFFSET);
    addr_hit[10] = (reg_addr == GPIO_GPIO_CLEAR_0_OFFSET);
    addr_hit[11] = (reg_addr == GPIO_GPIO_CLEAR_1_OFFSET);
    addr_hit[12] = (reg_addr == GPIO_GPIO_TOGGLE_0_OFFSET);
    addr_hit[13] = (reg_addr == GPIO_GPIO_TOGGLE_1_OFFSET);
    addr_hit[14] = (reg_addr == GPIO_INTRPT_RISE_EN_0_OFFSET);
    addr_hit[15] = (reg_addr == GPIO_INTRPT_RISE_EN_1_OFFSET);
    addr_hit[16] = (reg_addr == GPIO_INTRPT_FALL_EN_0_OFFSET);
    addr_hit[17] = (reg_addr == GPIO_INTRPT_FALL_EN_1_OFFSET);
    addr_hit[18] = (reg_addr == GPIO_INTRPT_STATUS_0_OFFSET);
    addr_hit[19] = (reg_addr == GPIO_INTRPT_STATUS_1_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(GPIO_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(GPIO_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(GPIO_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(GPIO_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(GPIO_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(GPIO_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(GPIO_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(GPIO_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(GPIO_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(GPIO_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(GPIO_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(GPIO_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(GPIO_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(GPIO_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(GPIO_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(GPIO_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(GPIO_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(GPIO_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(GPIO_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(GPIO_PERMIT[19] & ~reg_be)))));
  end

  assign gpio_dir_0_we = addr_hit[0] & reg_we & !reg_error;
  assign gpio_dir_0_wd = reg_wdata[31:0];

  assign gpio_dir_1_we = addr_hit[1] & reg_we & !reg_error;
  assign gpio_dir_1_wd = reg_wdata[31:0];

  assign gpio_en_0_we = addr_hit[2] & reg_we & !reg_error;
  assign gpio_en_0_wd = reg_wdata[31:0];

  assign gpio_en_1_we = addr_hit[3] & reg_we & !reg_error;
  assign gpio_en_1_wd = reg_wdata[31:0];

  assign gpio_in_0_re = addr_hit[4] & reg_re & !reg_error;

  assign gpio_in_1_re = addr_hit[5] & reg_re & !reg_error;

  assign gpio_out_0_we = addr_hit[6] & reg_we & !reg_error;
  assign gpio_out_0_wd = reg_wdata[31:0];

  assign gpio_out_1_we = addr_hit[7] & reg_we & !reg_error;
  assign gpio_out_1_wd = reg_wdata[31:0];

  assign gpio_set_0_we = addr_hit[8] & reg_we & !reg_error;
  assign gpio_set_0_wd = reg_wdata[31:0];

  assign gpio_set_1_we = addr_hit[9] & reg_we & !reg_error;
  assign gpio_set_1_wd = reg_wdata[31:0];

  assign gpio_clear_0_we = addr_hit[10] & reg_we & !reg_error;
  assign gpio_clear_0_wd = reg_wdata[31:0];

  assign gpio_clear_1_we = addr_hit[11] & reg_we & !reg_error;
  assign gpio_clear_1_wd = reg_wdata[31:0];

  assign gpio_toggle_0_we = addr_hit[12] & reg_we & !reg_error;
  assign gpio_toggle_0_wd = reg_wdata[31:0];

  assign gpio_toggle_1_we = addr_hit[13] & reg_we & !reg_error;
  assign gpio_toggle_1_wd = reg_wdata[31:0];

  assign intrpt_rise_en_0_we = addr_hit[14] & reg_we & !reg_error;
  assign intrpt_rise_en_0_wd = reg_wdata[31:0];

  assign intrpt_rise_en_1_we = addr_hit[15] & reg_we & !reg_error;
  assign intrpt_rise_en_1_wd = reg_wdata[31:0];

  assign intrpt_fall_en_0_we = addr_hit[16] & reg_we & !reg_error;
  assign intrpt_fall_en_0_wd = reg_wdata[31:0];

  assign intrpt_fall_en_1_we = addr_hit[17] & reg_we & !reg_error;
  assign intrpt_fall_en_1_wd = reg_wdata[31:0];

  assign intrpt_status_0_we = addr_hit[18] & reg_we & !reg_error;
  assign intrpt_status_0_wd = reg_wdata[31:0];

  assign intrpt_status_1_we = addr_hit[19] & reg_we & !reg_error;
  assign intrpt_status_1_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = gpio_dir_0_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = gpio_dir_1_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = gpio_en_0_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = gpio_en_1_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = gpio_in_0_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = gpio_in_1_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = gpio_out_0_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = gpio_out_1_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = intrpt_rise_en_0_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = intrpt_rise_en_1_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = intrpt_fall_en_0_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = intrpt_fall_en_1_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = intrpt_status_0_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = intrpt_status_1_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
